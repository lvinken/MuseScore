// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MUSICXML_HXX
#define MUSICXML_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace musicxml
{
  class above_below;
  class beam_level;
  class color;
  class comma_separated_text;
  class css_font_size;
  class divisions;
  class enclosure_shape;
  class fermata_shape;
  class font_family;
  class font_size;
  class font_style;
  class font_weight;
  class left_center_right;
  class left_right;
  class line_length;
  class line_shape;
  class line_type;
  class midi_16;
  class midi_128;
  class midi_16384;
  class mute;
  class non_negative_decimal;
  class number_level;
  class number_of_lines;
  class number_or_normal;
  class numeral_value;
  class over_under;
  class percent;
  class positive_decimal;
  class positive_divisions;
  class positive_integer_or_empty;
  class rotation_degrees;
  class semi_pitched;
  class smufl_glyph_name;
  class smufl_accidental_glyph_name;
  class smufl_coda_glyph_name;
  class smufl_lyrics_glyph_name;
  class smufl_pictogram_glyph_name;
  class smufl_segno_glyph_name;
  class smufl_wavy_line_glyph_name;
  class start_note;
  class start_stop;
  class start_stop_continue;
  class start_stop_single;
  class string_number;
  class symbol_size;
  class tenths;
  class text_direction;
  class tied_type;
  class time_only;
  class top_bottom;
  class tremolo_type;
  class trill_beats;
  class trill_step;
  class two_note_turn;
  class up_down;
  class upright_inverted;
  class valign;
  class valign_image;
  class yes_no;
  class yes_no_number;
  class yyyy_mm_dd;
  class cancel_location;
  class clef_sign;
  class fifths;
  class mode;
  class show_frets;
  class staff_line;
  class staff_line_position;
  class staff_number;
  class staff_type;
  class time_relation;
  class time_separator;
  class time_symbol;
  class backward_forward;
  class bar_style;
  class ending_number;
  class right_left_middle;
  class start_stop_discontinue;
  class winged;
  class accordion_middle;
  class beater_value;
  class degree_symbol_value;
  class degree_type_value;
  class effect_value;
  class glass_value;
  class harmony_arrangement;
  class harmony_type;
  class kind_value;
  class line_end;
  class measure_numbering_value;
  class membrane_value;
  class metal_value;
  class milliseconds;
  class numeral_mode;
  class on_off;
  class pedal_type;
  class pitched_value;
  class principal_voice_symbol;
  class staff_divide_symbol;
  class start_stop_change_continue;
  class sync_type;
  class system_relation_number;
  class system_relation;
  class tip_direction;
  class stick_location;
  class stick_material;
  class stick_type;
  class up_down_stop_continue;
  class wedge_type;
  class wood_value;
  class distance_type;
  class glyph_type;
  class line_width_type;
  class margin_type;
  class millimeters;
  class note_size_type;
  class accidental_value;
  class arrow_direction;
  class arrow_style;
  class beam_value;
  class bend_shape;
  class breath_mark_value;
  class caesura_value;
  class circular_arrow;
  class fan;
  class handbell_value;
  class harmon_closed_location;
  class harmon_closed_value;
  class hole_closed_location;
  class hole_closed_value;
  class note_type_value;
  class notehead_value;
  class octave;
  class semitones;
  class show_tuplet;
  class stem_value;
  class step;
  class syllabic;
  class tap_hand;
  class tremolo_marks;
  class group_barline_value;
  class group_symbol_value;
  class measure_text;
  class swing_type_value;
  class accidental_text;
  class coda;
  class dynamics;
  class empty;
  class empty_placement;
  class empty_placement_smufl;
  class empty_print_style;
  class empty_print_style_align;
  class empty_print_style_align_id;
  class empty_print_object_style_align;
  class empty_trill_sound;
  class horizontal_turn;
  class fermata;
  class fingering;
  class formatted_symbol;
  class formatted_symbol_id;
  class formatted_text;
  class formatted_text_id;
  class fret;
  class level;
  class midi_device;
  class midi_instrument;
  class name_display;
  class other_play;
  class play;
  class segno;
  class string;
  class typed_text;
  class wavy_line;
  class attributes;
  class beat_repeat;
  class cancel;
  class clef;
  class double_;
  class for_part;
  class interchangeable;
  class key;
  class key_accidental;
  class key_octave;
  class line_detail;
  class measure_repeat;
  class measure_style;
  class multiple_rest;
  class part_clef;
  class part_symbol;
  class part_transpose;
  class slash;
  class staff_details;
  class staff_size;
  class staff_tuning;
  class time;
  class transpose;
  class bar_style_color;
  class barline;
  class ending;
  class repeat;
  class accord;
  class accordion_registration;
  class barre;
  class bass;
  class harmony_alter;
  class bass_step;
  class beater;
  class beat_unit_tied;
  class bracket;
  class dashes;
  class degree;
  class degree_alter;
  class degree_type;
  class degree_value;
  class direction;
  class direction_type;
  class effect;
  class feature;
  class first_fret;
  class frame;
  class frame_note;
  class glass;
  class grouping;
  class harmony;
  class harp_pedals;
  class image;
  class instrument_change;
  class inversion;
  class kind;
  class listening;
  class measure_numbering;
  class membrane;
  class metal;
  class metronome;
  class metronome_beam;
  class metronome_note;
  class metronome_tied;
  class time_modification;
  class metronome_tuplet;
  class numeral;
  class numeral_key;
  class numeral_root;
  class octave_shift;
  class offset;
  class other_direction;
  class other_listening;
  class pedal;
  class pedal_tuning;
  class per_minute;
  class percussion;
  class pitched;
  class principal_voice;
  class print;
  class root;
  class root_step;
  class scordatura;
  class sound;
  class staff_divide;
  class stick;
  class string_mute;
  class swing;
  class sync;
  class timpani;
  class wedge;
  class wood;
  class encoding;
  class identification;
  class miscellaneous;
  class miscellaneous_field;
  class supports;
  class appearance;
  class distance;
  class glyph;
  class line_width;
  class measure_layout;
  class note_size;
  class other_appearance;
  class page_layout;
  class page_margins;
  class scaling;
  class staff_layout;
  class system_dividers;
  class system_layout;
  class system_margins;
  class bookmark;
  class link;
  class accidental;
  class accidental_mark;
  class arpeggiate;
  class articulations;
  class arrow;
  class assess;
  class backup;
  class beam;
  class bend;
  class breath_mark;
  class caesura;
  class elision;
  class empty_line;
  class extend;
  class figure;
  class figured_bass;
  class forward;
  class glissando;
  class grace;
  class hammer_on_pull_off;
  class handbell;
  class harmon_closed;
  class harmon_mute;
  class harmonic;
  class heel_toe;
  class hole;
  class hole_closed;
  class instrument;
  class listen;
  class lyric;
  class mordent;
  class non_arpeggiate;
  class notations;
  class note;
  class note_type;
  class notehead;
  class notehead_text;
  class ornaments;
  class other_notation;
  class other_placement_text;
  class other_text;
  class pitch;
  class placement_text;
  class release;
  class rest;
  class slide;
  class slur;
  class stem;
  class strong_accent;
  class style_text;
  class tap;
  class technical;
  class text_element_data;
  class tie;
  class tied;
  class tremolo;
  class tuplet;
  class tuplet_dot;
  class tuplet_number;
  class tuplet_portion;
  class tuplet_type;
  class unpitched;
  class wait;
  class credit;
  class defaults;
  class empty_font;
  class group_barline;
  class group_name;
  class group_symbol;
  class instrument_link;
  class lyric_font;
  class lyric_language;
  class opus;
  class part_group;
  class part_link;
  class part_list;
  class part_name;
  class player;
  class score_instrument;
  class score_part;
  class virtual_instrument;
  class work;
  class number_or_normal_member;
  class positive_integer_or_empty_member;
  class directive;
  class score_partwise;
  class score_timewise;
  class part;
  class measure;
  class measure1;
  class part1;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move
#include <cstddef>   // std::size_t
#include <vector>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "xml.hxx"

#include "xlink.hxx"

namespace musicxml
{
  class above_below: public ::xml_schema::token
  {
    public:
    enum value
    {
      above,
      below
    };

    above_below (value v);

    above_below (const char* v);

    above_below (const ::std::string& v);

    above_below (const ::xml_schema::token& v);

    above_below (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    above_below (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    above_below (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    above_below (const above_below& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual above_below*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    above_below&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_above_below_convert ();
    }

    protected:
    value
    _xsd_above_below_convert () const;

    public:
    static const char* const _xsd_above_below_literals_[2];
    static const value _xsd_above_below_indexes_[2];
  };

  class beam_level: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    beam_level (const ::xml_schema::positive_integer&);

    beam_level (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    beam_level (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    beam_level (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    beam_level (const beam_level& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual beam_level*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~beam_level ();
  };

  class color: public ::xml_schema::token
  {
    public:
    // Constructors.
    //
    color ();

    color (const char*);

    color (const ::std::string&);

    color (const ::xml_schema::token&);

    color (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    color (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    color (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    color (const color& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual color*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~color ();
  };

  class comma_separated_text: public ::xml_schema::token
  {
    public:
    // Constructors.
    //
    comma_separated_text ();

    comma_separated_text (const char*);

    comma_separated_text (const ::std::string&);

    comma_separated_text (const ::xml_schema::token&);

    comma_separated_text (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    comma_separated_text (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    comma_separated_text (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    comma_separated_text (const comma_separated_text& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual comma_separated_text*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~comma_separated_text ();
  };

  class css_font_size: public ::xml_schema::token
  {
    public:
    enum value
    {
      xx_small,
      x_small,
      small,
      medium,
      large,
      x_large,
      xx_large
    };

    css_font_size (value v);

    css_font_size (const char* v);

    css_font_size (const ::std::string& v);

    css_font_size (const ::xml_schema::token& v);

    css_font_size (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    css_font_size (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    css_font_size (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    css_font_size (const css_font_size& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual css_font_size*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    css_font_size&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_css_font_size_convert ();
    }

    protected:
    value
    _xsd_css_font_size_convert () const;

    public:
    static const char* const _xsd_css_font_size_literals_[7];
    static const value _xsd_css_font_size_indexes_[7];
  };

  class divisions: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    divisions (const ::xml_schema::decimal&);

    divisions (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    divisions (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    divisions (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    divisions (const divisions& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual divisions*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~divisions ();
  };

  class enclosure_shape: public ::xml_schema::token
  {
    public:
    enum value
    {
      rectangle,
      square,
      oval,
      circle,
      bracket,
      inverted_bracket,
      triangle,
      diamond,
      pentagon,
      hexagon,
      heptagon,
      octagon,
      nonagon,
      decagon,
      none
    };

    enclosure_shape (value v);

    enclosure_shape (const char* v);

    enclosure_shape (const ::std::string& v);

    enclosure_shape (const ::xml_schema::token& v);

    enclosure_shape (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    enclosure_shape (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    enclosure_shape (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    enclosure_shape (const enclosure_shape& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual enclosure_shape*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    enclosure_shape&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_enclosure_shape_convert ();
    }

    protected:
    value
    _xsd_enclosure_shape_convert () const;

    public:
    static const char* const _xsd_enclosure_shape_literals_[15];
    static const value _xsd_enclosure_shape_indexes_[15];
  };

  class fermata_shape: public ::xml_schema::string
  {
    public:
    enum value
    {
      normal,
      angled,
      square,
      double_angled,
      double_square,
      double_dot,
      half_curve,
      curlew,
      empty
    };

    fermata_shape (value v);

    fermata_shape (const char* v);

    fermata_shape (const ::std::string& v);

    fermata_shape (const ::xml_schema::string& v);

    fermata_shape (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    fermata_shape (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    fermata_shape (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    fermata_shape (const fermata_shape& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual fermata_shape*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    fermata_shape&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_fermata_shape_convert ();
    }

    protected:
    value
    _xsd_fermata_shape_convert () const;

    public:
    static const char* const _xsd_fermata_shape_literals_[9];
    static const value _xsd_fermata_shape_indexes_[9];
  };

  class font_family: public ::musicxml::comma_separated_text
  {
    public:
    // Constructors.
    //
    font_family ();

    font_family (const char*);

    font_family (const ::std::string&);

    font_family (const ::xml_schema::token&);

    font_family (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    font_family (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    font_family (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    font_family (const font_family& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual font_family*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~font_family ();
  };

  class font_size: public ::xml_schema::string
  {
    public:

    font_size (const char* v);

    font_size (const ::std::string& v);

    font_size (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    font_size (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    font_size (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    font_size (const font_size& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual font_size*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class font_style: public ::xml_schema::token
  {
    public:
    enum value
    {
      normal,
      italic
    };

    font_style (value v);

    font_style (const char* v);

    font_style (const ::std::string& v);

    font_style (const ::xml_schema::token& v);

    font_style (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    font_style (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    font_style (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    font_style (const font_style& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual font_style*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    font_style&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_font_style_convert ();
    }

    protected:
    value
    _xsd_font_style_convert () const;

    public:
    static const char* const _xsd_font_style_literals_[2];
    static const value _xsd_font_style_indexes_[2];
  };

  class font_weight: public ::xml_schema::token
  {
    public:
    enum value
    {
      normal,
      bold
    };

    font_weight (value v);

    font_weight (const char* v);

    font_weight (const ::std::string& v);

    font_weight (const ::xml_schema::token& v);

    font_weight (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    font_weight (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    font_weight (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    font_weight (const font_weight& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual font_weight*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    font_weight&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_font_weight_convert ();
    }

    protected:
    value
    _xsd_font_weight_convert () const;

    public:
    static const char* const _xsd_font_weight_literals_[2];
    static const value _xsd_font_weight_indexes_[2];
  };

  class left_center_right: public ::xml_schema::token
  {
    public:
    enum value
    {
      left,
      center,
      right
    };

    left_center_right (value v);

    left_center_right (const char* v);

    left_center_right (const ::std::string& v);

    left_center_right (const ::xml_schema::token& v);

    left_center_right (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    left_center_right (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    left_center_right (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    left_center_right (const left_center_right& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual left_center_right*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    left_center_right&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_left_center_right_convert ();
    }

    protected:
    value
    _xsd_left_center_right_convert () const;

    public:
    static const char* const _xsd_left_center_right_literals_[3];
    static const value _xsd_left_center_right_indexes_[3];
  };

  class left_right: public ::xml_schema::token
  {
    public:
    enum value
    {
      left,
      right
    };

    left_right (value v);

    left_right (const char* v);

    left_right (const ::std::string& v);

    left_right (const ::xml_schema::token& v);

    left_right (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    left_right (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    left_right (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    left_right (const left_right& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual left_right*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    left_right&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_left_right_convert ();
    }

    protected:
    value
    _xsd_left_right_convert () const;

    public:
    static const char* const _xsd_left_right_literals_[2];
    static const value _xsd_left_right_indexes_[2];
  };

  class line_length: public ::xml_schema::token
  {
    public:
    enum value
    {
      short_,
      medium,
      long_
    };

    line_length (value v);

    line_length (const char* v);

    line_length (const ::std::string& v);

    line_length (const ::xml_schema::token& v);

    line_length (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    line_length (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    line_length (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    line_length (const line_length& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual line_length*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    line_length&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_line_length_convert ();
    }

    protected:
    value
    _xsd_line_length_convert () const;

    public:
    static const char* const _xsd_line_length_literals_[3];
    static const value _xsd_line_length_indexes_[3];
  };

  class line_shape: public ::xml_schema::token
  {
    public:
    enum value
    {
      straight,
      curved
    };

    line_shape (value v);

    line_shape (const char* v);

    line_shape (const ::std::string& v);

    line_shape (const ::xml_schema::token& v);

    line_shape (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    line_shape (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    line_shape (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    line_shape (const line_shape& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual line_shape*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    line_shape&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_line_shape_convert ();
    }

    protected:
    value
    _xsd_line_shape_convert () const;

    public:
    static const char* const _xsd_line_shape_literals_[2];
    static const value _xsd_line_shape_indexes_[2];
  };

  class line_type: public ::xml_schema::token
  {
    public:
    enum value
    {
      solid,
      dashed,
      dotted,
      wavy
    };

    line_type (value v);

    line_type (const char* v);

    line_type (const ::std::string& v);

    line_type (const ::xml_schema::token& v);

    line_type (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    line_type (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    line_type (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    line_type (const line_type& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual line_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    line_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_line_type_convert ();
    }

    protected:
    value
    _xsd_line_type_convert () const;

    public:
    static const char* const _xsd_line_type_literals_[4];
    static const value _xsd_line_type_indexes_[4];
  };

  class midi_16: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    midi_16 (const ::xml_schema::positive_integer&);

    midi_16 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    midi_16 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    midi_16 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    midi_16 (const midi_16& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual midi_16*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~midi_16 ();
  };

  class midi_128: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    midi_128 (const ::xml_schema::positive_integer&);

    midi_128 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    midi_128 (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    midi_128 (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    midi_128 (const midi_128& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual midi_128*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~midi_128 ();
  };

  class midi_16384: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    midi_16384 (const ::xml_schema::positive_integer&);

    midi_16384 (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    midi_16384 (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    midi_16384 (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    midi_16384 (const midi_16384& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual midi_16384*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~midi_16384 ();
  };

  class mute: public ::xml_schema::string
  {
    public:
    enum value
    {
      on,
      off,
      straight,
      cup,
      harmon_no_stem,
      harmon_stem,
      bucket,
      plunger,
      hat,
      solotone,
      practice,
      stop_mute,
      stop_hand,
      echo,
      palm
    };

    mute (value v);

    mute (const char* v);

    mute (const ::std::string& v);

    mute (const ::xml_schema::string& v);

    mute (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    mute (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    mute (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    mute (const mute& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual mute*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    mute&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_mute_convert ();
    }

    protected:
    value
    _xsd_mute_convert () const;

    public:
    static const char* const _xsd_mute_literals_[15];
    static const value _xsd_mute_indexes_[15];
  };

  class non_negative_decimal: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    non_negative_decimal (const ::xml_schema::decimal&);

    non_negative_decimal (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    non_negative_decimal (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    non_negative_decimal (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    non_negative_decimal (const non_negative_decimal& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual non_negative_decimal*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~non_negative_decimal ();
  };

  class number_level: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    number_level (const ::xml_schema::positive_integer&);

    number_level (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    number_level (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    number_level (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    number_level (const number_level& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual number_level*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~number_level ();
  };

  class number_of_lines: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    number_of_lines (const ::xml_schema::non_negative_integer&);

    number_of_lines (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    number_of_lines (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    number_of_lines (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    number_of_lines (const number_of_lines& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual number_of_lines*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~number_of_lines ();
  };

  class number_or_normal: public ::xml_schema::string
  {
    public:

    number_or_normal (const char* v);

    number_or_normal (const ::std::string& v);

    number_or_normal (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    number_or_normal (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    number_or_normal (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    number_or_normal (const number_or_normal& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual number_or_normal*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class numeral_value: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    numeral_value (const ::xml_schema::positive_integer&);

    numeral_value (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    numeral_value (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    numeral_value (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    numeral_value (const numeral_value& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual numeral_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~numeral_value ();
  };

  class over_under: public ::xml_schema::token
  {
    public:
    enum value
    {
      over,
      under
    };

    over_under (value v);

    over_under (const char* v);

    over_under (const ::std::string& v);

    over_under (const ::xml_schema::token& v);

    over_under (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    over_under (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    over_under (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    over_under (const over_under& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual over_under*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    over_under&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_over_under_convert ();
    }

    protected:
    value
    _xsd_over_under_convert () const;

    public:
    static const char* const _xsd_over_under_literals_[2];
    static const value _xsd_over_under_indexes_[2];
  };

  class percent: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    percent (const ::xml_schema::decimal&);

    percent (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    percent (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    percent (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    percent (const percent& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual percent*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~percent ();
  };

  class positive_decimal: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    positive_decimal (const ::xml_schema::decimal&);

    positive_decimal (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    positive_decimal (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    positive_decimal (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    positive_decimal (const positive_decimal& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual positive_decimal*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~positive_decimal ();
  };

  class positive_divisions: public ::musicxml::divisions
  {
    public:
    // Constructors.
    //
    positive_divisions (const ::xml_schema::decimal&);

    positive_divisions (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    positive_divisions (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    positive_divisions (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    positive_divisions (const positive_divisions& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual positive_divisions*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~positive_divisions ();
  };

  class positive_integer_or_empty: public ::xml_schema::string
  {
    public:

    positive_integer_or_empty (const char* v);

    positive_integer_or_empty (const ::std::string& v);

    positive_integer_or_empty (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    positive_integer_or_empty (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    positive_integer_or_empty (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    positive_integer_or_empty (const positive_integer_or_empty& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    virtual positive_integer_or_empty*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class rotation_degrees: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    rotation_degrees (const ::xml_schema::decimal&);

    rotation_degrees (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    rotation_degrees (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    rotation_degrees (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    rotation_degrees (const rotation_degrees& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual rotation_degrees*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~rotation_degrees ();
  };

  class semi_pitched: public ::xml_schema::string
  {
    public:
    enum value
    {
      high,
      medium_high,
      medium,
      medium_low,
      low,
      very_low
    };

    semi_pitched (value v);

    semi_pitched (const char* v);

    semi_pitched (const ::std::string& v);

    semi_pitched (const ::xml_schema::string& v);

    semi_pitched (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    semi_pitched (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    semi_pitched (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    semi_pitched (const semi_pitched& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual semi_pitched*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    semi_pitched&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_semi_pitched_convert ();
    }

    protected:
    value
    _xsd_semi_pitched_convert () const;

    public:
    static const char* const _xsd_semi_pitched_literals_[6];
    static const value _xsd_semi_pitched_indexes_[6];
  };

  class smufl_glyph_name: public ::xml_schema::nmtoken
  {
    public:
    // Constructors.
    //
    smufl_glyph_name (const char*);

    smufl_glyph_name (const ::std::string&);

    smufl_glyph_name (const ::xml_schema::nmtoken&);

    smufl_glyph_name (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    smufl_glyph_name (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    smufl_glyph_name (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    smufl_glyph_name (const smufl_glyph_name& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual smufl_glyph_name*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~smufl_glyph_name ();
  };

  class smufl_accidental_glyph_name: public ::musicxml::smufl_glyph_name
  {
    public:
    // Constructors.
    //
    smufl_accidental_glyph_name (const char*);

    smufl_accidental_glyph_name (const ::std::string&);

    smufl_accidental_glyph_name (const ::xml_schema::nmtoken&);

    smufl_accidental_glyph_name (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    smufl_accidental_glyph_name (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    smufl_accidental_glyph_name (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    smufl_accidental_glyph_name (const smufl_accidental_glyph_name& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

    virtual smufl_accidental_glyph_name*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~smufl_accidental_glyph_name ();
  };

  class smufl_coda_glyph_name: public ::musicxml::smufl_glyph_name
  {
    public:
    // Constructors.
    //
    smufl_coda_glyph_name (const char*);

    smufl_coda_glyph_name (const ::std::string&);

    smufl_coda_glyph_name (const ::xml_schema::nmtoken&);

    smufl_coda_glyph_name (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    smufl_coda_glyph_name (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    smufl_coda_glyph_name (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    smufl_coda_glyph_name (const smufl_coda_glyph_name& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual smufl_coda_glyph_name*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~smufl_coda_glyph_name ();
  };

  class smufl_lyrics_glyph_name: public ::musicxml::smufl_glyph_name
  {
    public:
    // Constructors.
    //
    smufl_lyrics_glyph_name (const char*);

    smufl_lyrics_glyph_name (const ::std::string&);

    smufl_lyrics_glyph_name (const ::xml_schema::nmtoken&);

    smufl_lyrics_glyph_name (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    smufl_lyrics_glyph_name (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    smufl_lyrics_glyph_name (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    smufl_lyrics_glyph_name (const smufl_lyrics_glyph_name& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual smufl_lyrics_glyph_name*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~smufl_lyrics_glyph_name ();
  };

  class smufl_pictogram_glyph_name: public ::musicxml::smufl_glyph_name
  {
    public:
    // Constructors.
    //
    smufl_pictogram_glyph_name (const char*);

    smufl_pictogram_glyph_name (const ::std::string&);

    smufl_pictogram_glyph_name (const ::xml_schema::nmtoken&);

    smufl_pictogram_glyph_name (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    smufl_pictogram_glyph_name (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    smufl_pictogram_glyph_name (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    smufl_pictogram_glyph_name (const smufl_pictogram_glyph_name& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    virtual smufl_pictogram_glyph_name*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~smufl_pictogram_glyph_name ();
  };

  class smufl_segno_glyph_name: public ::musicxml::smufl_glyph_name
  {
    public:
    // Constructors.
    //
    smufl_segno_glyph_name (const char*);

    smufl_segno_glyph_name (const ::std::string&);

    smufl_segno_glyph_name (const ::xml_schema::nmtoken&);

    smufl_segno_glyph_name (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    smufl_segno_glyph_name (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    smufl_segno_glyph_name (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    smufl_segno_glyph_name (const smufl_segno_glyph_name& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual smufl_segno_glyph_name*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~smufl_segno_glyph_name ();
  };

  class smufl_wavy_line_glyph_name: public ::musicxml::smufl_glyph_name
  {
    public:
    // Constructors.
    //
    smufl_wavy_line_glyph_name (const char*);

    smufl_wavy_line_glyph_name (const ::std::string&);

    smufl_wavy_line_glyph_name (const ::xml_schema::nmtoken&);

    smufl_wavy_line_glyph_name (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    smufl_wavy_line_glyph_name (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    smufl_wavy_line_glyph_name (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    smufl_wavy_line_glyph_name (const smufl_wavy_line_glyph_name& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    virtual smufl_wavy_line_glyph_name*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~smufl_wavy_line_glyph_name ();
  };

  class start_note: public ::xml_schema::token
  {
    public:
    enum value
    {
      upper,
      main,
      below
    };

    start_note (value v);

    start_note (const char* v);

    start_note (const ::std::string& v);

    start_note (const ::xml_schema::token& v);

    start_note (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    start_note (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    start_note (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    start_note (const start_note& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual start_note*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    start_note&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_start_note_convert ();
    }

    protected:
    value
    _xsd_start_note_convert () const;

    public:
    static const char* const _xsd_start_note_literals_[3];
    static const value _xsd_start_note_indexes_[3];
  };

  class start_stop: public ::xml_schema::token
  {
    public:
    enum value
    {
      start,
      stop
    };

    start_stop (value v);

    start_stop (const char* v);

    start_stop (const ::std::string& v);

    start_stop (const ::xml_schema::token& v);

    start_stop (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    start_stop (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    start_stop (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    start_stop (const start_stop& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual start_stop*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    start_stop&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_start_stop_convert ();
    }

    protected:
    value
    _xsd_start_stop_convert () const;

    public:
    static const char* const _xsd_start_stop_literals_[2];
    static const value _xsd_start_stop_indexes_[2];
  };

  class start_stop_continue: public ::xml_schema::token
  {
    public:
    enum value
    {
      start,
      stop,
      continue_
    };

    start_stop_continue (value v);

    start_stop_continue (const char* v);

    start_stop_continue (const ::std::string& v);

    start_stop_continue (const ::xml_schema::token& v);

    start_stop_continue (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    start_stop_continue (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    start_stop_continue (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    start_stop_continue (const start_stop_continue& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual start_stop_continue*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    start_stop_continue&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_start_stop_continue_convert ();
    }

    protected:
    value
    _xsd_start_stop_continue_convert () const;

    public:
    static const char* const _xsd_start_stop_continue_literals_[3];
    static const value _xsd_start_stop_continue_indexes_[3];
  };

  class start_stop_single: public ::xml_schema::token
  {
    public:
    enum value
    {
      start,
      stop,
      single
    };

    start_stop_single (value v);

    start_stop_single (const char* v);

    start_stop_single (const ::std::string& v);

    start_stop_single (const ::xml_schema::token& v);

    start_stop_single (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    start_stop_single (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    start_stop_single (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    start_stop_single (const start_stop_single& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual start_stop_single*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    start_stop_single&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_start_stop_single_convert ();
    }

    protected:
    value
    _xsd_start_stop_single_convert () const;

    public:
    static const char* const _xsd_start_stop_single_literals_[3];
    static const value _xsd_start_stop_single_indexes_[3];
  };

  class string_number: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    string_number (const ::xml_schema::positive_integer&);

    string_number (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    string_number (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    string_number (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    string_number (const string_number& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual string_number*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~string_number ();
  };

  class symbol_size: public ::xml_schema::token
  {
    public:
    enum value
    {
      full,
      cue,
      grace_cue,
      large
    };

    symbol_size (value v);

    symbol_size (const char* v);

    symbol_size (const ::std::string& v);

    symbol_size (const ::xml_schema::token& v);

    symbol_size (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    symbol_size (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    symbol_size (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    symbol_size (const symbol_size& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual symbol_size*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    symbol_size&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_symbol_size_convert ();
    }

    protected:
    value
    _xsd_symbol_size_convert () const;

    public:
    static const char* const _xsd_symbol_size_literals_[4];
    static const value _xsd_symbol_size_indexes_[4];
  };

  class tenths: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    tenths (const ::xml_schema::decimal&);

    tenths (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    tenths (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    tenths (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    tenths (const tenths& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual tenths*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~tenths ();
  };

  class text_direction: public ::xml_schema::token
  {
    public:
    enum value
    {
      ltr,
      rtl,
      lro,
      rlo
    };

    text_direction (value v);

    text_direction (const char* v);

    text_direction (const ::std::string& v);

    text_direction (const ::xml_schema::token& v);

    text_direction (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    text_direction (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    text_direction (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    text_direction (const text_direction& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual text_direction*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    text_direction&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_text_direction_convert ();
    }

    protected:
    value
    _xsd_text_direction_convert () const;

    public:
    static const char* const _xsd_text_direction_literals_[4];
    static const value _xsd_text_direction_indexes_[4];
  };

  class tied_type: public ::xml_schema::token
  {
    public:
    enum value
    {
      start,
      stop,
      continue_,
      let_ring
    };

    tied_type (value v);

    tied_type (const char* v);

    tied_type (const ::std::string& v);

    tied_type (const ::xml_schema::token& v);

    tied_type (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    tied_type (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    tied_type (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    tied_type (const tied_type& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual tied_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tied_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tied_type_convert ();
    }

    protected:
    value
    _xsd_tied_type_convert () const;

    public:
    static const char* const _xsd_tied_type_literals_[4];
    static const value _xsd_tied_type_indexes_[4];
  };

  class time_only: public ::xml_schema::token
  {
    public:
    // Constructors.
    //
    time_only ();

    time_only (const char*);

    time_only (const ::std::string&);

    time_only (const ::xml_schema::token&);

    time_only (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    time_only (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    time_only (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    time_only (const time_only& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual time_only*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~time_only ();
  };

  class top_bottom: public ::xml_schema::token
  {
    public:
    enum value
    {
      top,
      bottom
    };

    top_bottom (value v);

    top_bottom (const char* v);

    top_bottom (const ::std::string& v);

    top_bottom (const ::xml_schema::token& v);

    top_bottom (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    top_bottom (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    top_bottom (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    top_bottom (const top_bottom& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual top_bottom*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    top_bottom&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_top_bottom_convert ();
    }

    protected:
    value
    _xsd_top_bottom_convert () const;

    public:
    static const char* const _xsd_top_bottom_literals_[2];
    static const value _xsd_top_bottom_indexes_[2];
  };

  class tremolo_type: public ::xml_schema::token
  {
    public:
    enum value
    {
      start,
      stop,
      single,
      unmeasured
    };

    tremolo_type (value v);

    tremolo_type (const char* v);

    tremolo_type (const ::std::string& v);

    tremolo_type (const ::xml_schema::token& v);

    tremolo_type (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    tremolo_type (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    tremolo_type (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    tremolo_type (const tremolo_type& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual tremolo_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tremolo_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tremolo_type_convert ();
    }

    protected:
    value
    _xsd_tremolo_type_convert () const;

    public:
    static const char* const _xsd_tremolo_type_literals_[4];
    static const value _xsd_tremolo_type_indexes_[4];
  };

  class trill_beats: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    trill_beats (const ::xml_schema::decimal&);

    trill_beats (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    trill_beats (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    trill_beats (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    trill_beats (const trill_beats& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual trill_beats*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~trill_beats ();
  };

  class trill_step: public ::xml_schema::token
  {
    public:
    enum value
    {
      whole,
      half,
      unison
    };

    trill_step (value v);

    trill_step (const char* v);

    trill_step (const ::std::string& v);

    trill_step (const ::xml_schema::token& v);

    trill_step (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    trill_step (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    trill_step (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    trill_step (const trill_step& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual trill_step*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    trill_step&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_trill_step_convert ();
    }

    protected:
    value
    _xsd_trill_step_convert () const;

    public:
    static const char* const _xsd_trill_step_literals_[3];
    static const value _xsd_trill_step_indexes_[3];
  };

  class two_note_turn: public ::xml_schema::token
  {
    public:
    enum value
    {
      whole,
      half,
      none
    };

    two_note_turn (value v);

    two_note_turn (const char* v);

    two_note_turn (const ::std::string& v);

    two_note_turn (const ::xml_schema::token& v);

    two_note_turn (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    two_note_turn (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    two_note_turn (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    two_note_turn (const two_note_turn& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual two_note_turn*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    two_note_turn&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_two_note_turn_convert ();
    }

    protected:
    value
    _xsd_two_note_turn_convert () const;

    public:
    static const char* const _xsd_two_note_turn_literals_[3];
    static const value _xsd_two_note_turn_indexes_[3];
  };

  class up_down: public ::xml_schema::token
  {
    public:
    enum value
    {
      up,
      down
    };

    up_down (value v);

    up_down (const char* v);

    up_down (const ::std::string& v);

    up_down (const ::xml_schema::token& v);

    up_down (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    up_down (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    up_down (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    up_down (const up_down& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual up_down*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    up_down&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_up_down_convert ();
    }

    protected:
    value
    _xsd_up_down_convert () const;

    public:
    static const char* const _xsd_up_down_literals_[2];
    static const value _xsd_up_down_indexes_[2];
  };

  class upright_inverted: public ::xml_schema::token
  {
    public:
    enum value
    {
      upright,
      inverted
    };

    upright_inverted (value v);

    upright_inverted (const char* v);

    upright_inverted (const ::std::string& v);

    upright_inverted (const ::xml_schema::token& v);

    upright_inverted (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    upright_inverted (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    upright_inverted (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    upright_inverted (const upright_inverted& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual upright_inverted*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    upright_inverted&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_upright_inverted_convert ();
    }

    protected:
    value
    _xsd_upright_inverted_convert () const;

    public:
    static const char* const _xsd_upright_inverted_literals_[2];
    static const value _xsd_upright_inverted_indexes_[2];
  };

  class valign: public ::xml_schema::token
  {
    public:
    enum value
    {
      top,
      middle,
      bottom,
      baseline
    };

    valign (value v);

    valign (const char* v);

    valign (const ::std::string& v);

    valign (const ::xml_schema::token& v);

    valign (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    valign (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    valign (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    valign (const valign& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual valign*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    valign&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_valign_convert ();
    }

    protected:
    value
    _xsd_valign_convert () const;

    public:
    static const char* const _xsd_valign_literals_[4];
    static const value _xsd_valign_indexes_[4];
  };

  class valign_image: public ::xml_schema::token
  {
    public:
    enum value
    {
      top,
      middle,
      bottom
    };

    valign_image (value v);

    valign_image (const char* v);

    valign_image (const ::std::string& v);

    valign_image (const ::xml_schema::token& v);

    valign_image (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    valign_image (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    valign_image (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    valign_image (const valign_image& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual valign_image*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    valign_image&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_valign_image_convert ();
    }

    protected:
    value
    _xsd_valign_image_convert () const;

    public:
    static const char* const _xsd_valign_image_literals_[3];
    static const value _xsd_valign_image_indexes_[3];
  };

  class yes_no: public ::xml_schema::token
  {
    public:
    enum value
    {
      yes,
      no
    };

    yes_no (value v);

    yes_no (const char* v);

    yes_no (const ::std::string& v);

    yes_no (const ::xml_schema::token& v);

    yes_no (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    yes_no (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    yes_no (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    yes_no (const yes_no& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual yes_no*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    yes_no&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_yes_no_convert ();
    }

    protected:
    value
    _xsd_yes_no_convert () const;

    public:
    static const char* const _xsd_yes_no_literals_[2];
    static const value _xsd_yes_no_indexes_[2];
  };

  class yes_no_number: public ::xml_schema::string
  {
    public:

    yes_no_number (const char* v);

    yes_no_number (const ::std::string& v);

    yes_no_number (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    yes_no_number (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    yes_no_number (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    yes_no_number (const yes_no_number& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual yes_no_number*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class yyyy_mm_dd: public ::xml_schema::date
  {
    public:
    // Constructors.
    //
    yyyy_mm_dd (const ::xml_schema::date&);

    yyyy_mm_dd (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    yyyy_mm_dd (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    yyyy_mm_dd (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    yyyy_mm_dd (const yyyy_mm_dd& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual yyyy_mm_dd*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~yyyy_mm_dd ();
  };

  class cancel_location: public ::xml_schema::string
  {
    public:
    enum value
    {
      left,
      right,
      before_barline
    };

    cancel_location (value v);

    cancel_location (const char* v);

    cancel_location (const ::std::string& v);

    cancel_location (const ::xml_schema::string& v);

    cancel_location (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    cancel_location (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    cancel_location (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    cancel_location (const cancel_location& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual cancel_location*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    cancel_location&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_cancel_location_convert ();
    }

    protected:
    value
    _xsd_cancel_location_convert () const;

    public:
    static const char* const _xsd_cancel_location_literals_[3];
    static const value _xsd_cancel_location_indexes_[3];
  };

  class clef_sign: public ::xml_schema::string
  {
    public:
    enum value
    {
      G,
      F,
      C,
      percussion,
      TAB,
      jianpu,
      none
    };

    clef_sign (value v);

    clef_sign (const char* v);

    clef_sign (const ::std::string& v);

    clef_sign (const ::xml_schema::string& v);

    clef_sign (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    clef_sign (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    clef_sign (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    clef_sign (const clef_sign& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual clef_sign*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    clef_sign&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_clef_sign_convert ();
    }

    protected:
    value
    _xsd_clef_sign_convert () const;

    public:
    static const char* const _xsd_clef_sign_literals_[7];
    static const value _xsd_clef_sign_indexes_[7];
  };

  class fifths: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    fifths (const ::xml_schema::integer&);

    fifths (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    fifths (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    fifths (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    fifths (const fifths& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual fifths*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~fifths ();
  };

  class mode: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    mode ();

    mode (const char*);

    mode (const ::std::string&);

    mode (const ::xml_schema::string&);

    mode (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    mode (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    mode (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    mode (const mode& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual mode*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~mode ();
  };

  class show_frets: public ::xml_schema::token
  {
    public:
    enum value
    {
      numbers,
      letters
    };

    show_frets (value v);

    show_frets (const char* v);

    show_frets (const ::std::string& v);

    show_frets (const ::xml_schema::token& v);

    show_frets (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    show_frets (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    show_frets (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    show_frets (const show_frets& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual show_frets*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    show_frets&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_show_frets_convert ();
    }

    protected:
    value
    _xsd_show_frets_convert () const;

    public:
    static const char* const _xsd_show_frets_literals_[2];
    static const value _xsd_show_frets_indexes_[2];
  };

  class staff_line: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    staff_line (const ::xml_schema::positive_integer&);

    staff_line (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    staff_line (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    staff_line (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    staff_line (const staff_line& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual staff_line*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~staff_line ();
  };

  class staff_line_position: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    staff_line_position (const ::xml_schema::integer&);

    staff_line_position (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    staff_line_position (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    staff_line_position (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    staff_line_position (const staff_line_position& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual staff_line_position*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~staff_line_position ();
  };

  class staff_number: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    staff_number (const ::xml_schema::positive_integer&);

    staff_number (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    staff_number (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    staff_number (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    staff_number (const staff_number& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual staff_number*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~staff_number ();
  };

  class staff_type: public ::xml_schema::string
  {
    public:
    enum value
    {
      ossia,
      editorial,
      cue,
      alternate,
      regular
    };

    staff_type (value v);

    staff_type (const char* v);

    staff_type (const ::std::string& v);

    staff_type (const ::xml_schema::string& v);

    staff_type (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    staff_type (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    staff_type (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    staff_type (const staff_type& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual staff_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    staff_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_staff_type_convert ();
    }

    protected:
    value
    _xsd_staff_type_convert () const;

    public:
    static const char* const _xsd_staff_type_literals_[5];
    static const value _xsd_staff_type_indexes_[5];
  };

  class time_relation: public ::xml_schema::string
  {
    public:
    enum value
    {
      parentheses,
      bracket,
      equals,
      slash,
      space,
      hyphen
    };

    time_relation (value v);

    time_relation (const char* v);

    time_relation (const ::std::string& v);

    time_relation (const ::xml_schema::string& v);

    time_relation (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    time_relation (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    time_relation (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    time_relation (const time_relation& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual time_relation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    time_relation&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_time_relation_convert ();
    }

    protected:
    value
    _xsd_time_relation_convert () const;

    public:
    static const char* const _xsd_time_relation_literals_[6];
    static const value _xsd_time_relation_indexes_[6];
  };

  class time_separator: public ::xml_schema::token
  {
    public:
    enum value
    {
      none,
      horizontal,
      diagonal,
      vertical,
      adjacent
    };

    time_separator (value v);

    time_separator (const char* v);

    time_separator (const ::std::string& v);

    time_separator (const ::xml_schema::token& v);

    time_separator (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    time_separator (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    time_separator (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    time_separator (const time_separator& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual time_separator*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    time_separator&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_time_separator_convert ();
    }

    protected:
    value
    _xsd_time_separator_convert () const;

    public:
    static const char* const _xsd_time_separator_literals_[5];
    static const value _xsd_time_separator_indexes_[5];
  };

  class time_symbol: public ::xml_schema::token
  {
    public:
    enum value
    {
      common,
      cut,
      single_number,
      note,
      dotted_note,
      normal
    };

    time_symbol (value v);

    time_symbol (const char* v);

    time_symbol (const ::std::string& v);

    time_symbol (const ::xml_schema::token& v);

    time_symbol (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    time_symbol (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    time_symbol (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    time_symbol (const time_symbol& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual time_symbol*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    time_symbol&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_time_symbol_convert ();
    }

    protected:
    value
    _xsd_time_symbol_convert () const;

    public:
    static const char* const _xsd_time_symbol_literals_[6];
    static const value _xsd_time_symbol_indexes_[6];
  };

  class backward_forward: public ::xml_schema::token
  {
    public:
    enum value
    {
      backward,
      forward
    };

    backward_forward (value v);

    backward_forward (const char* v);

    backward_forward (const ::std::string& v);

    backward_forward (const ::xml_schema::token& v);

    backward_forward (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    backward_forward (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    backward_forward (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    backward_forward (const backward_forward& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual backward_forward*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    backward_forward&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_backward_forward_convert ();
    }

    protected:
    value
    _xsd_backward_forward_convert () const;

    public:
    static const char* const _xsd_backward_forward_literals_[2];
    static const value _xsd_backward_forward_indexes_[2];
  };

  class bar_style: public ::xml_schema::string
  {
    public:
    enum value
    {
      regular,
      dotted,
      dashed,
      heavy,
      light_light,
      light_heavy,
      heavy_light,
      heavy_heavy,
      tick,
      short_,
      none
    };

    bar_style (value v);

    bar_style (const char* v);

    bar_style (const ::std::string& v);

    bar_style (const ::xml_schema::string& v);

    bar_style (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    bar_style (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    bar_style (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    bar_style (const bar_style& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual bar_style*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    bar_style&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_bar_style_convert ();
    }

    protected:
    value
    _xsd_bar_style_convert () const;

    public:
    static const char* const _xsd_bar_style_literals_[11];
    static const value _xsd_bar_style_indexes_[11];
  };

  class ending_number: public ::xml_schema::token
  {
    public:
    // Constructors.
    //
    ending_number ();

    ending_number (const char*);

    ending_number (const ::std::string&);

    ending_number (const ::xml_schema::token&);

    ending_number (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    ending_number (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    ending_number (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    ending_number (const ending_number& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual ending_number*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ending_number ();
  };

  class right_left_middle: public ::xml_schema::token
  {
    public:
    enum value
    {
      right,
      left,
      middle
    };

    right_left_middle (value v);

    right_left_middle (const char* v);

    right_left_middle (const ::std::string& v);

    right_left_middle (const ::xml_schema::token& v);

    right_left_middle (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    right_left_middle (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    right_left_middle (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    right_left_middle (const right_left_middle& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual right_left_middle*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    right_left_middle&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_right_left_middle_convert ();
    }

    protected:
    value
    _xsd_right_left_middle_convert () const;

    public:
    static const char* const _xsd_right_left_middle_literals_[3];
    static const value _xsd_right_left_middle_indexes_[3];
  };

  class start_stop_discontinue: public ::xml_schema::token
  {
    public:
    enum value
    {
      start,
      stop,
      discontinue
    };

    start_stop_discontinue (value v);

    start_stop_discontinue (const char* v);

    start_stop_discontinue (const ::std::string& v);

    start_stop_discontinue (const ::xml_schema::token& v);

    start_stop_discontinue (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    start_stop_discontinue (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    start_stop_discontinue (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    start_stop_discontinue (const start_stop_discontinue& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual start_stop_discontinue*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    start_stop_discontinue&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_start_stop_discontinue_convert ();
    }

    protected:
    value
    _xsd_start_stop_discontinue_convert () const;

    public:
    static const char* const _xsd_start_stop_discontinue_literals_[3];
    static const value _xsd_start_stop_discontinue_indexes_[3];
  };

  class winged: public ::xml_schema::token
  {
    public:
    enum value
    {
      none,
      straight,
      curved,
      double_straight,
      double_curved
    };

    winged (value v);

    winged (const char* v);

    winged (const ::std::string& v);

    winged (const ::xml_schema::token& v);

    winged (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    winged (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    winged (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    winged (const winged& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual winged*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    winged&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_winged_convert ();
    }

    protected:
    value
    _xsd_winged_convert () const;

    public:
    static const char* const _xsd_winged_literals_[5];
    static const value _xsd_winged_indexes_[5];
  };

  class accordion_middle: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    accordion_middle (const ::xml_schema::positive_integer&);

    accordion_middle (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    accordion_middle (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    accordion_middle (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    accordion_middle (const accordion_middle& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual accordion_middle*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~accordion_middle ();
  };

  class beater_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      bow,
      chime_hammer,
      coin,
      drum_stick,
      finger,
      fingernail,
      fist,
      guiro_scraper,
      hammer,
      hand,
      jazz_stick,
      knitting_needle,
      metal_hammer,
      slide_brush_on_gong,
      snare_stick,
      spoon_mallet,
      superball,
      triangle_beater,
      triangle_beater_plain,
      wire_brush
    };

    beater_value (value v);

    beater_value (const char* v);

    beater_value (const ::std::string& v);

    beater_value (const ::xml_schema::string& v);

    beater_value (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    beater_value (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    beater_value (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    beater_value (const beater_value& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual beater_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    beater_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_beater_value_convert ();
    }

    protected:
    value
    _xsd_beater_value_convert () const;

    public:
    static const char* const _xsd_beater_value_literals_[20];
    static const value _xsd_beater_value_indexes_[20];
  };

  class degree_symbol_value: public ::xml_schema::token
  {
    public:
    enum value
    {
      major,
      minor,
      augmented,
      diminished,
      half_diminished
    };

    degree_symbol_value (value v);

    degree_symbol_value (const char* v);

    degree_symbol_value (const ::std::string& v);

    degree_symbol_value (const ::xml_schema::token& v);

    degree_symbol_value (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    degree_symbol_value (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    degree_symbol_value (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    degree_symbol_value (const degree_symbol_value& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual degree_symbol_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    degree_symbol_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_degree_symbol_value_convert ();
    }

    protected:
    value
    _xsd_degree_symbol_value_convert () const;

    public:
    static const char* const _xsd_degree_symbol_value_literals_[5];
    static const value _xsd_degree_symbol_value_indexes_[5];
  };

  class degree_type_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      add,
      alter,
      subtract
    };

    degree_type_value (value v);

    degree_type_value (const char* v);

    degree_type_value (const ::std::string& v);

    degree_type_value (const ::xml_schema::string& v);

    degree_type_value (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    degree_type_value (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    degree_type_value (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    degree_type_value (const degree_type_value& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual degree_type_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    degree_type_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_degree_type_value_convert ();
    }

    protected:
    value
    _xsd_degree_type_value_convert () const;

    public:
    static const char* const _xsd_degree_type_value_literals_[3];
    static const value _xsd_degree_type_value_indexes_[3];
  };

  class effect_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      anvil,
      auto_horn,
      bird_whistle,
      cannon,
      duck_call,
      gun_shot,
      klaxon_horn,
      lions_roar,
      lotus_flute,
      megaphone,
      police_whistle,
      siren,
      slide_whistle,
      thunder_sheet,
      wind_machine,
      wind_whistle
    };

    effect_value (value v);

    effect_value (const char* v);

    effect_value (const ::std::string& v);

    effect_value (const ::xml_schema::string& v);

    effect_value (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    effect_value (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    effect_value (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    effect_value (const effect_value& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual effect_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    effect_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_effect_value_convert ();
    }

    protected:
    value
    _xsd_effect_value_convert () const;

    public:
    static const char* const _xsd_effect_value_literals_[16];
    static const value _xsd_effect_value_indexes_[16];
  };

  class glass_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      glass_harmonica,
      glass_harp,
      wind_chimes
    };

    glass_value (value v);

    glass_value (const char* v);

    glass_value (const ::std::string& v);

    glass_value (const ::xml_schema::string& v);

    glass_value (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    glass_value (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    glass_value (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    glass_value (const glass_value& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual glass_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    glass_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_glass_value_convert ();
    }

    protected:
    value
    _xsd_glass_value_convert () const;

    public:
    static const char* const _xsd_glass_value_literals_[3];
    static const value _xsd_glass_value_indexes_[3];
  };

  class harmony_arrangement: public ::xml_schema::token
  {
    public:
    enum value
    {
      vertical,
      horizontal,
      diagonal
    };

    harmony_arrangement (value v);

    harmony_arrangement (const char* v);

    harmony_arrangement (const ::std::string& v);

    harmony_arrangement (const ::xml_schema::token& v);

    harmony_arrangement (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    harmony_arrangement (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    harmony_arrangement (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    harmony_arrangement (const harmony_arrangement& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual harmony_arrangement*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    harmony_arrangement&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_harmony_arrangement_convert ();
    }

    protected:
    value
    _xsd_harmony_arrangement_convert () const;

    public:
    static const char* const _xsd_harmony_arrangement_literals_[3];
    static const value _xsd_harmony_arrangement_indexes_[3];
  };

  class harmony_type: public ::xml_schema::token
  {
    public:
    enum value
    {
      explicit_,
      implied,
      alternate
    };

    harmony_type (value v);

    harmony_type (const char* v);

    harmony_type (const ::std::string& v);

    harmony_type (const ::xml_schema::token& v);

    harmony_type (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    harmony_type (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    harmony_type (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    harmony_type (const harmony_type& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual harmony_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    harmony_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_harmony_type_convert ();
    }

    protected:
    value
    _xsd_harmony_type_convert () const;

    public:
    static const char* const _xsd_harmony_type_literals_[3];
    static const value _xsd_harmony_type_indexes_[3];
  };

  class kind_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      major,
      minor,
      augmented,
      diminished,
      dominant,
      major_seventh,
      minor_seventh,
      diminished_seventh,
      augmented_seventh,
      half_diminished,
      major_minor,
      major_sixth,
      minor_sixth,
      dominant_ninth,
      major_ninth,
      minor_ninth,
      dominant_11th,
      major_11th,
      minor_11th,
      dominant_13th,
      major_13th,
      minor_13th,
      suspended_second,
      suspended_fourth,
      Neapolitan,
      Italian,
      French,
      German,
      pedal,
      power,
      Tristan,
      other,
      none
    };

    kind_value (value v);

    kind_value (const char* v);

    kind_value (const ::std::string& v);

    kind_value (const ::xml_schema::string& v);

    kind_value (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    kind_value (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    kind_value (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    kind_value (const kind_value& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual kind_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    kind_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_kind_value_convert ();
    }

    protected:
    value
    _xsd_kind_value_convert () const;

    public:
    static const char* const _xsd_kind_value_literals_[33];
    static const value _xsd_kind_value_indexes_[33];
  };

  class line_end: public ::xml_schema::token
  {
    public:
    enum value
    {
      up,
      down,
      both,
      arrow,
      none
    };

    line_end (value v);

    line_end (const char* v);

    line_end (const ::std::string& v);

    line_end (const ::xml_schema::token& v);

    line_end (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    line_end (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    line_end (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    line_end (const line_end& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual line_end*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    line_end&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_line_end_convert ();
    }

    protected:
    value
    _xsd_line_end_convert () const;

    public:
    static const char* const _xsd_line_end_literals_[5];
    static const value _xsd_line_end_indexes_[5];
  };

  class measure_numbering_value: public ::xml_schema::token
  {
    public:
    enum value
    {
      none,
      measure,
      system
    };

    measure_numbering_value (value v);

    measure_numbering_value (const char* v);

    measure_numbering_value (const ::std::string& v);

    measure_numbering_value (const ::xml_schema::token& v);

    measure_numbering_value (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    measure_numbering_value (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    measure_numbering_value (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    measure_numbering_value (const measure_numbering_value& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual measure_numbering_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    measure_numbering_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_measure_numbering_value_convert ();
    }

    protected:
    value
    _xsd_measure_numbering_value_convert () const;

    public:
    static const char* const _xsd_measure_numbering_value_literals_[3];
    static const value _xsd_measure_numbering_value_indexes_[3];
  };

  class membrane_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      bass_drum,
      bass_drum_on_side,
      bongos,
      Chinese_tomtom,
      conga_drum,
      cuica,
      goblet_drum,
      Indo_American_tomtom,
      Japanese_tomtom,
      military_drum,
      snare_drum,
      snare_drum_snares_off,
      tabla,
      tambourine,
      tenor_drum,
      timbales,
      tomtom
    };

    membrane_value (value v);

    membrane_value (const char* v);

    membrane_value (const ::std::string& v);

    membrane_value (const ::xml_schema::string& v);

    membrane_value (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    membrane_value (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    membrane_value (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    membrane_value (const membrane_value& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual membrane_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    membrane_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_membrane_value_convert ();
    }

    protected:
    value
    _xsd_membrane_value_convert () const;

    public:
    static const char* const _xsd_membrane_value_literals_[17];
    static const value _xsd_membrane_value_indexes_[17];
  };

  class metal_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      agogo,
      almglocken,
      bell,
      bell_plate,
      bell_tree,
      brake_drum,
      cencerro,
      chain_rattle,
      Chinese_cymbal,
      cowbell,
      crash_cymbals,
      crotale,
      cymbal_tongs,
      domed_gong,
      finger_cymbals,
      flexatone,
      gong,
      hi_hat,
      high_hat_cymbals,
      handbell,
      jaw_harp,
      jingle_bells,
      musical_saw,
      shell_bells,
      sistrum,
      sizzle_cymbal,
      sleigh_bells,
      suspended_cymbal,
      tam_tam,
      tam_tam_with_beater,
      triangle,
      Vietnamese_hat
    };

    metal_value (value v);

    metal_value (const char* v);

    metal_value (const ::std::string& v);

    metal_value (const ::xml_schema::string& v);

    metal_value (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    metal_value (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    metal_value (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    metal_value (const metal_value& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual metal_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    metal_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_metal_value_convert ();
    }

    protected:
    value
    _xsd_metal_value_convert () const;

    public:
    static const char* const _xsd_metal_value_literals_[32];
    static const value _xsd_metal_value_indexes_[32];
  };

  class milliseconds: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    milliseconds (const ::xml_schema::non_negative_integer&);

    milliseconds (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    milliseconds (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    milliseconds (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    milliseconds (const milliseconds& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual milliseconds*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~milliseconds ();
  };

  class numeral_mode: public ::xml_schema::string
  {
    public:
    enum value
    {
      major,
      minor,
      natural_minor,
      melodic_minor,
      harmonic_minor
    };

    numeral_mode (value v);

    numeral_mode (const char* v);

    numeral_mode (const ::std::string& v);

    numeral_mode (const ::xml_schema::string& v);

    numeral_mode (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    numeral_mode (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    numeral_mode (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    numeral_mode (const numeral_mode& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual numeral_mode*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    numeral_mode&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_numeral_mode_convert ();
    }

    protected:
    value
    _xsd_numeral_mode_convert () const;

    public:
    static const char* const _xsd_numeral_mode_literals_[5];
    static const value _xsd_numeral_mode_indexes_[5];
  };

  class on_off: public ::xml_schema::token
  {
    public:
    enum value
    {
      on,
      off
    };

    on_off (value v);

    on_off (const char* v);

    on_off (const ::std::string& v);

    on_off (const ::xml_schema::token& v);

    on_off (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    on_off (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    on_off (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    on_off (const on_off& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual on_off*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    on_off&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_on_off_convert ();
    }

    protected:
    value
    _xsd_on_off_convert () const;

    public:
    static const char* const _xsd_on_off_literals_[2];
    static const value _xsd_on_off_indexes_[2];
  };

  class pedal_type: public ::xml_schema::token
  {
    public:
    enum value
    {
      start,
      stop,
      sostenuto,
      change,
      continue_,
      discontinue,
      resume
    };

    pedal_type (value v);

    pedal_type (const char* v);

    pedal_type (const ::std::string& v);

    pedal_type (const ::xml_schema::token& v);

    pedal_type (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    pedal_type (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    pedal_type (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    pedal_type (const pedal_type& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual pedal_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    pedal_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_pedal_type_convert ();
    }

    protected:
    value
    _xsd_pedal_type_convert () const;

    public:
    static const char* const _xsd_pedal_type_literals_[7];
    static const value _xsd_pedal_type_indexes_[7];
  };

  class pitched_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      celesta,
      chimes,
      glockenspiel,
      lithophone,
      mallet,
      marimba,
      steel_drums,
      tubaphone,
      tubular_chimes,
      vibraphone,
      xylophone
    };

    pitched_value (value v);

    pitched_value (const char* v);

    pitched_value (const ::std::string& v);

    pitched_value (const ::xml_schema::string& v);

    pitched_value (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    pitched_value (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    pitched_value (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    pitched_value (const pitched_value& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual pitched_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    pitched_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_pitched_value_convert ();
    }

    protected:
    value
    _xsd_pitched_value_convert () const;

    public:
    static const char* const _xsd_pitched_value_literals_[11];
    static const value _xsd_pitched_value_indexes_[11];
  };

  class principal_voice_symbol: public ::xml_schema::string
  {
    public:
    enum value
    {
      Hauptstimme,
      Nebenstimme,
      plain,
      none
    };

    principal_voice_symbol (value v);

    principal_voice_symbol (const char* v);

    principal_voice_symbol (const ::std::string& v);

    principal_voice_symbol (const ::xml_schema::string& v);

    principal_voice_symbol (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    principal_voice_symbol (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    principal_voice_symbol (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    principal_voice_symbol (const principal_voice_symbol& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual principal_voice_symbol*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    principal_voice_symbol&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_principal_voice_symbol_convert ();
    }

    protected:
    value
    _xsd_principal_voice_symbol_convert () const;

    public:
    static const char* const _xsd_principal_voice_symbol_literals_[4];
    static const value _xsd_principal_voice_symbol_indexes_[4];
  };

  class staff_divide_symbol: public ::xml_schema::token
  {
    public:
    enum value
    {
      down,
      up,
      up_down
    };

    staff_divide_symbol (value v);

    staff_divide_symbol (const char* v);

    staff_divide_symbol (const ::std::string& v);

    staff_divide_symbol (const ::xml_schema::token& v);

    staff_divide_symbol (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    staff_divide_symbol (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    staff_divide_symbol (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    staff_divide_symbol (const staff_divide_symbol& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual staff_divide_symbol*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    staff_divide_symbol&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_staff_divide_symbol_convert ();
    }

    protected:
    value
    _xsd_staff_divide_symbol_convert () const;

    public:
    static const char* const _xsd_staff_divide_symbol_literals_[3];
    static const value _xsd_staff_divide_symbol_indexes_[3];
  };

  class start_stop_change_continue: public ::xml_schema::token
  {
    public:
    enum value
    {
      start,
      stop,
      change,
      continue_
    };

    start_stop_change_continue (value v);

    start_stop_change_continue (const char* v);

    start_stop_change_continue (const ::std::string& v);

    start_stop_change_continue (const ::xml_schema::token& v);

    start_stop_change_continue (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    start_stop_change_continue (const ::xercesc::DOMAttr& a,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    start_stop_change_continue (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    start_stop_change_continue (const start_stop_change_continue& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    virtual start_stop_change_continue*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    start_stop_change_continue&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_start_stop_change_continue_convert ();
    }

    protected:
    value
    _xsd_start_stop_change_continue_convert () const;

    public:
    static const char* const _xsd_start_stop_change_continue_literals_[4];
    static const value _xsd_start_stop_change_continue_indexes_[4];
  };

  class sync_type: public ::xml_schema::token
  {
    public:
    enum value
    {
      none,
      tempo,
      mostly_tempo,
      mostly_event,
      event,
      always_event
    };

    sync_type (value v);

    sync_type (const char* v);

    sync_type (const ::std::string& v);

    sync_type (const ::xml_schema::token& v);

    sync_type (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    sync_type (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    sync_type (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    sync_type (const sync_type& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual sync_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    sync_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_sync_type_convert ();
    }

    protected:
    value
    _xsd_sync_type_convert () const;

    public:
    static const char* const _xsd_sync_type_literals_[6];
    static const value _xsd_sync_type_indexes_[6];
  };

  class system_relation_number: public ::xml_schema::string
  {
    public:
    enum value
    {
      only_top,
      only_bottom,
      also_top,
      also_bottom,
      none
    };

    system_relation_number (value v);

    system_relation_number (const char* v);

    system_relation_number (const ::std::string& v);

    system_relation_number (const ::xml_schema::string& v);

    system_relation_number (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    system_relation_number (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    system_relation_number (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    system_relation_number (const system_relation_number& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual system_relation_number*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    system_relation_number&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_system_relation_number_convert ();
    }

    protected:
    value
    _xsd_system_relation_number_convert () const;

    public:
    static const char* const _xsd_system_relation_number_literals_[5];
    static const value _xsd_system_relation_number_indexes_[5];
  };

  class system_relation: public ::musicxml::system_relation_number
  {
    public:
    typedef ::musicxml::system_relation_number::value value;

    system_relation (value v);

    system_relation (const char* v);

    system_relation (const ::std::string& v);

    system_relation (const ::musicxml::system_relation_number& v);

    system_relation (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    system_relation (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    system_relation (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    system_relation (const system_relation& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual system_relation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    system_relation&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_system_relation_convert ();
    }

    protected:
    value
    _xsd_system_relation_convert () const;

    public:
    static const char* const* _xsd_system_relation_literals_;
    static const value _xsd_system_relation_indexes_[3];
  };

  class tip_direction: public ::xml_schema::string
  {
    public:
    enum value
    {
      up,
      down,
      left,
      right,
      northwest,
      northeast,
      southeast,
      southwest
    };

    tip_direction (value v);

    tip_direction (const char* v);

    tip_direction (const ::std::string& v);

    tip_direction (const ::xml_schema::string& v);

    tip_direction (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    tip_direction (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    tip_direction (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    tip_direction (const tip_direction& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual tip_direction*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tip_direction&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tip_direction_convert ();
    }

    protected:
    value
    _xsd_tip_direction_convert () const;

    public:
    static const char* const _xsd_tip_direction_literals_[8];
    static const value _xsd_tip_direction_indexes_[8];
  };

  class stick_location: public ::xml_schema::string
  {
    public:
    enum value
    {
      center,
      rim,
      cymbal_bell,
      cymbal_edge
    };

    stick_location (value v);

    stick_location (const char* v);

    stick_location (const ::std::string& v);

    stick_location (const ::xml_schema::string& v);

    stick_location (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    stick_location (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    stick_location (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    stick_location (const stick_location& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual stick_location*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    stick_location&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_stick_location_convert ();
    }

    protected:
    value
    _xsd_stick_location_convert () const;

    public:
    static const char* const _xsd_stick_location_literals_[4];
    static const value _xsd_stick_location_indexes_[4];
  };

  class stick_material: public ::xml_schema::string
  {
    public:
    enum value
    {
      soft,
      medium,
      hard,
      shaded,
      x
    };

    stick_material (value v);

    stick_material (const char* v);

    stick_material (const ::std::string& v);

    stick_material (const ::xml_schema::string& v);

    stick_material (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    stick_material (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    stick_material (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    stick_material (const stick_material& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual stick_material*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    stick_material&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_stick_material_convert ();
    }

    protected:
    value
    _xsd_stick_material_convert () const;

    public:
    static const char* const _xsd_stick_material_literals_[5];
    static const value _xsd_stick_material_indexes_[5];
  };

  class stick_type: public ::xml_schema::string
  {
    public:
    enum value
    {
      bass_drum,
      double_bass_drum,
      glockenspiel,
      gum,
      hammer,
      superball,
      timpani,
      wound,
      xylophone,
      yarn
    };

    stick_type (value v);

    stick_type (const char* v);

    stick_type (const ::std::string& v);

    stick_type (const ::xml_schema::string& v);

    stick_type (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    stick_type (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    stick_type (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    stick_type (const stick_type& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual stick_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    stick_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_stick_type_convert ();
    }

    protected:
    value
    _xsd_stick_type_convert () const;

    public:
    static const char* const _xsd_stick_type_literals_[10];
    static const value _xsd_stick_type_indexes_[10];
  };

  class up_down_stop_continue: public ::xml_schema::token
  {
    public:
    enum value
    {
      up,
      down,
      stop,
      continue_
    };

    up_down_stop_continue (value v);

    up_down_stop_continue (const char* v);

    up_down_stop_continue (const ::std::string& v);

    up_down_stop_continue (const ::xml_schema::token& v);

    up_down_stop_continue (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    up_down_stop_continue (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    up_down_stop_continue (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    up_down_stop_continue (const up_down_stop_continue& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual up_down_stop_continue*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    up_down_stop_continue&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_up_down_stop_continue_convert ();
    }

    protected:
    value
    _xsd_up_down_stop_continue_convert () const;

    public:
    static const char* const _xsd_up_down_stop_continue_literals_[4];
    static const value _xsd_up_down_stop_continue_indexes_[4];
  };

  class wedge_type: public ::xml_schema::token
  {
    public:
    enum value
    {
      crescendo,
      diminuendo,
      stop,
      continue_
    };

    wedge_type (value v);

    wedge_type (const char* v);

    wedge_type (const ::std::string& v);

    wedge_type (const ::xml_schema::token& v);

    wedge_type (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    wedge_type (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    wedge_type (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    wedge_type (const wedge_type& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual wedge_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    wedge_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_wedge_type_convert ();
    }

    protected:
    value
    _xsd_wedge_type_convert () const;

    public:
    static const char* const _xsd_wedge_type_literals_[4];
    static const value _xsd_wedge_type_indexes_[4];
  };

  class wood_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      bamboo_scraper,
      board_clapper,
      cabasa,
      castanets,
      castanets_with_handle,
      claves,
      football_rattle,
      guiro,
      log_drum,
      maraca,
      maracas,
      quijada,
      rainstick,
      ratchet,
      reco_reco,
      sandpaper_blocks,
      slit_drum,
      temple_block,
      vibraslap,
      whip,
      wood_block
    };

    wood_value (value v);

    wood_value (const char* v);

    wood_value (const ::std::string& v);

    wood_value (const ::xml_schema::string& v);

    wood_value (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    wood_value (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    wood_value (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    wood_value (const wood_value& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual wood_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    wood_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_wood_value_convert ();
    }

    protected:
    value
    _xsd_wood_value_convert () const;

    public:
    static const char* const _xsd_wood_value_literals_[21];
    static const value _xsd_wood_value_indexes_[21];
  };

  class distance_type: public ::xml_schema::token
  {
    public:
    // Constructors.
    //
    distance_type ();

    distance_type (const char*);

    distance_type (const ::std::string&);

    distance_type (const ::xml_schema::token&);

    distance_type (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    distance_type (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    distance_type (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    distance_type (const distance_type& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual distance_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~distance_type ();
  };

  class glyph_type: public ::xml_schema::token
  {
    public:
    // Constructors.
    //
    glyph_type ();

    glyph_type (const char*);

    glyph_type (const ::std::string&);

    glyph_type (const ::xml_schema::token&);

    glyph_type (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    glyph_type (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    glyph_type (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    glyph_type (const glyph_type& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual glyph_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~glyph_type ();
  };

  class line_width_type: public ::xml_schema::token
  {
    public:
    // Constructors.
    //
    line_width_type ();

    line_width_type (const char*);

    line_width_type (const ::std::string&);

    line_width_type (const ::xml_schema::token&);

    line_width_type (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    line_width_type (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    line_width_type (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    line_width_type (const line_width_type& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual line_width_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~line_width_type ();
  };

  class margin_type: public ::xml_schema::token
  {
    public:
    enum value
    {
      odd,
      even,
      both
    };

    margin_type (value v);

    margin_type (const char* v);

    margin_type (const ::std::string& v);

    margin_type (const ::xml_schema::token& v);

    margin_type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    margin_type (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    margin_type (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    margin_type (const margin_type& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual margin_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    margin_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_margin_type_convert ();
    }

    protected:
    value
    _xsd_margin_type_convert () const;

    public:
    static const char* const _xsd_margin_type_literals_[3];
    static const value _xsd_margin_type_indexes_[3];
  };

  class millimeters: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    millimeters (const ::xml_schema::decimal&);

    millimeters (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    millimeters (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    millimeters (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    millimeters (const millimeters& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual millimeters*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~millimeters ();
  };

  class note_size_type: public ::xml_schema::token
  {
    public:
    enum value
    {
      cue,
      grace,
      grace_cue,
      large
    };

    note_size_type (value v);

    note_size_type (const char* v);

    note_size_type (const ::std::string& v);

    note_size_type (const ::xml_schema::token& v);

    note_size_type (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    note_size_type (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    note_size_type (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    note_size_type (const note_size_type& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual note_size_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    note_size_type&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_note_size_type_convert ();
    }

    protected:
    value
    _xsd_note_size_type_convert () const;

    public:
    static const char* const _xsd_note_size_type_literals_[4];
    static const value _xsd_note_size_type_indexes_[4];
  };

  class accidental_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      sharp,
      natural,
      flat,
      double_sharp,
      sharp_sharp,
      flat_flat,
      natural_sharp,
      natural_flat,
      quarter_flat,
      quarter_sharp,
      three_quarters_flat,
      three_quarters_sharp,
      sharp_down,
      sharp_up,
      natural_down,
      natural_up,
      flat_down,
      flat_up,
      double_sharp_down,
      double_sharp_up,
      flat_flat_down,
      flat_flat_up,
      arrow_down,
      arrow_up,
      triple_sharp,
      triple_flat,
      slash_quarter_sharp,
      slash_sharp,
      slash_flat,
      double_slash_flat,
      sharp_1,
      sharp_2,
      sharp_3,
      sharp_5,
      flat_1,
      flat_2,
      flat_3,
      flat_4,
      sori,
      koron,
      other
    };

    accidental_value (value v);

    accidental_value (const char* v);

    accidental_value (const ::std::string& v);

    accidental_value (const ::xml_schema::string& v);

    accidental_value (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    accidental_value (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    accidental_value (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    accidental_value (const accidental_value& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual accidental_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    accidental_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_accidental_value_convert ();
    }

    protected:
    value
    _xsd_accidental_value_convert () const;

    public:
    static const char* const _xsd_accidental_value_literals_[41];
    static const value _xsd_accidental_value_indexes_[41];
  };

  class arrow_direction: public ::xml_schema::string
  {
    public:
    enum value
    {
      left,
      up,
      right,
      down,
      northwest,
      northeast,
      southeast,
      southwest,
      left_right,
      up_down,
      northwest_southeast,
      northeast_southwest,
      other
    };

    arrow_direction (value v);

    arrow_direction (const char* v);

    arrow_direction (const ::std::string& v);

    arrow_direction (const ::xml_schema::string& v);

    arrow_direction (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    arrow_direction (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    arrow_direction (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    arrow_direction (const arrow_direction& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual arrow_direction*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    arrow_direction&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_arrow_direction_convert ();
    }

    protected:
    value
    _xsd_arrow_direction_convert () const;

    public:
    static const char* const _xsd_arrow_direction_literals_[13];
    static const value _xsd_arrow_direction_indexes_[13];
  };

  class arrow_style: public ::xml_schema::string
  {
    public:
    enum value
    {
      single,
      double_,
      filled,
      hollow,
      paired,
      combined,
      other
    };

    arrow_style (value v);

    arrow_style (const char* v);

    arrow_style (const ::std::string& v);

    arrow_style (const ::xml_schema::string& v);

    arrow_style (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    arrow_style (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    arrow_style (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    arrow_style (const arrow_style& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual arrow_style*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    arrow_style&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_arrow_style_convert ();
    }

    protected:
    value
    _xsd_arrow_style_convert () const;

    public:
    static const char* const _xsd_arrow_style_literals_[7];
    static const value _xsd_arrow_style_indexes_[7];
  };

  class beam_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      begin,
      continue_,
      end,
      forward_hook,
      backward_hook
    };

    beam_value (value v);

    beam_value (const char* v);

    beam_value (const ::std::string& v);

    beam_value (const ::xml_schema::string& v);

    beam_value (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    beam_value (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    beam_value (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    beam_value (const beam_value& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual beam_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    beam_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_beam_value_convert ();
    }

    protected:
    value
    _xsd_beam_value_convert () const;

    public:
    static const char* const _xsd_beam_value_literals_[5];
    static const value _xsd_beam_value_indexes_[5];
  };

  class bend_shape: public ::xml_schema::string
  {
    public:
    enum value
    {
      angled,
      curved
    };

    bend_shape (value v);

    bend_shape (const char* v);

    bend_shape (const ::std::string& v);

    bend_shape (const ::xml_schema::string& v);

    bend_shape (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    bend_shape (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    bend_shape (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    bend_shape (const bend_shape& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual bend_shape*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    bend_shape&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_bend_shape_convert ();
    }

    protected:
    value
    _xsd_bend_shape_convert () const;

    public:
    static const char* const _xsd_bend_shape_literals_[2];
    static const value _xsd_bend_shape_indexes_[2];
  };

  class breath_mark_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      empty,
      comma,
      tick,
      upbow,
      salzedo
    };

    breath_mark_value (value v);

    breath_mark_value (const char* v);

    breath_mark_value (const ::std::string& v);

    breath_mark_value (const ::xml_schema::string& v);

    breath_mark_value (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    breath_mark_value (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    breath_mark_value (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    breath_mark_value (const breath_mark_value& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual breath_mark_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    breath_mark_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_breath_mark_value_convert ();
    }

    protected:
    value
    _xsd_breath_mark_value_convert () const;

    public:
    static const char* const _xsd_breath_mark_value_literals_[5];
    static const value _xsd_breath_mark_value_indexes_[5];
  };

  class caesura_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      normal,
      thick,
      short_,
      curved,
      single,
      empty
    };

    caesura_value (value v);

    caesura_value (const char* v);

    caesura_value (const ::std::string& v);

    caesura_value (const ::xml_schema::string& v);

    caesura_value (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    caesura_value (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    caesura_value (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    caesura_value (const caesura_value& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual caesura_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    caesura_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_caesura_value_convert ();
    }

    protected:
    value
    _xsd_caesura_value_convert () const;

    public:
    static const char* const _xsd_caesura_value_literals_[6];
    static const value _xsd_caesura_value_indexes_[6];
  };

  class circular_arrow: public ::xml_schema::string
  {
    public:
    enum value
    {
      clockwise,
      anticlockwise
    };

    circular_arrow (value v);

    circular_arrow (const char* v);

    circular_arrow (const ::std::string& v);

    circular_arrow (const ::xml_schema::string& v);

    circular_arrow (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    circular_arrow (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    circular_arrow (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    circular_arrow (const circular_arrow& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual circular_arrow*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    circular_arrow&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_circular_arrow_convert ();
    }

    protected:
    value
    _xsd_circular_arrow_convert () const;

    public:
    static const char* const _xsd_circular_arrow_literals_[2];
    static const value _xsd_circular_arrow_indexes_[2];
  };

  class fan: public ::xml_schema::token
  {
    public:
    enum value
    {
      accel,
      rit,
      none
    };

    fan (value v);

    fan (const char* v);

    fan (const ::std::string& v);

    fan (const ::xml_schema::token& v);

    fan (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    fan (const ::xercesc::DOMAttr& a,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    fan (const ::std::string& s,
         const ::xercesc::DOMElement* e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    fan (const fan& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual fan*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    fan&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_fan_convert ();
    }

    protected:
    value
    _xsd_fan_convert () const;

    public:
    static const char* const _xsd_fan_literals_[3];
    static const value _xsd_fan_indexes_[3];
  };

  class handbell_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      belltree,
      damp,
      echo,
      gyro,
      hand_martellato,
      mallet_lift,
      mallet_table,
      martellato,
      martellato_lift,
      muted_martellato,
      pluck_lift,
      swing
    };

    handbell_value (value v);

    handbell_value (const char* v);

    handbell_value (const ::std::string& v);

    handbell_value (const ::xml_schema::string& v);

    handbell_value (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    handbell_value (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    handbell_value (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    handbell_value (const handbell_value& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual handbell_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    handbell_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_handbell_value_convert ();
    }

    protected:
    value
    _xsd_handbell_value_convert () const;

    public:
    static const char* const _xsd_handbell_value_literals_[12];
    static const value _xsd_handbell_value_indexes_[12];
  };

  class harmon_closed_location: public ::xml_schema::string
  {
    public:
    enum value
    {
      right,
      bottom,
      left,
      top
    };

    harmon_closed_location (value v);

    harmon_closed_location (const char* v);

    harmon_closed_location (const ::std::string& v);

    harmon_closed_location (const ::xml_schema::string& v);

    harmon_closed_location (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    harmon_closed_location (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    harmon_closed_location (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    harmon_closed_location (const harmon_closed_location& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual harmon_closed_location*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    harmon_closed_location&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_harmon_closed_location_convert ();
    }

    protected:
    value
    _xsd_harmon_closed_location_convert () const;

    public:
    static const char* const _xsd_harmon_closed_location_literals_[4];
    static const value _xsd_harmon_closed_location_indexes_[4];
  };

  class harmon_closed_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      yes,
      no,
      half
    };

    harmon_closed_value (value v);

    harmon_closed_value (const char* v);

    harmon_closed_value (const ::std::string& v);

    harmon_closed_value (const ::xml_schema::string& v);

    harmon_closed_value (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    harmon_closed_value (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    harmon_closed_value (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    harmon_closed_value (const harmon_closed_value& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual harmon_closed_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    harmon_closed_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_harmon_closed_value_convert ();
    }

    protected:
    value
    _xsd_harmon_closed_value_convert () const;

    public:
    static const char* const _xsd_harmon_closed_value_literals_[3];
    static const value _xsd_harmon_closed_value_indexes_[3];
  };

  class hole_closed_location: public ::xml_schema::string
  {
    public:
    enum value
    {
      right,
      bottom,
      left,
      top
    };

    hole_closed_location (value v);

    hole_closed_location (const char* v);

    hole_closed_location (const ::std::string& v);

    hole_closed_location (const ::xml_schema::string& v);

    hole_closed_location (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    hole_closed_location (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    hole_closed_location (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    hole_closed_location (const hole_closed_location& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual hole_closed_location*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    hole_closed_location&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_hole_closed_location_convert ();
    }

    protected:
    value
    _xsd_hole_closed_location_convert () const;

    public:
    static const char* const _xsd_hole_closed_location_literals_[4];
    static const value _xsd_hole_closed_location_indexes_[4];
  };

  class hole_closed_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      yes,
      no,
      half
    };

    hole_closed_value (value v);

    hole_closed_value (const char* v);

    hole_closed_value (const ::std::string& v);

    hole_closed_value (const ::xml_schema::string& v);

    hole_closed_value (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    hole_closed_value (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    hole_closed_value (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    hole_closed_value (const hole_closed_value& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual hole_closed_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    hole_closed_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_hole_closed_value_convert ();
    }

    protected:
    value
    _xsd_hole_closed_value_convert () const;

    public:
    static const char* const _xsd_hole_closed_value_literals_[3];
    static const value _xsd_hole_closed_value_indexes_[3];
  };

  class note_type_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      cxx_1024th,
      cxx_512th,
      cxx_256th,
      cxx_128th,
      cxx_64th,
      cxx_32nd,
      cxx_16th,
      eighth,
      quarter,
      half,
      whole,
      breve,
      long_,
      maxima
    };

    note_type_value (value v);

    note_type_value (const char* v);

    note_type_value (const ::std::string& v);

    note_type_value (const ::xml_schema::string& v);

    note_type_value (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    note_type_value (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    note_type_value (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    note_type_value (const note_type_value& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual note_type_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    note_type_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_note_type_value_convert ();
    }

    protected:
    value
    _xsd_note_type_value_convert () const;

    public:
    static const char* const _xsd_note_type_value_literals_[14];
    static const value _xsd_note_type_value_indexes_[14];
  };

  class notehead_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      slash,
      triangle,
      diamond,
      square,
      cross,
      x,
      circle_x,
      inverted_triangle,
      arrow_down,
      arrow_up,
      circled,
      slashed,
      back_slashed,
      normal,
      cluster,
      circle_dot,
      left_triangle,
      rectangle,
      none,
      do_,
      re,
      mi,
      fa,
      fa_up,
      so,
      la,
      ti,
      other
    };

    notehead_value (value v);

    notehead_value (const char* v);

    notehead_value (const ::std::string& v);

    notehead_value (const ::xml_schema::string& v);

    notehead_value (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    notehead_value (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    notehead_value (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    notehead_value (const notehead_value& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual notehead_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    notehead_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_notehead_value_convert ();
    }

    protected:
    value
    _xsd_notehead_value_convert () const;

    public:
    static const char* const _xsd_notehead_value_literals_[28];
    static const value _xsd_notehead_value_indexes_[28];
  };

  class octave: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    octave (const ::xml_schema::integer&);

    octave (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    octave (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    octave (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    octave (const octave& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual octave*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~octave ();
  };

  class semitones: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::decimal, char, ::xml_schema::simple_type, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    // Constructors.
    //
    semitones (const ::xml_schema::decimal&);

    semitones (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    semitones (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    semitones (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    semitones (const semitones& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual semitones*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~semitones ();
  };

  class show_tuplet: public ::xml_schema::token
  {
    public:
    enum value
    {
      actual,
      both,
      none
    };

    show_tuplet (value v);

    show_tuplet (const char* v);

    show_tuplet (const ::std::string& v);

    show_tuplet (const ::xml_schema::token& v);

    show_tuplet (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    show_tuplet (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    show_tuplet (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    show_tuplet (const show_tuplet& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual show_tuplet*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    show_tuplet&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_show_tuplet_convert ();
    }

    protected:
    value
    _xsd_show_tuplet_convert () const;

    public:
    static const char* const _xsd_show_tuplet_literals_[3];
    static const value _xsd_show_tuplet_indexes_[3];
  };

  class stem_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      down,
      up,
      double_,
      none
    };

    stem_value (value v);

    stem_value (const char* v);

    stem_value (const ::std::string& v);

    stem_value (const ::xml_schema::string& v);

    stem_value (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    stem_value (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    stem_value (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    stem_value (const stem_value& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual stem_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    stem_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_stem_value_convert ();
    }

    protected:
    value
    _xsd_stem_value_convert () const;

    public:
    static const char* const _xsd_stem_value_literals_[4];
    static const value _xsd_stem_value_indexes_[4];
  };

  class step: public ::xml_schema::string
  {
    public:
    enum value
    {
      A,
      B,
      C,
      D,
      E,
      F,
      G
    };

    step (value v);

    step (const char* v);

    step (const ::std::string& v);

    step (const ::xml_schema::string& v);

    step (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    step (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    step (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    step (const step& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual step*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    step&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_step_convert ();
    }

    protected:
    value
    _xsd_step_convert () const;

    public:
    static const char* const _xsd_step_literals_[7];
    static const value _xsd_step_indexes_[7];
  };

  class syllabic: public ::xml_schema::string
  {
    public:
    enum value
    {
      single,
      begin,
      end,
      middle
    };

    syllabic (value v);

    syllabic (const char* v);

    syllabic (const ::std::string& v);

    syllabic (const ::xml_schema::string& v);

    syllabic (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    syllabic (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    syllabic (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    syllabic (const syllabic& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual syllabic*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    syllabic&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_syllabic_convert ();
    }

    protected:
    value
    _xsd_syllabic_convert () const;

    public:
    static const char* const _xsd_syllabic_literals_[4];
    static const value _xsd_syllabic_indexes_[4];
  };

  class tap_hand: public ::xml_schema::string
  {
    public:
    enum value
    {
      left,
      right
    };

    tap_hand (value v);

    tap_hand (const char* v);

    tap_hand (const ::std::string& v);

    tap_hand (const ::xml_schema::string& v);

    tap_hand (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    tap_hand (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    tap_hand (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    tap_hand (const tap_hand& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual tap_hand*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tap_hand&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_tap_hand_convert ();
    }

    protected:
    value
    _xsd_tap_hand_convert () const;

    public:
    static const char* const _xsd_tap_hand_literals_[2];
    static const value _xsd_tap_hand_indexes_[2];
  };

  class tremolo_marks: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    tremolo_marks (const ::xml_schema::integer&);

    tremolo_marks (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    tremolo_marks (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    tremolo_marks (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    tremolo_marks (const tremolo_marks& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual tremolo_marks*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~tremolo_marks ();
  };

  class group_barline_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      yes,
      no,
      Mensurstrich
    };

    group_barline_value (value v);

    group_barline_value (const char* v);

    group_barline_value (const ::std::string& v);

    group_barline_value (const ::xml_schema::string& v);

    group_barline_value (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    group_barline_value (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    group_barline_value (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    group_barline_value (const group_barline_value& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual group_barline_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    group_barline_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_group_barline_value_convert ();
    }

    protected:
    value
    _xsd_group_barline_value_convert () const;

    public:
    static const char* const _xsd_group_barline_value_literals_[3];
    static const value _xsd_group_barline_value_indexes_[3];
  };

  class group_symbol_value: public ::xml_schema::string
  {
    public:
    enum value
    {
      none,
      brace,
      line,
      bracket,
      square
    };

    group_symbol_value (value v);

    group_symbol_value (const char* v);

    group_symbol_value (const ::std::string& v);

    group_symbol_value (const ::xml_schema::string& v);

    group_symbol_value (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    group_symbol_value (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    group_symbol_value (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    group_symbol_value (const group_symbol_value& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual group_symbol_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    group_symbol_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_group_symbol_value_convert ();
    }

    protected:
    value
    _xsd_group_symbol_value_convert () const;

    public:
    static const char* const _xsd_group_symbol_value_literals_[5];
    static const value _xsd_group_symbol_value_indexes_[5];
  };

  class measure_text: public ::xml_schema::token
  {
    public:
    // Constructors.
    //
    measure_text ();

    measure_text (const char*);

    measure_text (const ::std::string&);

    measure_text (const ::xml_schema::token&);

    measure_text (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    measure_text (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    measure_text (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    measure_text (const measure_text& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual measure_text*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~measure_text ();
  };

  class swing_type_value: public ::musicxml::note_type_value
  {
    public:
    typedef ::musicxml::note_type_value::value value;

    swing_type_value (value v);

    swing_type_value (const char* v);

    swing_type_value (const ::std::string& v);

    swing_type_value (const ::musicxml::note_type_value& v);

    swing_type_value (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    swing_type_value (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    swing_type_value (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    swing_type_value (const swing_type_value& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual swing_type_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    swing_type_value&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_swing_type_value_convert ();
    }

    protected:
    value
    _xsd_swing_type_value_convert () const;

    public:
    static const char* const* _xsd_swing_type_value_literals_;
    static const value _xsd_swing_type_value_indexes_[2];
  };

  class accidental_text: public ::musicxml::accidental_value
  {
    public:
    // justify
    //
    typedef ::musicxml::left_center_right justify_type;
    typedef ::xsd::cxx::tree::optional< justify_type > justify_optional;
    typedef ::xsd::cxx::tree::traits< justify_type, char > justify_traits;

    const justify_optional&
    justify () const;

    justify_optional&
    justify ();

    void
    justify (const justify_type& x);

    void
    justify (const justify_optional& x);

    void
    justify (::std::unique_ptr< justify_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // underline
    //
    typedef ::musicxml::number_of_lines underline_type;
    typedef ::xsd::cxx::tree::optional< underline_type > underline_optional;
    typedef ::xsd::cxx::tree::traits< underline_type, char > underline_traits;

    const underline_optional&
    underline () const;

    underline_optional&
    underline ();

    void
    underline (const underline_type& x);

    void
    underline (const underline_optional& x);

    void
    underline (::std::unique_ptr< underline_type > p);

    // overline
    //
    typedef ::musicxml::number_of_lines overline_type;
    typedef ::xsd::cxx::tree::optional< overline_type > overline_optional;
    typedef ::xsd::cxx::tree::traits< overline_type, char > overline_traits;

    const overline_optional&
    overline () const;

    overline_optional&
    overline ();

    void
    overline (const overline_type& x);

    void
    overline (const overline_optional& x);

    void
    overline (::std::unique_ptr< overline_type > p);

    // line-through
    //
    typedef ::musicxml::number_of_lines line_through_type;
    typedef ::xsd::cxx::tree::optional< line_through_type > line_through_optional;
    typedef ::xsd::cxx::tree::traits< line_through_type, char > line_through_traits;

    const line_through_optional&
    line_through () const;

    line_through_optional&
    line_through ();

    void
    line_through (const line_through_type& x);

    void
    line_through (const line_through_optional& x);

    void
    line_through (::std::unique_ptr< line_through_type > p);

    // rotation
    //
    typedef ::musicxml::rotation_degrees rotation_type;
    typedef ::xsd::cxx::tree::optional< rotation_type > rotation_optional;
    typedef ::xsd::cxx::tree::traits< rotation_type, char > rotation_traits;

    const rotation_optional&
    rotation () const;

    rotation_optional&
    rotation ();

    void
    rotation (const rotation_type& x);

    void
    rotation (const rotation_optional& x);

    void
    rotation (::std::unique_ptr< rotation_type > p);

    // letter-spacing
    //
    typedef ::musicxml::number_or_normal letter_spacing_type;
    typedef ::xsd::cxx::tree::optional< letter_spacing_type > letter_spacing_optional;
    typedef ::xsd::cxx::tree::traits< letter_spacing_type, char > letter_spacing_traits;

    const letter_spacing_optional&
    letter_spacing () const;

    letter_spacing_optional&
    letter_spacing ();

    void
    letter_spacing (const letter_spacing_type& x);

    void
    letter_spacing (const letter_spacing_optional& x);

    void
    letter_spacing (::std::unique_ptr< letter_spacing_type > p);

    // line-height
    //
    typedef ::musicxml::number_or_normal line_height_type;
    typedef ::xsd::cxx::tree::optional< line_height_type > line_height_optional;
    typedef ::xsd::cxx::tree::traits< line_height_type, char > line_height_traits;

    const line_height_optional&
    line_height () const;

    line_height_optional&
    line_height ();

    void
    line_height (const line_height_type& x);

    void
    line_height (const line_height_optional& x);

    void
    line_height (::std::unique_ptr< line_height_type > p);

    // lang
    //
    typedef ::namespace_::lang lang_type;
    typedef ::xsd::cxx::tree::optional< lang_type > lang_optional;
    typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

    const lang_optional&
    lang () const;

    lang_optional&
    lang ();

    void
    lang (const lang_type& x);

    void
    lang (const lang_optional& x);

    void
    lang (::std::unique_ptr< lang_type > p);

    // space
    //
    typedef ::namespace_::space space_type;
    typedef ::xsd::cxx::tree::optional< space_type > space_optional;
    typedef ::xsd::cxx::tree::traits< space_type, char > space_traits;

    const space_optional&
    space () const;

    space_optional&
    space ();

    void
    space (const space_type& x);

    void
    space (const space_optional& x);

    void
    space (::std::unique_ptr< space_type > p);

    // dir
    //
    typedef ::musicxml::text_direction dir_type;
    typedef ::xsd::cxx::tree::optional< dir_type > dir_optional;
    typedef ::xsd::cxx::tree::traits< dir_type, char > dir_traits;

    const dir_optional&
    dir () const;

    dir_optional&
    dir ();

    void
    dir (const dir_type& x);

    void
    dir (const dir_optional& x);

    void
    dir (::std::unique_ptr< dir_type > p);

    // enclosure
    //
    typedef ::musicxml::enclosure_shape enclosure_type;
    typedef ::xsd::cxx::tree::optional< enclosure_type > enclosure_optional;
    typedef ::xsd::cxx::tree::traits< enclosure_type, char > enclosure_traits;

    const enclosure_optional&
    enclosure () const;

    enclosure_optional&
    enclosure ();

    void
    enclosure (const enclosure_type& x);

    void
    enclosure (const enclosure_optional& x);

    void
    enclosure (::std::unique_ptr< enclosure_type > p);

    // smufl
    //
    typedef ::musicxml::smufl_accidental_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    accidental_text (::musicxml::accidental_value::value);

    accidental_text (const char*);

    accidental_text (const ::std::string&);

    accidental_text (const ::musicxml::accidental_value&);

    accidental_text (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    accidental_text (const accidental_text& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual accidental_text*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    accidental_text&
    operator= (const accidental_text& x);

    virtual 
    ~accidental_text ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    justify_optional justify_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    underline_optional underline_;
    overline_optional overline_;
    line_through_optional line_through_;
    rotation_optional rotation_;
    letter_spacing_optional letter_spacing_;
    line_height_optional line_height_;
    lang_optional lang_;
    space_optional space_;
    dir_optional dir_;
    enclosure_optional enclosure_;
    smufl_optional smufl_;
  };

  class coda: public ::xml_schema::type
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // smufl
    //
    typedef ::musicxml::smufl_coda_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    coda ();

    coda (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    coda (const coda& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual coda*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    coda&
    operator= (const coda& x);

    virtual 
    ~coda ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    id_optional id_;
    smufl_optional smufl_;
  };

  class dynamics: public ::xml_schema::type
  {
    public:
    // p
    //
    typedef ::musicxml::empty p_type;
    typedef ::xsd::cxx::tree::sequence< p_type > p_sequence;
    typedef p_sequence::iterator p_iterator;
    typedef p_sequence::const_iterator p_const_iterator;
    typedef ::xsd::cxx::tree::traits< p_type, char > p_traits;

    const p_sequence&
    p () const;

    p_sequence&
    p ();

    void
    p (const p_sequence& s);

    // pp
    //
    typedef ::musicxml::empty pp_type;
    typedef ::xsd::cxx::tree::sequence< pp_type > pp_sequence;
    typedef pp_sequence::iterator pp_iterator;
    typedef pp_sequence::const_iterator pp_const_iterator;
    typedef ::xsd::cxx::tree::traits< pp_type, char > pp_traits;

    const pp_sequence&
    pp () const;

    pp_sequence&
    pp ();

    void
    pp (const pp_sequence& s);

    // ppp
    //
    typedef ::musicxml::empty ppp_type;
    typedef ::xsd::cxx::tree::sequence< ppp_type > ppp_sequence;
    typedef ppp_sequence::iterator ppp_iterator;
    typedef ppp_sequence::const_iterator ppp_const_iterator;
    typedef ::xsd::cxx::tree::traits< ppp_type, char > ppp_traits;

    const ppp_sequence&
    ppp () const;

    ppp_sequence&
    ppp ();

    void
    ppp (const ppp_sequence& s);

    // pppp
    //
    typedef ::musicxml::empty pppp_type;
    typedef ::xsd::cxx::tree::sequence< pppp_type > pppp_sequence;
    typedef pppp_sequence::iterator pppp_iterator;
    typedef pppp_sequence::const_iterator pppp_const_iterator;
    typedef ::xsd::cxx::tree::traits< pppp_type, char > pppp_traits;

    const pppp_sequence&
    pppp () const;

    pppp_sequence&
    pppp ();

    void
    pppp (const pppp_sequence& s);

    // ppppp
    //
    typedef ::musicxml::empty ppppp_type;
    typedef ::xsd::cxx::tree::sequence< ppppp_type > ppppp_sequence;
    typedef ppppp_sequence::iterator ppppp_iterator;
    typedef ppppp_sequence::const_iterator ppppp_const_iterator;
    typedef ::xsd::cxx::tree::traits< ppppp_type, char > ppppp_traits;

    const ppppp_sequence&
    ppppp () const;

    ppppp_sequence&
    ppppp ();

    void
    ppppp (const ppppp_sequence& s);

    // pppppp
    //
    typedef ::musicxml::empty pppppp_type;
    typedef ::xsd::cxx::tree::sequence< pppppp_type > pppppp_sequence;
    typedef pppppp_sequence::iterator pppppp_iterator;
    typedef pppppp_sequence::const_iterator pppppp_const_iterator;
    typedef ::xsd::cxx::tree::traits< pppppp_type, char > pppppp_traits;

    const pppppp_sequence&
    pppppp () const;

    pppppp_sequence&
    pppppp ();

    void
    pppppp (const pppppp_sequence& s);

    // f
    //
    typedef ::musicxml::empty f_type;
    typedef ::xsd::cxx::tree::sequence< f_type > f_sequence;
    typedef f_sequence::iterator f_iterator;
    typedef f_sequence::const_iterator f_const_iterator;
    typedef ::xsd::cxx::tree::traits< f_type, char > f_traits;

    const f_sequence&
    f () const;

    f_sequence&
    f ();

    void
    f (const f_sequence& s);

    // ff
    //
    typedef ::musicxml::empty ff_type;
    typedef ::xsd::cxx::tree::sequence< ff_type > ff_sequence;
    typedef ff_sequence::iterator ff_iterator;
    typedef ff_sequence::const_iterator ff_const_iterator;
    typedef ::xsd::cxx::tree::traits< ff_type, char > ff_traits;

    const ff_sequence&
    ff () const;

    ff_sequence&
    ff ();

    void
    ff (const ff_sequence& s);

    // fff
    //
    typedef ::musicxml::empty fff_type;
    typedef ::xsd::cxx::tree::sequence< fff_type > fff_sequence;
    typedef fff_sequence::iterator fff_iterator;
    typedef fff_sequence::const_iterator fff_const_iterator;
    typedef ::xsd::cxx::tree::traits< fff_type, char > fff_traits;

    const fff_sequence&
    fff () const;

    fff_sequence&
    fff ();

    void
    fff (const fff_sequence& s);

    // ffff
    //
    typedef ::musicxml::empty ffff_type;
    typedef ::xsd::cxx::tree::sequence< ffff_type > ffff_sequence;
    typedef ffff_sequence::iterator ffff_iterator;
    typedef ffff_sequence::const_iterator ffff_const_iterator;
    typedef ::xsd::cxx::tree::traits< ffff_type, char > ffff_traits;

    const ffff_sequence&
    ffff () const;

    ffff_sequence&
    ffff ();

    void
    ffff (const ffff_sequence& s);

    // fffff
    //
    typedef ::musicxml::empty fffff_type;
    typedef ::xsd::cxx::tree::sequence< fffff_type > fffff_sequence;
    typedef fffff_sequence::iterator fffff_iterator;
    typedef fffff_sequence::const_iterator fffff_const_iterator;
    typedef ::xsd::cxx::tree::traits< fffff_type, char > fffff_traits;

    const fffff_sequence&
    fffff () const;

    fffff_sequence&
    fffff ();

    void
    fffff (const fffff_sequence& s);

    // ffffff
    //
    typedef ::musicxml::empty ffffff_type;
    typedef ::xsd::cxx::tree::sequence< ffffff_type > ffffff_sequence;
    typedef ffffff_sequence::iterator ffffff_iterator;
    typedef ffffff_sequence::const_iterator ffffff_const_iterator;
    typedef ::xsd::cxx::tree::traits< ffffff_type, char > ffffff_traits;

    const ffffff_sequence&
    ffffff () const;

    ffffff_sequence&
    ffffff ();

    void
    ffffff (const ffffff_sequence& s);

    // mp
    //
    typedef ::musicxml::empty mp_type;
    typedef ::xsd::cxx::tree::sequence< mp_type > mp_sequence;
    typedef mp_sequence::iterator mp_iterator;
    typedef mp_sequence::const_iterator mp_const_iterator;
    typedef ::xsd::cxx::tree::traits< mp_type, char > mp_traits;

    const mp_sequence&
    mp () const;

    mp_sequence&
    mp ();

    void
    mp (const mp_sequence& s);

    // mf
    //
    typedef ::musicxml::empty mf_type;
    typedef ::xsd::cxx::tree::sequence< mf_type > mf_sequence;
    typedef mf_sequence::iterator mf_iterator;
    typedef mf_sequence::const_iterator mf_const_iterator;
    typedef ::xsd::cxx::tree::traits< mf_type, char > mf_traits;

    const mf_sequence&
    mf () const;

    mf_sequence&
    mf ();

    void
    mf (const mf_sequence& s);

    // sf
    //
    typedef ::musicxml::empty sf_type;
    typedef ::xsd::cxx::tree::sequence< sf_type > sf_sequence;
    typedef sf_sequence::iterator sf_iterator;
    typedef sf_sequence::const_iterator sf_const_iterator;
    typedef ::xsd::cxx::tree::traits< sf_type, char > sf_traits;

    const sf_sequence&
    sf () const;

    sf_sequence&
    sf ();

    void
    sf (const sf_sequence& s);

    // sfp
    //
    typedef ::musicxml::empty sfp_type;
    typedef ::xsd::cxx::tree::sequence< sfp_type > sfp_sequence;
    typedef sfp_sequence::iterator sfp_iterator;
    typedef sfp_sequence::const_iterator sfp_const_iterator;
    typedef ::xsd::cxx::tree::traits< sfp_type, char > sfp_traits;

    const sfp_sequence&
    sfp () const;

    sfp_sequence&
    sfp ();

    void
    sfp (const sfp_sequence& s);

    // sfpp
    //
    typedef ::musicxml::empty sfpp_type;
    typedef ::xsd::cxx::tree::sequence< sfpp_type > sfpp_sequence;
    typedef sfpp_sequence::iterator sfpp_iterator;
    typedef sfpp_sequence::const_iterator sfpp_const_iterator;
    typedef ::xsd::cxx::tree::traits< sfpp_type, char > sfpp_traits;

    const sfpp_sequence&
    sfpp () const;

    sfpp_sequence&
    sfpp ();

    void
    sfpp (const sfpp_sequence& s);

    // fp
    //
    typedef ::musicxml::empty fp_type;
    typedef ::xsd::cxx::tree::sequence< fp_type > fp_sequence;
    typedef fp_sequence::iterator fp_iterator;
    typedef fp_sequence::const_iterator fp_const_iterator;
    typedef ::xsd::cxx::tree::traits< fp_type, char > fp_traits;

    const fp_sequence&
    fp () const;

    fp_sequence&
    fp ();

    void
    fp (const fp_sequence& s);

    // rf
    //
    typedef ::musicxml::empty rf_type;
    typedef ::xsd::cxx::tree::sequence< rf_type > rf_sequence;
    typedef rf_sequence::iterator rf_iterator;
    typedef rf_sequence::const_iterator rf_const_iterator;
    typedef ::xsd::cxx::tree::traits< rf_type, char > rf_traits;

    const rf_sequence&
    rf () const;

    rf_sequence&
    rf ();

    void
    rf (const rf_sequence& s);

    // rfz
    //
    typedef ::musicxml::empty rfz_type;
    typedef ::xsd::cxx::tree::sequence< rfz_type > rfz_sequence;
    typedef rfz_sequence::iterator rfz_iterator;
    typedef rfz_sequence::const_iterator rfz_const_iterator;
    typedef ::xsd::cxx::tree::traits< rfz_type, char > rfz_traits;

    const rfz_sequence&
    rfz () const;

    rfz_sequence&
    rfz ();

    void
    rfz (const rfz_sequence& s);

    // sfz
    //
    typedef ::musicxml::empty sfz_type;
    typedef ::xsd::cxx::tree::sequence< sfz_type > sfz_sequence;
    typedef sfz_sequence::iterator sfz_iterator;
    typedef sfz_sequence::const_iterator sfz_const_iterator;
    typedef ::xsd::cxx::tree::traits< sfz_type, char > sfz_traits;

    const sfz_sequence&
    sfz () const;

    sfz_sequence&
    sfz ();

    void
    sfz (const sfz_sequence& s);

    // sffz
    //
    typedef ::musicxml::empty sffz_type;
    typedef ::xsd::cxx::tree::sequence< sffz_type > sffz_sequence;
    typedef sffz_sequence::iterator sffz_iterator;
    typedef sffz_sequence::const_iterator sffz_const_iterator;
    typedef ::xsd::cxx::tree::traits< sffz_type, char > sffz_traits;

    const sffz_sequence&
    sffz () const;

    sffz_sequence&
    sffz ();

    void
    sffz (const sffz_sequence& s);

    // fz
    //
    typedef ::musicxml::empty fz_type;
    typedef ::xsd::cxx::tree::sequence< fz_type > fz_sequence;
    typedef fz_sequence::iterator fz_iterator;
    typedef fz_sequence::const_iterator fz_const_iterator;
    typedef ::xsd::cxx::tree::traits< fz_type, char > fz_traits;

    const fz_sequence&
    fz () const;

    fz_sequence&
    fz ();

    void
    fz (const fz_sequence& s);

    // n
    //
    typedef ::musicxml::empty n_type;
    typedef ::xsd::cxx::tree::sequence< n_type > n_sequence;
    typedef n_sequence::iterator n_iterator;
    typedef n_sequence::const_iterator n_const_iterator;
    typedef ::xsd::cxx::tree::traits< n_type, char > n_traits;

    const n_sequence&
    n () const;

    n_sequence&
    n ();

    void
    n (const n_sequence& s);

    // pf
    //
    typedef ::musicxml::empty pf_type;
    typedef ::xsd::cxx::tree::sequence< pf_type > pf_sequence;
    typedef pf_sequence::iterator pf_iterator;
    typedef pf_sequence::const_iterator pf_const_iterator;
    typedef ::xsd::cxx::tree::traits< pf_type, char > pf_traits;

    const pf_sequence&
    pf () const;

    pf_sequence&
    pf ();

    void
    pf (const pf_sequence& s);

    // sfzp
    //
    typedef ::musicxml::empty sfzp_type;
    typedef ::xsd::cxx::tree::sequence< sfzp_type > sfzp_sequence;
    typedef sfzp_sequence::iterator sfzp_iterator;
    typedef sfzp_sequence::const_iterator sfzp_const_iterator;
    typedef ::xsd::cxx::tree::traits< sfzp_type, char > sfzp_traits;

    const sfzp_sequence&
    sfzp () const;

    sfzp_sequence&
    sfzp ();

    void
    sfzp (const sfzp_sequence& s);

    // other-dynamics
    //
    typedef ::musicxml::other_text other_dynamics_type;
    typedef ::xsd::cxx::tree::sequence< other_dynamics_type > other_dynamics_sequence;
    typedef other_dynamics_sequence::iterator other_dynamics_iterator;
    typedef other_dynamics_sequence::const_iterator other_dynamics_const_iterator;
    typedef ::xsd::cxx::tree::traits< other_dynamics_type, char > other_dynamics_traits;

    const other_dynamics_sequence&
    other_dynamics () const;

    other_dynamics_sequence&
    other_dynamics ();

    void
    other_dynamics (const other_dynamics_sequence& s);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // underline
    //
    typedef ::musicxml::number_of_lines underline_type;
    typedef ::xsd::cxx::tree::optional< underline_type > underline_optional;
    typedef ::xsd::cxx::tree::traits< underline_type, char > underline_traits;

    const underline_optional&
    underline () const;

    underline_optional&
    underline ();

    void
    underline (const underline_type& x);

    void
    underline (const underline_optional& x);

    void
    underline (::std::unique_ptr< underline_type > p);

    // overline
    //
    typedef ::musicxml::number_of_lines overline_type;
    typedef ::xsd::cxx::tree::optional< overline_type > overline_optional;
    typedef ::xsd::cxx::tree::traits< overline_type, char > overline_traits;

    const overline_optional&
    overline () const;

    overline_optional&
    overline ();

    void
    overline (const overline_type& x);

    void
    overline (const overline_optional& x);

    void
    overline (::std::unique_ptr< overline_type > p);

    // line-through
    //
    typedef ::musicxml::number_of_lines line_through_type;
    typedef ::xsd::cxx::tree::optional< line_through_type > line_through_optional;
    typedef ::xsd::cxx::tree::traits< line_through_type, char > line_through_traits;

    const line_through_optional&
    line_through () const;

    line_through_optional&
    line_through ();

    void
    line_through (const line_through_type& x);

    void
    line_through (const line_through_optional& x);

    void
    line_through (::std::unique_ptr< line_through_type > p);

    // enclosure
    //
    typedef ::musicxml::enclosure_shape enclosure_type;
    typedef ::xsd::cxx::tree::optional< enclosure_type > enclosure_optional;
    typedef ::xsd::cxx::tree::traits< enclosure_type, char > enclosure_traits;

    const enclosure_optional&
    enclosure () const;

    enclosure_optional&
    enclosure ();

    void
    enclosure (const enclosure_type& x);

    void
    enclosure (const enclosure_optional& x);

    void
    enclosure (::std::unique_ptr< enclosure_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    dynamics ();

    dynamics (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    dynamics (const dynamics& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual dynamics*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    dynamics&
    operator= (const dynamics& x);

    virtual 
    ~dynamics ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    p_sequence p_;
    pp_sequence pp_;
    ppp_sequence ppp_;
    pppp_sequence pppp_;
    ppppp_sequence ppppp_;
    pppppp_sequence pppppp_;
    f_sequence f_;
    ff_sequence ff_;
    fff_sequence fff_;
    ffff_sequence ffff_;
    fffff_sequence fffff_;
    ffffff_sequence ffffff_;
    mp_sequence mp_;
    mf_sequence mf_;
    sf_sequence sf_;
    sfp_sequence sfp_;
    sfpp_sequence sfpp_;
    fp_sequence fp_;
    rf_sequence rf_;
    rfz_sequence rfz_;
    sfz_sequence sfz_;
    sffz_sequence sffz_;
    fz_sequence fz_;
    n_sequence n_;
    pf_sequence pf_;
    sfzp_sequence sfzp_;
    other_dynamics_sequence other_dynamics_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    placement_optional placement_;
    underline_optional underline_;
    overline_optional overline_;
    line_through_optional line_through_;
    enclosure_optional enclosure_;
    id_optional id_;
  };

  class empty: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    empty ();

    empty (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    empty (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    empty (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    empty (const empty& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual empty*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~empty ();
  };

  class empty_placement: public ::xml_schema::type
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // Constructors.
    //
    empty_placement ();

    empty_placement (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    empty_placement (const empty_placement& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual empty_placement*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    empty_placement&
    operator= (const empty_placement& x);

    virtual 
    ~empty_placement ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
  };

  class empty_placement_smufl: public ::xml_schema::type
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // smufl
    //
    typedef ::musicxml::smufl_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    empty_placement_smufl ();

    empty_placement_smufl (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    empty_placement_smufl (const empty_placement_smufl& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual empty_placement_smufl*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    empty_placement_smufl&
    operator= (const empty_placement_smufl& x);

    virtual 
    ~empty_placement_smufl ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
    smufl_optional smufl_;
  };

  class empty_print_style: public ::xml_schema::type
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    empty_print_style ();

    empty_print_style (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    empty_print_style (const empty_print_style& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual empty_print_style*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    empty_print_style&
    operator= (const empty_print_style& x);

    virtual 
    ~empty_print_style ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
  };

  class empty_print_style_align: public ::xml_schema::type
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // Constructors.
    //
    empty_print_style_align ();

    empty_print_style_align (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    empty_print_style_align (const empty_print_style_align& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual empty_print_style_align*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    empty_print_style_align&
    operator= (const empty_print_style_align& x);

    virtual 
    ~empty_print_style_align ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
  };

  class empty_print_style_align_id: public ::xml_schema::type
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    empty_print_style_align_id ();

    empty_print_style_align_id (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    empty_print_style_align_id (const empty_print_style_align_id& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    virtual empty_print_style_align_id*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    empty_print_style_align_id&
    operator= (const empty_print_style_align_id& x);

    virtual 
    ~empty_print_style_align_id ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    id_optional id_;
  };

  class empty_print_object_style_align: public ::xml_schema::type
  {
    public:
    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // Constructors.
    //
    empty_print_object_style_align ();

    empty_print_object_style_align (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    empty_print_object_style_align (const empty_print_object_style_align& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    virtual empty_print_object_style_align*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    empty_print_object_style_align&
    operator= (const empty_print_object_style_align& x);

    virtual 
    ~empty_print_object_style_align ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    print_object_optional print_object_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
  };

  class empty_trill_sound: public ::xml_schema::type
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // start-note
    //
    typedef ::musicxml::start_note start_note_type;
    typedef ::xsd::cxx::tree::optional< start_note_type > start_note_optional;
    typedef ::xsd::cxx::tree::traits< start_note_type, char > start_note_traits;

    const start_note_optional&
    start_note () const;

    start_note_optional&
    start_note ();

    void
    start_note (const start_note_type& x);

    void
    start_note (const start_note_optional& x);

    void
    start_note (::std::unique_ptr< start_note_type > p);

    // trill-step
    //
    typedef ::musicxml::trill_step trill_step_type;
    typedef ::xsd::cxx::tree::optional< trill_step_type > trill_step_optional;
    typedef ::xsd::cxx::tree::traits< trill_step_type, char > trill_step_traits;

    const trill_step_optional&
    trill_step () const;

    trill_step_optional&
    trill_step ();

    void
    trill_step (const trill_step_type& x);

    void
    trill_step (const trill_step_optional& x);

    void
    trill_step (::std::unique_ptr< trill_step_type > p);

    // two-note-turn
    //
    typedef ::musicxml::two_note_turn two_note_turn_type;
    typedef ::xsd::cxx::tree::optional< two_note_turn_type > two_note_turn_optional;
    typedef ::xsd::cxx::tree::traits< two_note_turn_type, char > two_note_turn_traits;

    const two_note_turn_optional&
    two_note_turn () const;

    two_note_turn_optional&
    two_note_turn ();

    void
    two_note_turn (const two_note_turn_type& x);

    void
    two_note_turn (const two_note_turn_optional& x);

    void
    two_note_turn (::std::unique_ptr< two_note_turn_type > p);

    // accelerate
    //
    typedef ::musicxml::yes_no accelerate_type;
    typedef ::xsd::cxx::tree::optional< accelerate_type > accelerate_optional;
    typedef ::xsd::cxx::tree::traits< accelerate_type, char > accelerate_traits;

    const accelerate_optional&
    accelerate () const;

    accelerate_optional&
    accelerate ();

    void
    accelerate (const accelerate_type& x);

    void
    accelerate (const accelerate_optional& x);

    void
    accelerate (::std::unique_ptr< accelerate_type > p);

    // beats
    //
    typedef ::musicxml::trill_beats beats_type;
    typedef ::xsd::cxx::tree::optional< beats_type > beats_optional;
    typedef ::xsd::cxx::tree::traits< beats_type, char > beats_traits;

    const beats_optional&
    beats () const;

    beats_optional&
    beats ();

    void
    beats (const beats_type& x);

    void
    beats (const beats_optional& x);

    void
    beats (::std::unique_ptr< beats_type > p);

    // second-beat
    //
    typedef ::musicxml::percent second_beat_type;
    typedef ::xsd::cxx::tree::optional< second_beat_type > second_beat_optional;
    typedef ::xsd::cxx::tree::traits< second_beat_type, char > second_beat_traits;

    const second_beat_optional&
    second_beat () const;

    second_beat_optional&
    second_beat ();

    void
    second_beat (const second_beat_type& x);

    void
    second_beat (const second_beat_optional& x);

    void
    second_beat (::std::unique_ptr< second_beat_type > p);

    // last-beat
    //
    typedef ::musicxml::percent last_beat_type;
    typedef ::xsd::cxx::tree::optional< last_beat_type > last_beat_optional;
    typedef ::xsd::cxx::tree::traits< last_beat_type, char > last_beat_traits;

    const last_beat_optional&
    last_beat () const;

    last_beat_optional&
    last_beat ();

    void
    last_beat (const last_beat_type& x);

    void
    last_beat (const last_beat_optional& x);

    void
    last_beat (::std::unique_ptr< last_beat_type > p);

    // Constructors.
    //
    empty_trill_sound ();

    empty_trill_sound (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    empty_trill_sound (const empty_trill_sound& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual empty_trill_sound*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    empty_trill_sound&
    operator= (const empty_trill_sound& x);

    virtual 
    ~empty_trill_sound ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
    start_note_optional start_note_;
    trill_step_optional trill_step_;
    two_note_turn_optional two_note_turn_;
    accelerate_optional accelerate_;
    beats_optional beats_;
    second_beat_optional second_beat_;
    last_beat_optional last_beat_;
  };

  class horizontal_turn: public ::xml_schema::type
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // start-note
    //
    typedef ::musicxml::start_note start_note_type;
    typedef ::xsd::cxx::tree::optional< start_note_type > start_note_optional;
    typedef ::xsd::cxx::tree::traits< start_note_type, char > start_note_traits;

    const start_note_optional&
    start_note () const;

    start_note_optional&
    start_note ();

    void
    start_note (const start_note_type& x);

    void
    start_note (const start_note_optional& x);

    void
    start_note (::std::unique_ptr< start_note_type > p);

    // trill-step
    //
    typedef ::musicxml::trill_step trill_step_type;
    typedef ::xsd::cxx::tree::optional< trill_step_type > trill_step_optional;
    typedef ::xsd::cxx::tree::traits< trill_step_type, char > trill_step_traits;

    const trill_step_optional&
    trill_step () const;

    trill_step_optional&
    trill_step ();

    void
    trill_step (const trill_step_type& x);

    void
    trill_step (const trill_step_optional& x);

    void
    trill_step (::std::unique_ptr< trill_step_type > p);

    // two-note-turn
    //
    typedef ::musicxml::two_note_turn two_note_turn_type;
    typedef ::xsd::cxx::tree::optional< two_note_turn_type > two_note_turn_optional;
    typedef ::xsd::cxx::tree::traits< two_note_turn_type, char > two_note_turn_traits;

    const two_note_turn_optional&
    two_note_turn () const;

    two_note_turn_optional&
    two_note_turn ();

    void
    two_note_turn (const two_note_turn_type& x);

    void
    two_note_turn (const two_note_turn_optional& x);

    void
    two_note_turn (::std::unique_ptr< two_note_turn_type > p);

    // accelerate
    //
    typedef ::musicxml::yes_no accelerate_type;
    typedef ::xsd::cxx::tree::optional< accelerate_type > accelerate_optional;
    typedef ::xsd::cxx::tree::traits< accelerate_type, char > accelerate_traits;

    const accelerate_optional&
    accelerate () const;

    accelerate_optional&
    accelerate ();

    void
    accelerate (const accelerate_type& x);

    void
    accelerate (const accelerate_optional& x);

    void
    accelerate (::std::unique_ptr< accelerate_type > p);

    // beats
    //
    typedef ::musicxml::trill_beats beats_type;
    typedef ::xsd::cxx::tree::optional< beats_type > beats_optional;
    typedef ::xsd::cxx::tree::traits< beats_type, char > beats_traits;

    const beats_optional&
    beats () const;

    beats_optional&
    beats ();

    void
    beats (const beats_type& x);

    void
    beats (const beats_optional& x);

    void
    beats (::std::unique_ptr< beats_type > p);

    // second-beat
    //
    typedef ::musicxml::percent second_beat_type;
    typedef ::xsd::cxx::tree::optional< second_beat_type > second_beat_optional;
    typedef ::xsd::cxx::tree::traits< second_beat_type, char > second_beat_traits;

    const second_beat_optional&
    second_beat () const;

    second_beat_optional&
    second_beat ();

    void
    second_beat (const second_beat_type& x);

    void
    second_beat (const second_beat_optional& x);

    void
    second_beat (::std::unique_ptr< second_beat_type > p);

    // last-beat
    //
    typedef ::musicxml::percent last_beat_type;
    typedef ::xsd::cxx::tree::optional< last_beat_type > last_beat_optional;
    typedef ::xsd::cxx::tree::traits< last_beat_type, char > last_beat_traits;

    const last_beat_optional&
    last_beat () const;

    last_beat_optional&
    last_beat ();

    void
    last_beat (const last_beat_type& x);

    void
    last_beat (const last_beat_optional& x);

    void
    last_beat (::std::unique_ptr< last_beat_type > p);

    // slash
    //
    typedef ::musicxml::yes_no slash_type;
    typedef ::xsd::cxx::tree::optional< slash_type > slash_optional;
    typedef ::xsd::cxx::tree::traits< slash_type, char > slash_traits;

    const slash_optional&
    slash () const;

    slash_optional&
    slash ();

    void
    slash (const slash_type& x);

    void
    slash (const slash_optional& x);

    void
    slash (::std::unique_ptr< slash_type > p);

    // Constructors.
    //
    horizontal_turn ();

    horizontal_turn (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    horizontal_turn (const horizontal_turn& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual horizontal_turn*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    horizontal_turn&
    operator= (const horizontal_turn& x);

    virtual 
    ~horizontal_turn ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
    start_note_optional start_note_;
    trill_step_optional trill_step_;
    two_note_turn_optional two_note_turn_;
    accelerate_optional accelerate_;
    beats_optional beats_;
    second_beat_optional second_beat_;
    last_beat_optional last_beat_;
    slash_optional slash_;
  };

  class fermata: public ::musicxml::fermata_shape
  {
    public:
    // type
    //
    typedef ::musicxml::upright_inverted type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    void
    type (::std::unique_ptr< type_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    fermata (::musicxml::fermata_shape::value);

    fermata (const char*);

    fermata (const ::std::string&);

    fermata (const ::musicxml::fermata_shape&);

    fermata (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    fermata (const fermata& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual fermata*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    fermata&
    operator= (const fermata& x);

    virtual 
    ~fermata ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    type_optional type_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    id_optional id_;
  };

  class fingering: public ::xml_schema::string
  {
    public:
    // substitution
    //
    typedef ::musicxml::yes_no substitution_type;
    typedef ::xsd::cxx::tree::optional< substitution_type > substitution_optional;
    typedef ::xsd::cxx::tree::traits< substitution_type, char > substitution_traits;

    const substitution_optional&
    substitution () const;

    substitution_optional&
    substitution ();

    void
    substitution (const substitution_type& x);

    void
    substitution (const substitution_optional& x);

    void
    substitution (::std::unique_ptr< substitution_type > p);

    // alternate
    //
    typedef ::musicxml::yes_no alternate_type;
    typedef ::xsd::cxx::tree::optional< alternate_type > alternate_optional;
    typedef ::xsd::cxx::tree::traits< alternate_type, char > alternate_traits;

    const alternate_optional&
    alternate () const;

    alternate_optional&
    alternate ();

    void
    alternate (const alternate_type& x);

    void
    alternate (const alternate_optional& x);

    void
    alternate (::std::unique_ptr< alternate_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // Constructors.
    //
    fingering ();

    fingering (const char*);

    fingering (const ::std::string&);

    fingering (const ::xml_schema::string&);

    fingering (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    fingering (const fingering& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual fingering*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    fingering&
    operator= (const fingering& x);

    virtual 
    ~fingering ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    substitution_optional substitution_;
    alternate_optional alternate_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
  };

  class formatted_symbol: public ::musicxml::smufl_glyph_name
  {
    public:
    // justify
    //
    typedef ::musicxml::left_center_right justify_type;
    typedef ::xsd::cxx::tree::optional< justify_type > justify_optional;
    typedef ::xsd::cxx::tree::traits< justify_type, char > justify_traits;

    const justify_optional&
    justify () const;

    justify_optional&
    justify ();

    void
    justify (const justify_type& x);

    void
    justify (const justify_optional& x);

    void
    justify (::std::unique_ptr< justify_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // underline
    //
    typedef ::musicxml::number_of_lines underline_type;
    typedef ::xsd::cxx::tree::optional< underline_type > underline_optional;
    typedef ::xsd::cxx::tree::traits< underline_type, char > underline_traits;

    const underline_optional&
    underline () const;

    underline_optional&
    underline ();

    void
    underline (const underline_type& x);

    void
    underline (const underline_optional& x);

    void
    underline (::std::unique_ptr< underline_type > p);

    // overline
    //
    typedef ::musicxml::number_of_lines overline_type;
    typedef ::xsd::cxx::tree::optional< overline_type > overline_optional;
    typedef ::xsd::cxx::tree::traits< overline_type, char > overline_traits;

    const overline_optional&
    overline () const;

    overline_optional&
    overline ();

    void
    overline (const overline_type& x);

    void
    overline (const overline_optional& x);

    void
    overline (::std::unique_ptr< overline_type > p);

    // line-through
    //
    typedef ::musicxml::number_of_lines line_through_type;
    typedef ::xsd::cxx::tree::optional< line_through_type > line_through_optional;
    typedef ::xsd::cxx::tree::traits< line_through_type, char > line_through_traits;

    const line_through_optional&
    line_through () const;

    line_through_optional&
    line_through ();

    void
    line_through (const line_through_type& x);

    void
    line_through (const line_through_optional& x);

    void
    line_through (::std::unique_ptr< line_through_type > p);

    // rotation
    //
    typedef ::musicxml::rotation_degrees rotation_type;
    typedef ::xsd::cxx::tree::optional< rotation_type > rotation_optional;
    typedef ::xsd::cxx::tree::traits< rotation_type, char > rotation_traits;

    const rotation_optional&
    rotation () const;

    rotation_optional&
    rotation ();

    void
    rotation (const rotation_type& x);

    void
    rotation (const rotation_optional& x);

    void
    rotation (::std::unique_ptr< rotation_type > p);

    // letter-spacing
    //
    typedef ::musicxml::number_or_normal letter_spacing_type;
    typedef ::xsd::cxx::tree::optional< letter_spacing_type > letter_spacing_optional;
    typedef ::xsd::cxx::tree::traits< letter_spacing_type, char > letter_spacing_traits;

    const letter_spacing_optional&
    letter_spacing () const;

    letter_spacing_optional&
    letter_spacing ();

    void
    letter_spacing (const letter_spacing_type& x);

    void
    letter_spacing (const letter_spacing_optional& x);

    void
    letter_spacing (::std::unique_ptr< letter_spacing_type > p);

    // line-height
    //
    typedef ::musicxml::number_or_normal line_height_type;
    typedef ::xsd::cxx::tree::optional< line_height_type > line_height_optional;
    typedef ::xsd::cxx::tree::traits< line_height_type, char > line_height_traits;

    const line_height_optional&
    line_height () const;

    line_height_optional&
    line_height ();

    void
    line_height (const line_height_type& x);

    void
    line_height (const line_height_optional& x);

    void
    line_height (::std::unique_ptr< line_height_type > p);

    // dir
    //
    typedef ::musicxml::text_direction dir_type;
    typedef ::xsd::cxx::tree::optional< dir_type > dir_optional;
    typedef ::xsd::cxx::tree::traits< dir_type, char > dir_traits;

    const dir_optional&
    dir () const;

    dir_optional&
    dir ();

    void
    dir (const dir_type& x);

    void
    dir (const dir_optional& x);

    void
    dir (::std::unique_ptr< dir_type > p);

    // enclosure
    //
    typedef ::musicxml::enclosure_shape enclosure_type;
    typedef ::xsd::cxx::tree::optional< enclosure_type > enclosure_optional;
    typedef ::xsd::cxx::tree::traits< enclosure_type, char > enclosure_traits;

    const enclosure_optional&
    enclosure () const;

    enclosure_optional&
    enclosure ();

    void
    enclosure (const enclosure_type& x);

    void
    enclosure (const enclosure_optional& x);

    void
    enclosure (::std::unique_ptr< enclosure_type > p);

    // Constructors.
    //
    formatted_symbol (const char*);

    formatted_symbol (const ::std::string&);

    formatted_symbol (const ::xml_schema::nmtoken&);

    formatted_symbol (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    formatted_symbol (const formatted_symbol& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual formatted_symbol*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    formatted_symbol&
    operator= (const formatted_symbol& x);

    virtual 
    ~formatted_symbol ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    justify_optional justify_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    underline_optional underline_;
    overline_optional overline_;
    line_through_optional line_through_;
    rotation_optional rotation_;
    letter_spacing_optional letter_spacing_;
    line_height_optional line_height_;
    dir_optional dir_;
    enclosure_optional enclosure_;
  };

  class formatted_symbol_id: public ::musicxml::smufl_glyph_name
  {
    public:
    // justify
    //
    typedef ::musicxml::left_center_right justify_type;
    typedef ::xsd::cxx::tree::optional< justify_type > justify_optional;
    typedef ::xsd::cxx::tree::traits< justify_type, char > justify_traits;

    const justify_optional&
    justify () const;

    justify_optional&
    justify ();

    void
    justify (const justify_type& x);

    void
    justify (const justify_optional& x);

    void
    justify (::std::unique_ptr< justify_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // underline
    //
    typedef ::musicxml::number_of_lines underline_type;
    typedef ::xsd::cxx::tree::optional< underline_type > underline_optional;
    typedef ::xsd::cxx::tree::traits< underline_type, char > underline_traits;

    const underline_optional&
    underline () const;

    underline_optional&
    underline ();

    void
    underline (const underline_type& x);

    void
    underline (const underline_optional& x);

    void
    underline (::std::unique_ptr< underline_type > p);

    // overline
    //
    typedef ::musicxml::number_of_lines overline_type;
    typedef ::xsd::cxx::tree::optional< overline_type > overline_optional;
    typedef ::xsd::cxx::tree::traits< overline_type, char > overline_traits;

    const overline_optional&
    overline () const;

    overline_optional&
    overline ();

    void
    overline (const overline_type& x);

    void
    overline (const overline_optional& x);

    void
    overline (::std::unique_ptr< overline_type > p);

    // line-through
    //
    typedef ::musicxml::number_of_lines line_through_type;
    typedef ::xsd::cxx::tree::optional< line_through_type > line_through_optional;
    typedef ::xsd::cxx::tree::traits< line_through_type, char > line_through_traits;

    const line_through_optional&
    line_through () const;

    line_through_optional&
    line_through ();

    void
    line_through (const line_through_type& x);

    void
    line_through (const line_through_optional& x);

    void
    line_through (::std::unique_ptr< line_through_type > p);

    // rotation
    //
    typedef ::musicxml::rotation_degrees rotation_type;
    typedef ::xsd::cxx::tree::optional< rotation_type > rotation_optional;
    typedef ::xsd::cxx::tree::traits< rotation_type, char > rotation_traits;

    const rotation_optional&
    rotation () const;

    rotation_optional&
    rotation ();

    void
    rotation (const rotation_type& x);

    void
    rotation (const rotation_optional& x);

    void
    rotation (::std::unique_ptr< rotation_type > p);

    // letter-spacing
    //
    typedef ::musicxml::number_or_normal letter_spacing_type;
    typedef ::xsd::cxx::tree::optional< letter_spacing_type > letter_spacing_optional;
    typedef ::xsd::cxx::tree::traits< letter_spacing_type, char > letter_spacing_traits;

    const letter_spacing_optional&
    letter_spacing () const;

    letter_spacing_optional&
    letter_spacing ();

    void
    letter_spacing (const letter_spacing_type& x);

    void
    letter_spacing (const letter_spacing_optional& x);

    void
    letter_spacing (::std::unique_ptr< letter_spacing_type > p);

    // line-height
    //
    typedef ::musicxml::number_or_normal line_height_type;
    typedef ::xsd::cxx::tree::optional< line_height_type > line_height_optional;
    typedef ::xsd::cxx::tree::traits< line_height_type, char > line_height_traits;

    const line_height_optional&
    line_height () const;

    line_height_optional&
    line_height ();

    void
    line_height (const line_height_type& x);

    void
    line_height (const line_height_optional& x);

    void
    line_height (::std::unique_ptr< line_height_type > p);

    // dir
    //
    typedef ::musicxml::text_direction dir_type;
    typedef ::xsd::cxx::tree::optional< dir_type > dir_optional;
    typedef ::xsd::cxx::tree::traits< dir_type, char > dir_traits;

    const dir_optional&
    dir () const;

    dir_optional&
    dir ();

    void
    dir (const dir_type& x);

    void
    dir (const dir_optional& x);

    void
    dir (::std::unique_ptr< dir_type > p);

    // enclosure
    //
    typedef ::musicxml::enclosure_shape enclosure_type;
    typedef ::xsd::cxx::tree::optional< enclosure_type > enclosure_optional;
    typedef ::xsd::cxx::tree::traits< enclosure_type, char > enclosure_traits;

    const enclosure_optional&
    enclosure () const;

    enclosure_optional&
    enclosure ();

    void
    enclosure (const enclosure_type& x);

    void
    enclosure (const enclosure_optional& x);

    void
    enclosure (::std::unique_ptr< enclosure_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    formatted_symbol_id (const char*);

    formatted_symbol_id (const ::std::string&);

    formatted_symbol_id (const ::xml_schema::nmtoken&);

    formatted_symbol_id (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    formatted_symbol_id (const formatted_symbol_id& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual formatted_symbol_id*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    formatted_symbol_id&
    operator= (const formatted_symbol_id& x);

    virtual 
    ~formatted_symbol_id ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    justify_optional justify_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    underline_optional underline_;
    overline_optional overline_;
    line_through_optional line_through_;
    rotation_optional rotation_;
    letter_spacing_optional letter_spacing_;
    line_height_optional line_height_;
    dir_optional dir_;
    enclosure_optional enclosure_;
    id_optional id_;
  };

  class formatted_text: public ::xml_schema::string
  {
    public:
    // justify
    //
    typedef ::musicxml::left_center_right justify_type;
    typedef ::xsd::cxx::tree::optional< justify_type > justify_optional;
    typedef ::xsd::cxx::tree::traits< justify_type, char > justify_traits;

    const justify_optional&
    justify () const;

    justify_optional&
    justify ();

    void
    justify (const justify_type& x);

    void
    justify (const justify_optional& x);

    void
    justify (::std::unique_ptr< justify_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // underline
    //
    typedef ::musicxml::number_of_lines underline_type;
    typedef ::xsd::cxx::tree::optional< underline_type > underline_optional;
    typedef ::xsd::cxx::tree::traits< underline_type, char > underline_traits;

    const underline_optional&
    underline () const;

    underline_optional&
    underline ();

    void
    underline (const underline_type& x);

    void
    underline (const underline_optional& x);

    void
    underline (::std::unique_ptr< underline_type > p);

    // overline
    //
    typedef ::musicxml::number_of_lines overline_type;
    typedef ::xsd::cxx::tree::optional< overline_type > overline_optional;
    typedef ::xsd::cxx::tree::traits< overline_type, char > overline_traits;

    const overline_optional&
    overline () const;

    overline_optional&
    overline ();

    void
    overline (const overline_type& x);

    void
    overline (const overline_optional& x);

    void
    overline (::std::unique_ptr< overline_type > p);

    // line-through
    //
    typedef ::musicxml::number_of_lines line_through_type;
    typedef ::xsd::cxx::tree::optional< line_through_type > line_through_optional;
    typedef ::xsd::cxx::tree::traits< line_through_type, char > line_through_traits;

    const line_through_optional&
    line_through () const;

    line_through_optional&
    line_through ();

    void
    line_through (const line_through_type& x);

    void
    line_through (const line_through_optional& x);

    void
    line_through (::std::unique_ptr< line_through_type > p);

    // rotation
    //
    typedef ::musicxml::rotation_degrees rotation_type;
    typedef ::xsd::cxx::tree::optional< rotation_type > rotation_optional;
    typedef ::xsd::cxx::tree::traits< rotation_type, char > rotation_traits;

    const rotation_optional&
    rotation () const;

    rotation_optional&
    rotation ();

    void
    rotation (const rotation_type& x);

    void
    rotation (const rotation_optional& x);

    void
    rotation (::std::unique_ptr< rotation_type > p);

    // letter-spacing
    //
    typedef ::musicxml::number_or_normal letter_spacing_type;
    typedef ::xsd::cxx::tree::optional< letter_spacing_type > letter_spacing_optional;
    typedef ::xsd::cxx::tree::traits< letter_spacing_type, char > letter_spacing_traits;

    const letter_spacing_optional&
    letter_spacing () const;

    letter_spacing_optional&
    letter_spacing ();

    void
    letter_spacing (const letter_spacing_type& x);

    void
    letter_spacing (const letter_spacing_optional& x);

    void
    letter_spacing (::std::unique_ptr< letter_spacing_type > p);

    // line-height
    //
    typedef ::musicxml::number_or_normal line_height_type;
    typedef ::xsd::cxx::tree::optional< line_height_type > line_height_optional;
    typedef ::xsd::cxx::tree::traits< line_height_type, char > line_height_traits;

    const line_height_optional&
    line_height () const;

    line_height_optional&
    line_height ();

    void
    line_height (const line_height_type& x);

    void
    line_height (const line_height_optional& x);

    void
    line_height (::std::unique_ptr< line_height_type > p);

    // lang
    //
    typedef ::namespace_::lang lang_type;
    typedef ::xsd::cxx::tree::optional< lang_type > lang_optional;
    typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

    const lang_optional&
    lang () const;

    lang_optional&
    lang ();

    void
    lang (const lang_type& x);

    void
    lang (const lang_optional& x);

    void
    lang (::std::unique_ptr< lang_type > p);

    // space
    //
    typedef ::namespace_::space space_type;
    typedef ::xsd::cxx::tree::optional< space_type > space_optional;
    typedef ::xsd::cxx::tree::traits< space_type, char > space_traits;

    const space_optional&
    space () const;

    space_optional&
    space ();

    void
    space (const space_type& x);

    void
    space (const space_optional& x);

    void
    space (::std::unique_ptr< space_type > p);

    // dir
    //
    typedef ::musicxml::text_direction dir_type;
    typedef ::xsd::cxx::tree::optional< dir_type > dir_optional;
    typedef ::xsd::cxx::tree::traits< dir_type, char > dir_traits;

    const dir_optional&
    dir () const;

    dir_optional&
    dir ();

    void
    dir (const dir_type& x);

    void
    dir (const dir_optional& x);

    void
    dir (::std::unique_ptr< dir_type > p);

    // enclosure
    //
    typedef ::musicxml::enclosure_shape enclosure_type;
    typedef ::xsd::cxx::tree::optional< enclosure_type > enclosure_optional;
    typedef ::xsd::cxx::tree::traits< enclosure_type, char > enclosure_traits;

    const enclosure_optional&
    enclosure () const;

    enclosure_optional&
    enclosure ();

    void
    enclosure (const enclosure_type& x);

    void
    enclosure (const enclosure_optional& x);

    void
    enclosure (::std::unique_ptr< enclosure_type > p);

    // Constructors.
    //
    formatted_text ();

    formatted_text (const char*);

    formatted_text (const ::std::string&);

    formatted_text (const ::xml_schema::string&);

    formatted_text (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    formatted_text (const formatted_text& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual formatted_text*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    formatted_text&
    operator= (const formatted_text& x);

    virtual 
    ~formatted_text ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    justify_optional justify_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    underline_optional underline_;
    overline_optional overline_;
    line_through_optional line_through_;
    rotation_optional rotation_;
    letter_spacing_optional letter_spacing_;
    line_height_optional line_height_;
    lang_optional lang_;
    space_optional space_;
    dir_optional dir_;
    enclosure_optional enclosure_;
  };

  class formatted_text_id: public ::xml_schema::string
  {
    public:
    // justify
    //
    typedef ::musicxml::left_center_right justify_type;
    typedef ::xsd::cxx::tree::optional< justify_type > justify_optional;
    typedef ::xsd::cxx::tree::traits< justify_type, char > justify_traits;

    const justify_optional&
    justify () const;

    justify_optional&
    justify ();

    void
    justify (const justify_type& x);

    void
    justify (const justify_optional& x);

    void
    justify (::std::unique_ptr< justify_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // underline
    //
    typedef ::musicxml::number_of_lines underline_type;
    typedef ::xsd::cxx::tree::optional< underline_type > underline_optional;
    typedef ::xsd::cxx::tree::traits< underline_type, char > underline_traits;

    const underline_optional&
    underline () const;

    underline_optional&
    underline ();

    void
    underline (const underline_type& x);

    void
    underline (const underline_optional& x);

    void
    underline (::std::unique_ptr< underline_type > p);

    // overline
    //
    typedef ::musicxml::number_of_lines overline_type;
    typedef ::xsd::cxx::tree::optional< overline_type > overline_optional;
    typedef ::xsd::cxx::tree::traits< overline_type, char > overline_traits;

    const overline_optional&
    overline () const;

    overline_optional&
    overline ();

    void
    overline (const overline_type& x);

    void
    overline (const overline_optional& x);

    void
    overline (::std::unique_ptr< overline_type > p);

    // line-through
    //
    typedef ::musicxml::number_of_lines line_through_type;
    typedef ::xsd::cxx::tree::optional< line_through_type > line_through_optional;
    typedef ::xsd::cxx::tree::traits< line_through_type, char > line_through_traits;

    const line_through_optional&
    line_through () const;

    line_through_optional&
    line_through ();

    void
    line_through (const line_through_type& x);

    void
    line_through (const line_through_optional& x);

    void
    line_through (::std::unique_ptr< line_through_type > p);

    // rotation
    //
    typedef ::musicxml::rotation_degrees rotation_type;
    typedef ::xsd::cxx::tree::optional< rotation_type > rotation_optional;
    typedef ::xsd::cxx::tree::traits< rotation_type, char > rotation_traits;

    const rotation_optional&
    rotation () const;

    rotation_optional&
    rotation ();

    void
    rotation (const rotation_type& x);

    void
    rotation (const rotation_optional& x);

    void
    rotation (::std::unique_ptr< rotation_type > p);

    // letter-spacing
    //
    typedef ::musicxml::number_or_normal letter_spacing_type;
    typedef ::xsd::cxx::tree::optional< letter_spacing_type > letter_spacing_optional;
    typedef ::xsd::cxx::tree::traits< letter_spacing_type, char > letter_spacing_traits;

    const letter_spacing_optional&
    letter_spacing () const;

    letter_spacing_optional&
    letter_spacing ();

    void
    letter_spacing (const letter_spacing_type& x);

    void
    letter_spacing (const letter_spacing_optional& x);

    void
    letter_spacing (::std::unique_ptr< letter_spacing_type > p);

    // line-height
    //
    typedef ::musicxml::number_or_normal line_height_type;
    typedef ::xsd::cxx::tree::optional< line_height_type > line_height_optional;
    typedef ::xsd::cxx::tree::traits< line_height_type, char > line_height_traits;

    const line_height_optional&
    line_height () const;

    line_height_optional&
    line_height ();

    void
    line_height (const line_height_type& x);

    void
    line_height (const line_height_optional& x);

    void
    line_height (::std::unique_ptr< line_height_type > p);

    // lang
    //
    typedef ::namespace_::lang lang_type;
    typedef ::xsd::cxx::tree::optional< lang_type > lang_optional;
    typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

    const lang_optional&
    lang () const;

    lang_optional&
    lang ();

    void
    lang (const lang_type& x);

    void
    lang (const lang_optional& x);

    void
    lang (::std::unique_ptr< lang_type > p);

    // space
    //
    typedef ::namespace_::space space_type;
    typedef ::xsd::cxx::tree::optional< space_type > space_optional;
    typedef ::xsd::cxx::tree::traits< space_type, char > space_traits;

    const space_optional&
    space () const;

    space_optional&
    space ();

    void
    space (const space_type& x);

    void
    space (const space_optional& x);

    void
    space (::std::unique_ptr< space_type > p);

    // dir
    //
    typedef ::musicxml::text_direction dir_type;
    typedef ::xsd::cxx::tree::optional< dir_type > dir_optional;
    typedef ::xsd::cxx::tree::traits< dir_type, char > dir_traits;

    const dir_optional&
    dir () const;

    dir_optional&
    dir ();

    void
    dir (const dir_type& x);

    void
    dir (const dir_optional& x);

    void
    dir (::std::unique_ptr< dir_type > p);

    // enclosure
    //
    typedef ::musicxml::enclosure_shape enclosure_type;
    typedef ::xsd::cxx::tree::optional< enclosure_type > enclosure_optional;
    typedef ::xsd::cxx::tree::traits< enclosure_type, char > enclosure_traits;

    const enclosure_optional&
    enclosure () const;

    enclosure_optional&
    enclosure ();

    void
    enclosure (const enclosure_type& x);

    void
    enclosure (const enclosure_optional& x);

    void
    enclosure (::std::unique_ptr< enclosure_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    formatted_text_id ();

    formatted_text_id (const char*);

    formatted_text_id (const ::std::string&);

    formatted_text_id (const ::xml_schema::string&);

    formatted_text_id (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    formatted_text_id (const formatted_text_id& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual formatted_text_id*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    formatted_text_id&
    operator= (const formatted_text_id& x);

    virtual 
    ~formatted_text_id ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    justify_optional justify_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    underline_optional underline_;
    overline_optional overline_;
    line_through_optional line_through_;
    rotation_optional rotation_;
    letter_spacing_optional letter_spacing_;
    line_height_optional line_height_;
    lang_optional lang_;
    space_optional space_;
    dir_optional dir_;
    enclosure_optional enclosure_;
    id_optional id_;
  };

  class fret: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type >
  {
    public:
    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    fret (const ::xml_schema::non_negative_integer&);

    fret (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    fret (const fret& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual fret*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    fret&
    operator= (const fret& x);

    virtual 
    ~fret ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
  };

  class level: public ::xml_schema::string
  {
    public:
    // reference
    //
    typedef ::musicxml::yes_no reference_type;
    typedef ::xsd::cxx::tree::optional< reference_type > reference_optional;
    typedef ::xsd::cxx::tree::traits< reference_type, char > reference_traits;

    const reference_optional&
    reference () const;

    reference_optional&
    reference ();

    void
    reference (const reference_type& x);

    void
    reference (const reference_optional& x);

    void
    reference (::std::unique_ptr< reference_type > p);

    // type
    //
    typedef ::musicxml::start_stop_single type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    void
    type (::std::unique_ptr< type_type > p);

    // parentheses
    //
    typedef ::musicxml::yes_no parentheses_type;
    typedef ::xsd::cxx::tree::optional< parentheses_type > parentheses_optional;
    typedef ::xsd::cxx::tree::traits< parentheses_type, char > parentheses_traits;

    const parentheses_optional&
    parentheses () const;

    parentheses_optional&
    parentheses ();

    void
    parentheses (const parentheses_type& x);

    void
    parentheses (const parentheses_optional& x);

    void
    parentheses (::std::unique_ptr< parentheses_type > p);

    // bracket
    //
    typedef ::musicxml::yes_no bracket_type;
    typedef ::xsd::cxx::tree::optional< bracket_type > bracket_optional;
    typedef ::xsd::cxx::tree::traits< bracket_type, char > bracket_traits;

    const bracket_optional&
    bracket () const;

    bracket_optional&
    bracket ();

    void
    bracket (const bracket_type& x);

    void
    bracket (const bracket_optional& x);

    void
    bracket (::std::unique_ptr< bracket_type > p);

    // size
    //
    typedef ::musicxml::symbol_size size_type;
    typedef ::xsd::cxx::tree::optional< size_type > size_optional;
    typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

    const size_optional&
    size () const;

    size_optional&
    size ();

    void
    size (const size_type& x);

    void
    size (const size_optional& x);

    void
    size (::std::unique_ptr< size_type > p);

    // Constructors.
    //
    level ();

    level (const char*);

    level (const ::std::string&);

    level (const ::xml_schema::string&);

    level (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    level (const level& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual level*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    level&
    operator= (const level& x);

    virtual 
    ~level ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    reference_optional reference_;
    type_optional type_;
    parentheses_optional parentheses_;
    bracket_optional bracket_;
    size_optional size_;
  };

  class midi_device: public ::xml_schema::string
  {
    public:
    // port
    //
    typedef ::musicxml::midi_16 port_type;
    typedef ::xsd::cxx::tree::optional< port_type > port_optional;
    typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

    const port_optional&
    port () const;

    port_optional&
    port ();

    void
    port (const port_type& x);

    void
    port (const port_optional& x);

    void
    port (::std::unique_ptr< port_type > p);

    // id
    //
    typedef ::xml_schema::idref id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    midi_device ();

    midi_device (const char*);

    midi_device (const ::std::string&);

    midi_device (const ::xml_schema::string&);

    midi_device (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    midi_device (const midi_device& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual midi_device*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    midi_device&
    operator= (const midi_device& x);

    virtual 
    ~midi_device ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    port_optional port_;
    id_optional id_;
  };

  class midi_instrument: public ::xml_schema::type
  {
    public:
    // midi-channel
    //
    typedef ::musicxml::midi_16 midi_channel_type;
    typedef ::xsd::cxx::tree::optional< midi_channel_type > midi_channel_optional;
    typedef ::xsd::cxx::tree::traits< midi_channel_type, char > midi_channel_traits;

    const midi_channel_optional&
    midi_channel () const;

    midi_channel_optional&
    midi_channel ();

    void
    midi_channel (const midi_channel_type& x);

    void
    midi_channel (const midi_channel_optional& x);

    void
    midi_channel (::std::unique_ptr< midi_channel_type > p);

    // midi-name
    //
    typedef ::xml_schema::string midi_name_type;
    typedef ::xsd::cxx::tree::optional< midi_name_type > midi_name_optional;
    typedef ::xsd::cxx::tree::traits< midi_name_type, char > midi_name_traits;

    const midi_name_optional&
    midi_name () const;

    midi_name_optional&
    midi_name ();

    void
    midi_name (const midi_name_type& x);

    void
    midi_name (const midi_name_optional& x);

    void
    midi_name (::std::unique_ptr< midi_name_type > p);

    // midi-bank
    //
    typedef ::musicxml::midi_16384 midi_bank_type;
    typedef ::xsd::cxx::tree::optional< midi_bank_type > midi_bank_optional;
    typedef ::xsd::cxx::tree::traits< midi_bank_type, char > midi_bank_traits;

    const midi_bank_optional&
    midi_bank () const;

    midi_bank_optional&
    midi_bank ();

    void
    midi_bank (const midi_bank_type& x);

    void
    midi_bank (const midi_bank_optional& x);

    void
    midi_bank (::std::unique_ptr< midi_bank_type > p);

    // midi-program
    //
    typedef ::musicxml::midi_128 midi_program_type;
    typedef ::xsd::cxx::tree::optional< midi_program_type > midi_program_optional;
    typedef ::xsd::cxx::tree::traits< midi_program_type, char > midi_program_traits;

    const midi_program_optional&
    midi_program () const;

    midi_program_optional&
    midi_program ();

    void
    midi_program (const midi_program_type& x);

    void
    midi_program (const midi_program_optional& x);

    void
    midi_program (::std::unique_ptr< midi_program_type > p);

    // midi-unpitched
    //
    typedef ::musicxml::midi_128 midi_unpitched_type;
    typedef ::xsd::cxx::tree::optional< midi_unpitched_type > midi_unpitched_optional;
    typedef ::xsd::cxx::tree::traits< midi_unpitched_type, char > midi_unpitched_traits;

    const midi_unpitched_optional&
    midi_unpitched () const;

    midi_unpitched_optional&
    midi_unpitched ();

    void
    midi_unpitched (const midi_unpitched_type& x);

    void
    midi_unpitched (const midi_unpitched_optional& x);

    void
    midi_unpitched (::std::unique_ptr< midi_unpitched_type > p);

    // volume
    //
    typedef ::musicxml::percent volume_type;
    typedef ::xsd::cxx::tree::optional< volume_type > volume_optional;
    typedef ::xsd::cxx::tree::traits< volume_type, char > volume_traits;

    const volume_optional&
    volume () const;

    volume_optional&
    volume ();

    void
    volume (const volume_type& x);

    void
    volume (const volume_optional& x);

    void
    volume (::std::unique_ptr< volume_type > p);

    // pan
    //
    typedef ::musicxml::rotation_degrees pan_type;
    typedef ::xsd::cxx::tree::optional< pan_type > pan_optional;
    typedef ::xsd::cxx::tree::traits< pan_type, char > pan_traits;

    const pan_optional&
    pan () const;

    pan_optional&
    pan ();

    void
    pan (const pan_type& x);

    void
    pan (const pan_optional& x);

    void
    pan (::std::unique_ptr< pan_type > p);

    // elevation
    //
    typedef ::musicxml::rotation_degrees elevation_type;
    typedef ::xsd::cxx::tree::optional< elevation_type > elevation_optional;
    typedef ::xsd::cxx::tree::traits< elevation_type, char > elevation_traits;

    const elevation_optional&
    elevation () const;

    elevation_optional&
    elevation ();

    void
    elevation (const elevation_type& x);

    void
    elevation (const elevation_optional& x);

    void
    elevation (::std::unique_ptr< elevation_type > p);

    // id
    //
    typedef ::xml_schema::idref id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    midi_instrument (const id_type&);

    midi_instrument (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    midi_instrument (const midi_instrument& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual midi_instrument*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    midi_instrument&
    operator= (const midi_instrument& x);

    virtual 
    ~midi_instrument ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    midi_channel_optional midi_channel_;
    midi_name_optional midi_name_;
    midi_bank_optional midi_bank_;
    midi_program_optional midi_program_;
    midi_unpitched_optional midi_unpitched_;
    volume_optional volume_;
    pan_optional pan_;
    elevation_optional elevation_;
    ::xsd::cxx::tree::one< id_type > id_;
  };

  class name_display: public ::xml_schema::type
  {
    public:
    // display-text
    //
    typedef ::musicxml::formatted_text display_text_type;
    typedef ::xsd::cxx::tree::sequence< display_text_type > display_text_sequence;
    typedef display_text_sequence::iterator display_text_iterator;
    typedef display_text_sequence::const_iterator display_text_const_iterator;
    typedef ::xsd::cxx::tree::traits< display_text_type, char > display_text_traits;

    const display_text_sequence&
    display_text () const;

    display_text_sequence&
    display_text ();

    void
    display_text (const display_text_sequence& s);

    // accidental-text
    //
    typedef ::musicxml::accidental_text accidental_text_type;
    typedef ::xsd::cxx::tree::sequence< accidental_text_type > accidental_text_sequence;
    typedef accidental_text_sequence::iterator accidental_text_iterator;
    typedef accidental_text_sequence::const_iterator accidental_text_const_iterator;
    typedef ::xsd::cxx::tree::traits< accidental_text_type, char > accidental_text_traits;

    const accidental_text_sequence&
    accidental_text () const;

    accidental_text_sequence&
    accidental_text ();

    void
    accidental_text (const accidental_text_sequence& s);

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // Constructors.
    //
    name_display ();

    name_display (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    name_display (const name_display& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual name_display*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    name_display&
    operator= (const name_display& x);

    virtual 
    ~name_display ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    display_text_sequence display_text_;
    accidental_text_sequence accidental_text_;
    print_object_optional print_object_;
  };

  class other_play: public ::xml_schema::string
  {
    public:
    // type
    //
    typedef ::xml_schema::token type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    other_play (const type_type&);

    other_play (const char*,
                const type_type&);

    other_play (const ::std::string&,
                const type_type&);

    other_play (const ::xml_schema::string&,
                const type_type&);

    other_play (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    other_play (const other_play& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual other_play*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    other_play&
    operator= (const other_play& x);

    virtual 
    ~other_play ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
  };

  class play: public ::xml_schema::type
  {
    public:
    // ipa
    //
    typedef ::xml_schema::string ipa_type;
    typedef ::xsd::cxx::tree::sequence< ipa_type > ipa_sequence;
    typedef ipa_sequence::iterator ipa_iterator;
    typedef ipa_sequence::const_iterator ipa_const_iterator;
    typedef ::xsd::cxx::tree::traits< ipa_type, char > ipa_traits;

    const ipa_sequence&
    ipa () const;

    ipa_sequence&
    ipa ();

    void
    ipa (const ipa_sequence& s);

    // mute
    //
    typedef ::musicxml::mute mute_type;
    typedef ::xsd::cxx::tree::sequence< mute_type > mute_sequence;
    typedef mute_sequence::iterator mute_iterator;
    typedef mute_sequence::const_iterator mute_const_iterator;
    typedef ::xsd::cxx::tree::traits< mute_type, char > mute_traits;

    const mute_sequence&
    mute () const;

    mute_sequence&
    mute ();

    void
    mute (const mute_sequence& s);

    // semi-pitched
    //
    typedef ::musicxml::semi_pitched semi_pitched_type;
    typedef ::xsd::cxx::tree::sequence< semi_pitched_type > semi_pitched_sequence;
    typedef semi_pitched_sequence::iterator semi_pitched_iterator;
    typedef semi_pitched_sequence::const_iterator semi_pitched_const_iterator;
    typedef ::xsd::cxx::tree::traits< semi_pitched_type, char > semi_pitched_traits;

    const semi_pitched_sequence&
    semi_pitched () const;

    semi_pitched_sequence&
    semi_pitched ();

    void
    semi_pitched (const semi_pitched_sequence& s);

    // other-play
    //
    typedef ::musicxml::other_play other_play_type;
    typedef ::xsd::cxx::tree::sequence< other_play_type > other_play_sequence;
    typedef other_play_sequence::iterator other_play_iterator;
    typedef other_play_sequence::const_iterator other_play_const_iterator;
    typedef ::xsd::cxx::tree::traits< other_play_type, char > other_play_traits;

    const other_play_sequence&
    other_play () const;

    other_play_sequence&
    other_play ();

    void
    other_play (const other_play_sequence& s);

    // id
    //
    typedef ::xml_schema::idref id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    play ();

    play (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    play (const play& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual play*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    play&
    operator= (const play& x);

    virtual 
    ~play ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ipa_sequence ipa_;
    mute_sequence mute_;
    semi_pitched_sequence semi_pitched_;
    other_play_sequence other_play_;
    id_optional id_;
  };

  class segno: public ::xml_schema::type
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // smufl
    //
    typedef ::musicxml::smufl_segno_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    segno ();

    segno (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    segno (const segno& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual segno*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    segno&
    operator= (const segno& x);

    virtual 
    ~segno ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    id_optional id_;
    smufl_optional smufl_;
  };

  class string: public ::musicxml::string_number
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // Constructors.
    //
    string (const ::xml_schema::positive_integer&);

    string (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    string (const string& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual string*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    string&
    operator= (const string& x);

    virtual 
    ~string ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
  };

  class typed_text: public ::xml_schema::string
  {
    public:
    // type
    //
    typedef ::xml_schema::token type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    typed_text ();

    typed_text (const char*);

    typed_text (const ::std::string&);

    typed_text (const ::xml_schema::string&);

    typed_text (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    typed_text (const typed_text& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual typed_text*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    typed_text&
    operator= (const typed_text& x);

    virtual 
    ~typed_text ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    type_optional type_;
  };

  class wavy_line: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::start_stop_continue type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // number
    //
    typedef ::musicxml::number_level number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // smufl
    //
    typedef ::musicxml::smufl_wavy_line_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // start-note
    //
    typedef ::musicxml::start_note start_note_type;
    typedef ::xsd::cxx::tree::optional< start_note_type > start_note_optional;
    typedef ::xsd::cxx::tree::traits< start_note_type, char > start_note_traits;

    const start_note_optional&
    start_note () const;

    start_note_optional&
    start_note ();

    void
    start_note (const start_note_type& x);

    void
    start_note (const start_note_optional& x);

    void
    start_note (::std::unique_ptr< start_note_type > p);

    // trill-step
    //
    typedef ::musicxml::trill_step trill_step_type;
    typedef ::xsd::cxx::tree::optional< trill_step_type > trill_step_optional;
    typedef ::xsd::cxx::tree::traits< trill_step_type, char > trill_step_traits;

    const trill_step_optional&
    trill_step () const;

    trill_step_optional&
    trill_step ();

    void
    trill_step (const trill_step_type& x);

    void
    trill_step (const trill_step_optional& x);

    void
    trill_step (::std::unique_ptr< trill_step_type > p);

    // two-note-turn
    //
    typedef ::musicxml::two_note_turn two_note_turn_type;
    typedef ::xsd::cxx::tree::optional< two_note_turn_type > two_note_turn_optional;
    typedef ::xsd::cxx::tree::traits< two_note_turn_type, char > two_note_turn_traits;

    const two_note_turn_optional&
    two_note_turn () const;

    two_note_turn_optional&
    two_note_turn ();

    void
    two_note_turn (const two_note_turn_type& x);

    void
    two_note_turn (const two_note_turn_optional& x);

    void
    two_note_turn (::std::unique_ptr< two_note_turn_type > p);

    // accelerate
    //
    typedef ::musicxml::yes_no accelerate_type;
    typedef ::xsd::cxx::tree::optional< accelerate_type > accelerate_optional;
    typedef ::xsd::cxx::tree::traits< accelerate_type, char > accelerate_traits;

    const accelerate_optional&
    accelerate () const;

    accelerate_optional&
    accelerate ();

    void
    accelerate (const accelerate_type& x);

    void
    accelerate (const accelerate_optional& x);

    void
    accelerate (::std::unique_ptr< accelerate_type > p);

    // beats
    //
    typedef ::musicxml::trill_beats beats_type;
    typedef ::xsd::cxx::tree::optional< beats_type > beats_optional;
    typedef ::xsd::cxx::tree::traits< beats_type, char > beats_traits;

    const beats_optional&
    beats () const;

    beats_optional&
    beats ();

    void
    beats (const beats_type& x);

    void
    beats (const beats_optional& x);

    void
    beats (::std::unique_ptr< beats_type > p);

    // second-beat
    //
    typedef ::musicxml::percent second_beat_type;
    typedef ::xsd::cxx::tree::optional< second_beat_type > second_beat_optional;
    typedef ::xsd::cxx::tree::traits< second_beat_type, char > second_beat_traits;

    const second_beat_optional&
    second_beat () const;

    second_beat_optional&
    second_beat ();

    void
    second_beat (const second_beat_type& x);

    void
    second_beat (const second_beat_optional& x);

    void
    second_beat (::std::unique_ptr< second_beat_type > p);

    // last-beat
    //
    typedef ::musicxml::percent last_beat_type;
    typedef ::xsd::cxx::tree::optional< last_beat_type > last_beat_optional;
    typedef ::xsd::cxx::tree::traits< last_beat_type, char > last_beat_traits;

    const last_beat_optional&
    last_beat () const;

    last_beat_optional&
    last_beat ();

    void
    last_beat (const last_beat_type& x);

    void
    last_beat (const last_beat_optional& x);

    void
    last_beat (::std::unique_ptr< last_beat_type > p);

    // Constructors.
    //
    wavy_line (const type_type&);

    wavy_line (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    wavy_line (const wavy_line& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual wavy_line*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    wavy_line&
    operator= (const wavy_line& x);

    virtual 
    ~wavy_line ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    number_optional number_;
    smufl_optional smufl_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    placement_optional placement_;
    color_optional color_;
    start_note_optional start_note_;
    trill_step_optional trill_step_;
    two_note_turn_optional two_note_turn_;
    accelerate_optional accelerate_;
    beats_optional beats_;
    second_beat_optional second_beat_;
    last_beat_optional last_beat_;
  };

  class attributes: public ::xml_schema::type
  {
    public:
    // footnote
    //
    typedef ::musicxml::formatted_text footnote_type;
    typedef ::xsd::cxx::tree::optional< footnote_type > footnote_optional;
    typedef ::xsd::cxx::tree::traits< footnote_type, char > footnote_traits;

    const footnote_optional&
    footnote () const;

    footnote_optional&
    footnote ();

    void
    footnote (const footnote_type& x);

    void
    footnote (const footnote_optional& x);

    void
    footnote (::std::unique_ptr< footnote_type > p);

    // level
    //
    typedef ::musicxml::level level_type;
    typedef ::xsd::cxx::tree::optional< level_type > level_optional;
    typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

    const level_optional&
    level () const;

    level_optional&
    level ();

    void
    level (const level_type& x);

    void
    level (const level_optional& x);

    void
    level (::std::unique_ptr< level_type > p);

    // divisions
    //
    typedef ::musicxml::positive_divisions divisions_type;
    typedef ::xsd::cxx::tree::optional< divisions_type > divisions_optional;
    typedef ::xsd::cxx::tree::traits< divisions_type, char > divisions_traits;

    const divisions_optional&
    divisions () const;

    divisions_optional&
    divisions ();

    void
    divisions (const divisions_type& x);

    void
    divisions (const divisions_optional& x);

    void
    divisions (::std::unique_ptr< divisions_type > p);

    // key
    //
    typedef ::musicxml::key key_type;
    typedef ::xsd::cxx::tree::sequence< key_type > key_sequence;
    typedef key_sequence::iterator key_iterator;
    typedef key_sequence::const_iterator key_const_iterator;
    typedef ::xsd::cxx::tree::traits< key_type, char > key_traits;

    const key_sequence&
    key () const;

    key_sequence&
    key ();

    void
    key (const key_sequence& s);

    // time
    //
    typedef ::musicxml::time time_type;
    typedef ::xsd::cxx::tree::sequence< time_type > time_sequence;
    typedef time_sequence::iterator time_iterator;
    typedef time_sequence::const_iterator time_const_iterator;
    typedef ::xsd::cxx::tree::traits< time_type, char > time_traits;

    const time_sequence&
    time () const;

    time_sequence&
    time ();

    void
    time (const time_sequence& s);

    // staves
    //
    typedef ::xml_schema::non_negative_integer staves_type;
    typedef ::xsd::cxx::tree::optional< staves_type > staves_optional;
    typedef ::xsd::cxx::tree::traits< staves_type, char > staves_traits;

    const staves_optional&
    staves () const;

    staves_optional&
    staves ();

    void
    staves (const staves_type& x);

    void
    staves (const staves_optional& x);

    // part-symbol
    //
    typedef ::musicxml::part_symbol part_symbol_type;
    typedef ::xsd::cxx::tree::optional< part_symbol_type > part_symbol_optional;
    typedef ::xsd::cxx::tree::traits< part_symbol_type, char > part_symbol_traits;

    const part_symbol_optional&
    part_symbol () const;

    part_symbol_optional&
    part_symbol ();

    void
    part_symbol (const part_symbol_type& x);

    void
    part_symbol (const part_symbol_optional& x);

    void
    part_symbol (::std::unique_ptr< part_symbol_type > p);

    // instruments
    //
    typedef ::xml_schema::non_negative_integer instruments_type;
    typedef ::xsd::cxx::tree::optional< instruments_type > instruments_optional;
    typedef ::xsd::cxx::tree::traits< instruments_type, char > instruments_traits;

    const instruments_optional&
    instruments () const;

    instruments_optional&
    instruments ();

    void
    instruments (const instruments_type& x);

    void
    instruments (const instruments_optional& x);

    // clef
    //
    typedef ::musicxml::clef clef_type;
    typedef ::xsd::cxx::tree::sequence< clef_type > clef_sequence;
    typedef clef_sequence::iterator clef_iterator;
    typedef clef_sequence::const_iterator clef_const_iterator;
    typedef ::xsd::cxx::tree::traits< clef_type, char > clef_traits;

    const clef_sequence&
    clef () const;

    clef_sequence&
    clef ();

    void
    clef (const clef_sequence& s);

    // staff-details
    //
    typedef ::musicxml::staff_details staff_details_type;
    typedef ::xsd::cxx::tree::sequence< staff_details_type > staff_details_sequence;
    typedef staff_details_sequence::iterator staff_details_iterator;
    typedef staff_details_sequence::const_iterator staff_details_const_iterator;
    typedef ::xsd::cxx::tree::traits< staff_details_type, char > staff_details_traits;

    const staff_details_sequence&
    staff_details () const;

    staff_details_sequence&
    staff_details ();

    void
    staff_details (const staff_details_sequence& s);

    // transpose
    //
    typedef ::musicxml::transpose transpose_type;
    typedef ::xsd::cxx::tree::sequence< transpose_type > transpose_sequence;
    typedef transpose_sequence::iterator transpose_iterator;
    typedef transpose_sequence::const_iterator transpose_const_iterator;
    typedef ::xsd::cxx::tree::traits< transpose_type, char > transpose_traits;

    const transpose_sequence&
    transpose () const;

    transpose_sequence&
    transpose ();

    void
    transpose (const transpose_sequence& s);

    // for-part
    //
    typedef ::musicxml::for_part for_part_type;
    typedef ::xsd::cxx::tree::sequence< for_part_type > for_part_sequence;
    typedef for_part_sequence::iterator for_part_iterator;
    typedef for_part_sequence::const_iterator for_part_const_iterator;
    typedef ::xsd::cxx::tree::traits< for_part_type, char > for_part_traits;

    const for_part_sequence&
    for_part () const;

    for_part_sequence&
    for_part ();

    void
    for_part (const for_part_sequence& s);

    // directive
    //
    typedef ::musicxml::directive directive_type;
    typedef ::xsd::cxx::tree::sequence< directive_type > directive_sequence;
    typedef directive_sequence::iterator directive_iterator;
    typedef directive_sequence::const_iterator directive_const_iterator;
    typedef ::xsd::cxx::tree::traits< directive_type, char > directive_traits;

    const directive_sequence&
    directive () const;

    directive_sequence&
    directive ();

    void
    directive (const directive_sequence& s);

    // measure-style
    //
    typedef ::musicxml::measure_style measure_style_type;
    typedef ::xsd::cxx::tree::sequence< measure_style_type > measure_style_sequence;
    typedef measure_style_sequence::iterator measure_style_iterator;
    typedef measure_style_sequence::const_iterator measure_style_const_iterator;
    typedef ::xsd::cxx::tree::traits< measure_style_type, char > measure_style_traits;

    const measure_style_sequence&
    measure_style () const;

    measure_style_sequence&
    measure_style ();

    void
    measure_style (const measure_style_sequence& s);

    // Constructors.
    //
    attributes ();

    attributes (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    attributes (const attributes& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual attributes*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    attributes&
    operator= (const attributes& x);

    virtual 
    ~attributes ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    footnote_optional footnote_;
    level_optional level_;
    divisions_optional divisions_;
    key_sequence key_;
    time_sequence time_;
    staves_optional staves_;
    part_symbol_optional part_symbol_;
    instruments_optional instruments_;
    clef_sequence clef_;
    staff_details_sequence staff_details_;
    transpose_sequence transpose_;
    for_part_sequence for_part_;
    directive_sequence directive_;
    measure_style_sequence measure_style_;
  };

  class beat_repeat: public ::xml_schema::type
  {
    public:
    // slash-type
    //
    typedef ::musicxml::note_type_value slash_type_type;
    typedef ::xsd::cxx::tree::optional< slash_type_type > slash_type_optional;
    typedef ::xsd::cxx::tree::traits< slash_type_type, char > slash_type_traits;

    const slash_type_optional&
    slash_type () const;

    slash_type_optional&
    slash_type ();

    void
    slash_type (const slash_type_type& x);

    void
    slash_type (const slash_type_optional& x);

    void
    slash_type (::std::unique_ptr< slash_type_type > p);

    // slash-dot
    //
    typedef ::musicxml::empty slash_dot_type;
    typedef ::xsd::cxx::tree::sequence< slash_dot_type > slash_dot_sequence;
    typedef slash_dot_sequence::iterator slash_dot_iterator;
    typedef slash_dot_sequence::const_iterator slash_dot_const_iterator;
    typedef ::xsd::cxx::tree::traits< slash_dot_type, char > slash_dot_traits;

    const slash_dot_sequence&
    slash_dot () const;

    slash_dot_sequence&
    slash_dot ();

    void
    slash_dot (const slash_dot_sequence& s);

    // except-voice
    //
    typedef ::xml_schema::string except_voice_type;
    typedef ::xsd::cxx::tree::sequence< except_voice_type > except_voice_sequence;
    typedef except_voice_sequence::iterator except_voice_iterator;
    typedef except_voice_sequence::const_iterator except_voice_const_iterator;
    typedef ::xsd::cxx::tree::traits< except_voice_type, char > except_voice_traits;

    const except_voice_sequence&
    except_voice () const;

    except_voice_sequence&
    except_voice ();

    void
    except_voice (const except_voice_sequence& s);

    // type
    //
    typedef ::musicxml::start_stop type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // slashes
    //
    typedef ::xml_schema::positive_integer slashes_type;
    typedef ::xsd::cxx::tree::optional< slashes_type > slashes_optional;
    typedef ::xsd::cxx::tree::traits< slashes_type, char > slashes_traits;

    const slashes_optional&
    slashes () const;

    slashes_optional&
    slashes ();

    void
    slashes (const slashes_type& x);

    void
    slashes (const slashes_optional& x);

    // use-dots
    //
    typedef ::musicxml::yes_no use_dots_type;
    typedef ::xsd::cxx::tree::optional< use_dots_type > use_dots_optional;
    typedef ::xsd::cxx::tree::traits< use_dots_type, char > use_dots_traits;

    const use_dots_optional&
    use_dots () const;

    use_dots_optional&
    use_dots ();

    void
    use_dots (const use_dots_type& x);

    void
    use_dots (const use_dots_optional& x);

    void
    use_dots (::std::unique_ptr< use_dots_type > p);

    // Constructors.
    //
    beat_repeat (const type_type&);

    beat_repeat (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    beat_repeat (const beat_repeat& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual beat_repeat*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    beat_repeat&
    operator= (const beat_repeat& x);

    virtual 
    ~beat_repeat ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    slash_type_optional slash_type_;
    slash_dot_sequence slash_dot_;
    except_voice_sequence except_voice_;
    ::xsd::cxx::tree::one< type_type > type_;
    slashes_optional slashes_;
    use_dots_optional use_dots_;
  };

  class cancel: public ::musicxml::fifths
  {
    public:
    // location
    //
    typedef ::musicxml::cancel_location location_type;
    typedef ::xsd::cxx::tree::optional< location_type > location_optional;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_optional&
    location () const;

    location_optional&
    location ();

    void
    location (const location_type& x);

    void
    location (const location_optional& x);

    void
    location (::std::unique_ptr< location_type > p);

    // Constructors.
    //
    cancel (const ::xml_schema::integer&);

    cancel (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    cancel (const cancel& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual cancel*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    cancel&
    operator= (const cancel& x);

    virtual 
    ~cancel ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    location_optional location_;
  };

  class clef: public ::xml_schema::type
  {
    public:
    // sign
    //
    typedef ::musicxml::clef_sign sign_type;
    typedef ::xsd::cxx::tree::traits< sign_type, char > sign_traits;

    const sign_type&
    sign () const;

    sign_type&
    sign ();

    void
    sign (const sign_type& x);

    void
    sign (::std::unique_ptr< sign_type > p);

    // line
    //
    typedef ::musicxml::staff_line_position line_type;
    typedef ::xsd::cxx::tree::optional< line_type > line_optional;
    typedef ::xsd::cxx::tree::traits< line_type, char > line_traits;

    const line_optional&
    line () const;

    line_optional&
    line ();

    void
    line (const line_type& x);

    void
    line (const line_optional& x);

    void
    line (::std::unique_ptr< line_type > p);

    // clef-octave-change
    //
    typedef ::xml_schema::integer clef_octave_change_type;
    typedef ::xsd::cxx::tree::optional< clef_octave_change_type > clef_octave_change_optional;
    typedef ::xsd::cxx::tree::traits< clef_octave_change_type, char > clef_octave_change_traits;

    const clef_octave_change_optional&
    clef_octave_change () const;

    clef_octave_change_optional&
    clef_octave_change ();

    void
    clef_octave_change (const clef_octave_change_type& x);

    void
    clef_octave_change (const clef_octave_change_optional& x);

    // number
    //
    typedef ::musicxml::staff_number number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // additional
    //
    typedef ::musicxml::yes_no additional_type;
    typedef ::xsd::cxx::tree::optional< additional_type > additional_optional;
    typedef ::xsd::cxx::tree::traits< additional_type, char > additional_traits;

    const additional_optional&
    additional () const;

    additional_optional&
    additional ();

    void
    additional (const additional_type& x);

    void
    additional (const additional_optional& x);

    void
    additional (::std::unique_ptr< additional_type > p);

    // size
    //
    typedef ::musicxml::symbol_size size_type;
    typedef ::xsd::cxx::tree::optional< size_type > size_optional;
    typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

    const size_optional&
    size () const;

    size_optional&
    size ();

    void
    size (const size_type& x);

    void
    size (const size_optional& x);

    void
    size (::std::unique_ptr< size_type > p);

    // after-barline
    //
    typedef ::musicxml::yes_no after_barline_type;
    typedef ::xsd::cxx::tree::optional< after_barline_type > after_barline_optional;
    typedef ::xsd::cxx::tree::traits< after_barline_type, char > after_barline_traits;

    const after_barline_optional&
    after_barline () const;

    after_barline_optional&
    after_barline ();

    void
    after_barline (const after_barline_type& x);

    void
    after_barline (const after_barline_optional& x);

    void
    after_barline (::std::unique_ptr< after_barline_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    clef (const sign_type&);

    clef (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    clef (const clef& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual clef*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    clef&
    operator= (const clef& x);

    virtual 
    ~clef ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< sign_type > sign_;
    line_optional line_;
    clef_octave_change_optional clef_octave_change_;
    number_optional number_;
    additional_optional additional_;
    size_optional size_;
    after_barline_optional after_barline_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    print_object_optional print_object_;
    id_optional id_;
  };

  class double_: public ::xml_schema::type
  {
    public:
    // above
    //
    typedef ::musicxml::yes_no above_type;
    typedef ::xsd::cxx::tree::optional< above_type > above_optional;
    typedef ::xsd::cxx::tree::traits< above_type, char > above_traits;

    const above_optional&
    above () const;

    above_optional&
    above ();

    void
    above (const above_type& x);

    void
    above (const above_optional& x);

    void
    above (::std::unique_ptr< above_type > p);

    // Constructors.
    //
    double_ ();

    double_ (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    double_ (const double_& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual double_*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    double_&
    operator= (const double_& x);

    virtual 
    ~double_ ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    above_optional above_;
  };

  class for_part: public ::xml_schema::type
  {
    public:
    // part-clef
    //
    typedef ::musicxml::part_clef part_clef_type;
    typedef ::xsd::cxx::tree::optional< part_clef_type > part_clef_optional;
    typedef ::xsd::cxx::tree::traits< part_clef_type, char > part_clef_traits;

    const part_clef_optional&
    part_clef () const;

    part_clef_optional&
    part_clef ();

    void
    part_clef (const part_clef_type& x);

    void
    part_clef (const part_clef_optional& x);

    void
    part_clef (::std::unique_ptr< part_clef_type > p);

    // part-transpose
    //
    typedef ::musicxml::part_transpose part_transpose_type;
    typedef ::xsd::cxx::tree::traits< part_transpose_type, char > part_transpose_traits;

    const part_transpose_type&
    part_transpose () const;

    part_transpose_type&
    part_transpose ();

    void
    part_transpose (const part_transpose_type& x);

    void
    part_transpose (::std::unique_ptr< part_transpose_type > p);

    // number
    //
    typedef ::musicxml::staff_number number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    for_part (const part_transpose_type&);

    for_part (::std::unique_ptr< part_transpose_type >);

    for_part (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    for_part (const for_part& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual for_part*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    for_part&
    operator= (const for_part& x);

    virtual 
    ~for_part ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    part_clef_optional part_clef_;
    ::xsd::cxx::tree::one< part_transpose_type > part_transpose_;
    number_optional number_;
    id_optional id_;
  };

  class interchangeable: public ::xml_schema::type
  {
    public:
    // time-relation
    //
    typedef ::musicxml::time_relation time_relation_type;
    typedef ::xsd::cxx::tree::optional< time_relation_type > time_relation_optional;
    typedef ::xsd::cxx::tree::traits< time_relation_type, char > time_relation_traits;

    const time_relation_optional&
    time_relation () const;

    time_relation_optional&
    time_relation ();

    void
    time_relation (const time_relation_type& x);

    void
    time_relation (const time_relation_optional& x);

    void
    time_relation (::std::unique_ptr< time_relation_type > p);

    // beats
    //
    typedef ::xml_schema::string beats_type;
    typedef ::xsd::cxx::tree::sequence< beats_type > beats_sequence;
    typedef beats_sequence::iterator beats_iterator;
    typedef beats_sequence::const_iterator beats_const_iterator;
    typedef ::xsd::cxx::tree::traits< beats_type, char > beats_traits;

    const beats_sequence&
    beats () const;

    beats_sequence&
    beats ();

    void
    beats (const beats_sequence& s);

    // beat-type
    //
    typedef ::xml_schema::string beat_type_type;
    typedef ::xsd::cxx::tree::sequence< beat_type_type > beat_type_sequence;
    typedef beat_type_sequence::iterator beat_type_iterator;
    typedef beat_type_sequence::const_iterator beat_type_const_iterator;
    typedef ::xsd::cxx::tree::traits< beat_type_type, char > beat_type_traits;

    const beat_type_sequence&
    beat_type () const;

    beat_type_sequence&
    beat_type ();

    void
    beat_type (const beat_type_sequence& s);

    // symbol
    //
    typedef ::musicxml::time_symbol symbol_type;
    typedef ::xsd::cxx::tree::optional< symbol_type > symbol_optional;
    typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

    const symbol_optional&
    symbol () const;

    symbol_optional&
    symbol ();

    void
    symbol (const symbol_type& x);

    void
    symbol (const symbol_optional& x);

    void
    symbol (::std::unique_ptr< symbol_type > p);

    // separator
    //
    typedef ::musicxml::time_separator separator_type;
    typedef ::xsd::cxx::tree::optional< separator_type > separator_optional;
    typedef ::xsd::cxx::tree::traits< separator_type, char > separator_traits;

    const separator_optional&
    separator () const;

    separator_optional&
    separator ();

    void
    separator (const separator_type& x);

    void
    separator (const separator_optional& x);

    void
    separator (::std::unique_ptr< separator_type > p);

    // Constructors.
    //
    interchangeable ();

    interchangeable (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    interchangeable (const interchangeable& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual interchangeable*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    interchangeable&
    operator= (const interchangeable& x);

    virtual 
    ~interchangeable ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    time_relation_optional time_relation_;
    beats_sequence beats_;
    beat_type_sequence beat_type_;
    symbol_optional symbol_;
    separator_optional separator_;
  };

  class key: public ::xml_schema::type
  {
    public:
    // cancel
    //
    typedef ::musicxml::cancel cancel_type;
    typedef ::xsd::cxx::tree::optional< cancel_type > cancel_optional;
    typedef ::xsd::cxx::tree::traits< cancel_type, char > cancel_traits;

    const cancel_optional&
    cancel () const;

    cancel_optional&
    cancel ();

    void
    cancel (const cancel_type& x);

    void
    cancel (const cancel_optional& x);

    void
    cancel (::std::unique_ptr< cancel_type > p);

    // fifths
    //
    typedef ::musicxml::fifths fifths_type;
    typedef ::xsd::cxx::tree::optional< fifths_type > fifths_optional;
    typedef ::xsd::cxx::tree::traits< fifths_type, char > fifths_traits;

    const fifths_optional&
    fifths () const;

    fifths_optional&
    fifths ();

    void
    fifths (const fifths_type& x);

    void
    fifths (const fifths_optional& x);

    void
    fifths (::std::unique_ptr< fifths_type > p);

    // mode
    //
    typedef ::musicxml::mode mode_type;
    typedef ::xsd::cxx::tree::optional< mode_type > mode_optional;
    typedef ::xsd::cxx::tree::traits< mode_type, char > mode_traits;

    const mode_optional&
    mode () const;

    mode_optional&
    mode ();

    void
    mode (const mode_type& x);

    void
    mode (const mode_optional& x);

    void
    mode (::std::unique_ptr< mode_type > p);

    // key-step
    //
    typedef ::musicxml::step key_step_type;
    typedef ::xsd::cxx::tree::sequence< key_step_type > key_step_sequence;
    typedef key_step_sequence::iterator key_step_iterator;
    typedef key_step_sequence::const_iterator key_step_const_iterator;
    typedef ::xsd::cxx::tree::traits< key_step_type, char > key_step_traits;

    const key_step_sequence&
    key_step () const;

    key_step_sequence&
    key_step ();

    void
    key_step (const key_step_sequence& s);

    // key-alter
    //
    typedef ::musicxml::semitones key_alter_type;
    typedef ::xsd::cxx::tree::sequence< key_alter_type > key_alter_sequence;
    typedef key_alter_sequence::iterator key_alter_iterator;
    typedef key_alter_sequence::const_iterator key_alter_const_iterator;
    typedef ::xsd::cxx::tree::traits< key_alter_type, char > key_alter_traits;

    const key_alter_sequence&
    key_alter () const;

    key_alter_sequence&
    key_alter ();

    void
    key_alter (const key_alter_sequence& s);

    // key-accidental
    //
    typedef ::musicxml::key_accidental key_accidental_type;
    typedef ::xsd::cxx::tree::sequence< key_accidental_type > key_accidental_sequence;
    typedef key_accidental_sequence::iterator key_accidental_iterator;
    typedef key_accidental_sequence::const_iterator key_accidental_const_iterator;
    typedef ::xsd::cxx::tree::traits< key_accidental_type, char > key_accidental_traits;

    const key_accidental_sequence&
    key_accidental () const;

    key_accidental_sequence&
    key_accidental ();

    void
    key_accidental (const key_accidental_sequence& s);

    // key-octave
    //
    typedef ::musicxml::key_octave key_octave_type;
    typedef ::xsd::cxx::tree::sequence< key_octave_type > key_octave_sequence;
    typedef key_octave_sequence::iterator key_octave_iterator;
    typedef key_octave_sequence::const_iterator key_octave_const_iterator;
    typedef ::xsd::cxx::tree::traits< key_octave_type, char > key_octave_traits;

    const key_octave_sequence&
    key_octave () const;

    key_octave_sequence&
    key_octave ();

    void
    key_octave (const key_octave_sequence& s);

    // number
    //
    typedef ::musicxml::staff_number number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    key ();

    key (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    key (const key& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual key*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    key&
    operator= (const key& x);

    virtual 
    ~key ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    cancel_optional cancel_;
    fifths_optional fifths_;
    mode_optional mode_;
    key_step_sequence key_step_;
    key_alter_sequence key_alter_;
    key_accidental_sequence key_accidental_;
    key_octave_sequence key_octave_;
    number_optional number_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    print_object_optional print_object_;
    id_optional id_;
  };

  class key_accidental: public ::musicxml::accidental_value
  {
    public:
    // smufl
    //
    typedef ::musicxml::smufl_accidental_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    key_accidental (::musicxml::accidental_value::value);

    key_accidental (const char*);

    key_accidental (const ::std::string&);

    key_accidental (const ::musicxml::accidental_value&);

    key_accidental (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    key_accidental (const key_accidental& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual key_accidental*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    key_accidental&
    operator= (const key_accidental& x);

    virtual 
    ~key_accidental ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    smufl_optional smufl_;
  };

  class key_octave: public ::musicxml::octave
  {
    public:
    // number
    //
    typedef ::xml_schema::positive_integer number_type;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_type&
    number () const;

    number_type&
    number ();

    void
    number (const number_type& x);

    // cancel
    //
    typedef ::musicxml::yes_no cancel_type;
    typedef ::xsd::cxx::tree::optional< cancel_type > cancel_optional;
    typedef ::xsd::cxx::tree::traits< cancel_type, char > cancel_traits;

    const cancel_optional&
    cancel () const;

    cancel_optional&
    cancel ();

    void
    cancel (const cancel_type& x);

    void
    cancel (const cancel_optional& x);

    void
    cancel (::std::unique_ptr< cancel_type > p);

    // Constructors.
    //
    key_octave (const ::xml_schema::integer&,
                const number_type&);

    key_octave (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    key_octave (const key_octave& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual key_octave*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    key_octave&
    operator= (const key_octave& x);

    virtual 
    ~key_octave ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< number_type > number_;
    cancel_optional cancel_;
  };

  class line_detail: public ::xml_schema::type
  {
    public:
    // line
    //
    typedef ::musicxml::staff_line line_type;
    typedef ::xsd::cxx::tree::traits< line_type, char > line_traits;

    const line_type&
    line () const;

    line_type&
    line ();

    void
    line (const line_type& x);

    void
    line (::std::unique_ptr< line_type > p);

    // width
    //
    typedef ::musicxml::tenths width_type;
    typedef ::xsd::cxx::tree::optional< width_type > width_optional;
    typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

    const width_optional&
    width () const;

    width_optional&
    width ();

    void
    width (const width_type& x);

    void
    width (const width_optional& x);

    void
    width (::std::unique_ptr< width_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // line-type
    //
    typedef ::musicxml::line_type line_type_type;
    typedef ::xsd::cxx::tree::optional< line_type_type > line_type_optional;
    typedef ::xsd::cxx::tree::traits< line_type_type, char > line_type_traits;

    const line_type_optional&
    line_type1 () const;

    line_type_optional&
    line_type1 ();

    void
    line_type1 (const line_type_type& x);

    void
    line_type1 (const line_type_optional& x);

    void
    line_type1 (::std::unique_ptr< line_type_type > p);

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // Constructors.
    //
    line_detail (const line_type&);

    line_detail (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    line_detail (const line_detail& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual line_detail*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    line_detail&
    operator= (const line_detail& x);

    virtual 
    ~line_detail ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< line_type > line_;
    width_optional width_;
    color_optional color_;
    line_type_optional line_type_;
    print_object_optional print_object_;
  };

  class measure_repeat: public ::musicxml::positive_integer_or_empty
  {
    public:
    // type
    //
    typedef ::musicxml::start_stop type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // slashes
    //
    typedef ::xml_schema::positive_integer slashes_type;
    typedef ::xsd::cxx::tree::optional< slashes_type > slashes_optional;
    typedef ::xsd::cxx::tree::traits< slashes_type, char > slashes_traits;

    const slashes_optional&
    slashes () const;

    slashes_optional&
    slashes ();

    void
    slashes (const slashes_type& x);

    void
    slashes (const slashes_optional& x);

    // Constructors.
    //
    measure_repeat (const char*,
                    const type_type&);

    measure_repeat (const ::std::string&,
                    const type_type&);

    measure_repeat (const ::musicxml::positive_integer_or_empty&,
                    const type_type&);

    measure_repeat (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    measure_repeat (const measure_repeat& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual measure_repeat*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    measure_repeat&
    operator= (const measure_repeat& x);

    virtual 
    ~measure_repeat ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    slashes_optional slashes_;
  };

  class measure_style: public ::xml_schema::type
  {
    public:
    // multiple-rest
    //
    typedef ::musicxml::multiple_rest multiple_rest_type;
    typedef ::xsd::cxx::tree::optional< multiple_rest_type > multiple_rest_optional;
    typedef ::xsd::cxx::tree::traits< multiple_rest_type, char > multiple_rest_traits;

    const multiple_rest_optional&
    multiple_rest () const;

    multiple_rest_optional&
    multiple_rest ();

    void
    multiple_rest (const multiple_rest_type& x);

    void
    multiple_rest (const multiple_rest_optional& x);

    void
    multiple_rest (::std::unique_ptr< multiple_rest_type > p);

    // measure-repeat
    //
    typedef ::musicxml::measure_repeat measure_repeat_type;
    typedef ::xsd::cxx::tree::optional< measure_repeat_type > measure_repeat_optional;
    typedef ::xsd::cxx::tree::traits< measure_repeat_type, char > measure_repeat_traits;

    const measure_repeat_optional&
    measure_repeat () const;

    measure_repeat_optional&
    measure_repeat ();

    void
    measure_repeat (const measure_repeat_type& x);

    void
    measure_repeat (const measure_repeat_optional& x);

    void
    measure_repeat (::std::unique_ptr< measure_repeat_type > p);

    // beat-repeat
    //
    typedef ::musicxml::beat_repeat beat_repeat_type;
    typedef ::xsd::cxx::tree::optional< beat_repeat_type > beat_repeat_optional;
    typedef ::xsd::cxx::tree::traits< beat_repeat_type, char > beat_repeat_traits;

    const beat_repeat_optional&
    beat_repeat () const;

    beat_repeat_optional&
    beat_repeat ();

    void
    beat_repeat (const beat_repeat_type& x);

    void
    beat_repeat (const beat_repeat_optional& x);

    void
    beat_repeat (::std::unique_ptr< beat_repeat_type > p);

    // slash
    //
    typedef ::musicxml::slash slash_type;
    typedef ::xsd::cxx::tree::optional< slash_type > slash_optional;
    typedef ::xsd::cxx::tree::traits< slash_type, char > slash_traits;

    const slash_optional&
    slash () const;

    slash_optional&
    slash ();

    void
    slash (const slash_type& x);

    void
    slash (const slash_optional& x);

    void
    slash (::std::unique_ptr< slash_type > p);

    // number
    //
    typedef ::musicxml::staff_number number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    measure_style ();

    measure_style (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    measure_style (const measure_style& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual measure_style*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    measure_style&
    operator= (const measure_style& x);

    virtual 
    ~measure_style ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    multiple_rest_optional multiple_rest_;
    measure_repeat_optional measure_repeat_;
    beat_repeat_optional beat_repeat_;
    slash_optional slash_;
    number_optional number_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    id_optional id_;
  };

  class multiple_rest: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type >
  {
    public:
    // use-symbols
    //
    typedef ::musicxml::yes_no use_symbols_type;
    typedef ::xsd::cxx::tree::optional< use_symbols_type > use_symbols_optional;
    typedef ::xsd::cxx::tree::traits< use_symbols_type, char > use_symbols_traits;

    const use_symbols_optional&
    use_symbols () const;

    use_symbols_optional&
    use_symbols ();

    void
    use_symbols (const use_symbols_type& x);

    void
    use_symbols (const use_symbols_optional& x);

    void
    use_symbols (::std::unique_ptr< use_symbols_type > p);

    // Constructors.
    //
    multiple_rest (const ::xml_schema::positive_integer&);

    multiple_rest (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    multiple_rest (const multiple_rest& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual multiple_rest*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    multiple_rest&
    operator= (const multiple_rest& x);

    virtual 
    ~multiple_rest ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    use_symbols_optional use_symbols_;
  };

  class part_clef: public ::xml_schema::type
  {
    public:
    // sign
    //
    typedef ::musicxml::clef_sign sign_type;
    typedef ::xsd::cxx::tree::traits< sign_type, char > sign_traits;

    const sign_type&
    sign () const;

    sign_type&
    sign ();

    void
    sign (const sign_type& x);

    void
    sign (::std::unique_ptr< sign_type > p);

    // line
    //
    typedef ::musicxml::staff_line_position line_type;
    typedef ::xsd::cxx::tree::optional< line_type > line_optional;
    typedef ::xsd::cxx::tree::traits< line_type, char > line_traits;

    const line_optional&
    line () const;

    line_optional&
    line ();

    void
    line (const line_type& x);

    void
    line (const line_optional& x);

    void
    line (::std::unique_ptr< line_type > p);

    // clef-octave-change
    //
    typedef ::xml_schema::integer clef_octave_change_type;
    typedef ::xsd::cxx::tree::optional< clef_octave_change_type > clef_octave_change_optional;
    typedef ::xsd::cxx::tree::traits< clef_octave_change_type, char > clef_octave_change_traits;

    const clef_octave_change_optional&
    clef_octave_change () const;

    clef_octave_change_optional&
    clef_octave_change ();

    void
    clef_octave_change (const clef_octave_change_type& x);

    void
    clef_octave_change (const clef_octave_change_optional& x);

    // Constructors.
    //
    part_clef (const sign_type&);

    part_clef (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    part_clef (const part_clef& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual part_clef*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    part_clef&
    operator= (const part_clef& x);

    virtual 
    ~part_clef ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< sign_type > sign_;
    line_optional line_;
    clef_octave_change_optional clef_octave_change_;
  };

  class part_symbol: public ::musicxml::group_symbol_value
  {
    public:
    // top-staff
    //
    typedef ::musicxml::staff_number top_staff_type;
    typedef ::xsd::cxx::tree::optional< top_staff_type > top_staff_optional;
    typedef ::xsd::cxx::tree::traits< top_staff_type, char > top_staff_traits;

    const top_staff_optional&
    top_staff () const;

    top_staff_optional&
    top_staff ();

    void
    top_staff (const top_staff_type& x);

    void
    top_staff (const top_staff_optional& x);

    void
    top_staff (::std::unique_ptr< top_staff_type > p);

    // bottom-staff
    //
    typedef ::musicxml::staff_number bottom_staff_type;
    typedef ::xsd::cxx::tree::optional< bottom_staff_type > bottom_staff_optional;
    typedef ::xsd::cxx::tree::traits< bottom_staff_type, char > bottom_staff_traits;

    const bottom_staff_optional&
    bottom_staff () const;

    bottom_staff_optional&
    bottom_staff ();

    void
    bottom_staff (const bottom_staff_type& x);

    void
    bottom_staff (const bottom_staff_optional& x);

    void
    bottom_staff (::std::unique_ptr< bottom_staff_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    part_symbol (::musicxml::group_symbol_value::value);

    part_symbol (const char*);

    part_symbol (const ::std::string&);

    part_symbol (const ::musicxml::group_symbol_value&);

    part_symbol (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    part_symbol (const part_symbol& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual part_symbol*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    part_symbol&
    operator= (const part_symbol& x);

    virtual 
    ~part_symbol ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    top_staff_optional top_staff_;
    bottom_staff_optional bottom_staff_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    color_optional color_;
  };

  class part_transpose: public ::xml_schema::type
  {
    public:
    // diatonic
    //
    typedef ::xml_schema::integer diatonic_type;
    typedef ::xsd::cxx::tree::optional< diatonic_type > diatonic_optional;
    typedef ::xsd::cxx::tree::traits< diatonic_type, char > diatonic_traits;

    const diatonic_optional&
    diatonic () const;

    diatonic_optional&
    diatonic ();

    void
    diatonic (const diatonic_type& x);

    void
    diatonic (const diatonic_optional& x);

    // chromatic
    //
    typedef ::musicxml::semitones chromatic_type;
    typedef ::xsd::cxx::tree::traits< chromatic_type, char > chromatic_traits;

    const chromatic_type&
    chromatic () const;

    chromatic_type&
    chromatic ();

    void
    chromatic (const chromatic_type& x);

    void
    chromatic (::std::unique_ptr< chromatic_type > p);

    // octave-change
    //
    typedef ::xml_schema::integer octave_change_type;
    typedef ::xsd::cxx::tree::optional< octave_change_type > octave_change_optional;
    typedef ::xsd::cxx::tree::traits< octave_change_type, char > octave_change_traits;

    const octave_change_optional&
    octave_change () const;

    octave_change_optional&
    octave_change ();

    void
    octave_change (const octave_change_type& x);

    void
    octave_change (const octave_change_optional& x);

    // double
    //
    typedef ::musicxml::double_ double_type;
    typedef ::xsd::cxx::tree::optional< double_type > double_optional;
    typedef ::xsd::cxx::tree::traits< double_type, char > double_traits;

    const double_optional&
    double_ () const;

    double_optional&
    double_ ();

    void
    double_ (const double_type& x);

    void
    double_ (const double_optional& x);

    void
    double_ (::std::unique_ptr< double_type > p);

    // Constructors.
    //
    part_transpose (const chromatic_type&);

    part_transpose (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    part_transpose (const part_transpose& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual part_transpose*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    part_transpose&
    operator= (const part_transpose& x);

    virtual 
    ~part_transpose ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    diatonic_optional diatonic_;
    ::xsd::cxx::tree::one< chromatic_type > chromatic_;
    octave_change_optional octave_change_;
    double_optional double__;
  };

  class slash: public ::xml_schema::type
  {
    public:
    // slash-type
    //
    typedef ::musicxml::note_type_value slash_type_type;
    typedef ::xsd::cxx::tree::optional< slash_type_type > slash_type_optional;
    typedef ::xsd::cxx::tree::traits< slash_type_type, char > slash_type_traits;

    const slash_type_optional&
    slash_type () const;

    slash_type_optional&
    slash_type ();

    void
    slash_type (const slash_type_type& x);

    void
    slash_type (const slash_type_optional& x);

    void
    slash_type (::std::unique_ptr< slash_type_type > p);

    // slash-dot
    //
    typedef ::musicxml::empty slash_dot_type;
    typedef ::xsd::cxx::tree::sequence< slash_dot_type > slash_dot_sequence;
    typedef slash_dot_sequence::iterator slash_dot_iterator;
    typedef slash_dot_sequence::const_iterator slash_dot_const_iterator;
    typedef ::xsd::cxx::tree::traits< slash_dot_type, char > slash_dot_traits;

    const slash_dot_sequence&
    slash_dot () const;

    slash_dot_sequence&
    slash_dot ();

    void
    slash_dot (const slash_dot_sequence& s);

    // except-voice
    //
    typedef ::xml_schema::string except_voice_type;
    typedef ::xsd::cxx::tree::sequence< except_voice_type > except_voice_sequence;
    typedef except_voice_sequence::iterator except_voice_iterator;
    typedef except_voice_sequence::const_iterator except_voice_const_iterator;
    typedef ::xsd::cxx::tree::traits< except_voice_type, char > except_voice_traits;

    const except_voice_sequence&
    except_voice () const;

    except_voice_sequence&
    except_voice ();

    void
    except_voice (const except_voice_sequence& s);

    // type
    //
    typedef ::musicxml::start_stop type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // use-dots
    //
    typedef ::musicxml::yes_no use_dots_type;
    typedef ::xsd::cxx::tree::optional< use_dots_type > use_dots_optional;
    typedef ::xsd::cxx::tree::traits< use_dots_type, char > use_dots_traits;

    const use_dots_optional&
    use_dots () const;

    use_dots_optional&
    use_dots ();

    void
    use_dots (const use_dots_type& x);

    void
    use_dots (const use_dots_optional& x);

    void
    use_dots (::std::unique_ptr< use_dots_type > p);

    // use-stems
    //
    typedef ::musicxml::yes_no use_stems_type;
    typedef ::xsd::cxx::tree::optional< use_stems_type > use_stems_optional;
    typedef ::xsd::cxx::tree::traits< use_stems_type, char > use_stems_traits;

    const use_stems_optional&
    use_stems () const;

    use_stems_optional&
    use_stems ();

    void
    use_stems (const use_stems_type& x);

    void
    use_stems (const use_stems_optional& x);

    void
    use_stems (::std::unique_ptr< use_stems_type > p);

    // Constructors.
    //
    slash (const type_type&);

    slash (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    slash (const slash& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual slash*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    slash&
    operator= (const slash& x);

    virtual 
    ~slash ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    slash_type_optional slash_type_;
    slash_dot_sequence slash_dot_;
    except_voice_sequence except_voice_;
    ::xsd::cxx::tree::one< type_type > type_;
    use_dots_optional use_dots_;
    use_stems_optional use_stems_;
  };

  class staff_details: public ::xml_schema::type
  {
    public:
    // staff-type
    //
    typedef ::musicxml::staff_type staff_type_type;
    typedef ::xsd::cxx::tree::optional< staff_type_type > staff_type_optional;
    typedef ::xsd::cxx::tree::traits< staff_type_type, char > staff_type_traits;

    const staff_type_optional&
    staff_type () const;

    staff_type_optional&
    staff_type ();

    void
    staff_type (const staff_type_type& x);

    void
    staff_type (const staff_type_optional& x);

    void
    staff_type (::std::unique_ptr< staff_type_type > p);

    // staff-lines
    //
    typedef ::xml_schema::non_negative_integer staff_lines_type;
    typedef ::xsd::cxx::tree::optional< staff_lines_type > staff_lines_optional;
    typedef ::xsd::cxx::tree::traits< staff_lines_type, char > staff_lines_traits;

    const staff_lines_optional&
    staff_lines () const;

    staff_lines_optional&
    staff_lines ();

    void
    staff_lines (const staff_lines_type& x);

    void
    staff_lines (const staff_lines_optional& x);

    // line-detail
    //
    typedef ::musicxml::line_detail line_detail_type;
    typedef ::xsd::cxx::tree::sequence< line_detail_type > line_detail_sequence;
    typedef line_detail_sequence::iterator line_detail_iterator;
    typedef line_detail_sequence::const_iterator line_detail_const_iterator;
    typedef ::xsd::cxx::tree::traits< line_detail_type, char > line_detail_traits;

    const line_detail_sequence&
    line_detail () const;

    line_detail_sequence&
    line_detail ();

    void
    line_detail (const line_detail_sequence& s);

    // staff-tuning
    //
    typedef ::musicxml::staff_tuning staff_tuning_type;
    typedef ::xsd::cxx::tree::sequence< staff_tuning_type > staff_tuning_sequence;
    typedef staff_tuning_sequence::iterator staff_tuning_iterator;
    typedef staff_tuning_sequence::const_iterator staff_tuning_const_iterator;
    typedef ::xsd::cxx::tree::traits< staff_tuning_type, char > staff_tuning_traits;

    const staff_tuning_sequence&
    staff_tuning () const;

    staff_tuning_sequence&
    staff_tuning ();

    void
    staff_tuning (const staff_tuning_sequence& s);

    // capo
    //
    typedef ::xml_schema::non_negative_integer capo_type;
    typedef ::xsd::cxx::tree::optional< capo_type > capo_optional;
    typedef ::xsd::cxx::tree::traits< capo_type, char > capo_traits;

    const capo_optional&
    capo () const;

    capo_optional&
    capo ();

    void
    capo (const capo_type& x);

    void
    capo (const capo_optional& x);

    // staff-size
    //
    typedef ::musicxml::staff_size staff_size_type;
    typedef ::xsd::cxx::tree::optional< staff_size_type > staff_size_optional;
    typedef ::xsd::cxx::tree::traits< staff_size_type, char > staff_size_traits;

    const staff_size_optional&
    staff_size () const;

    staff_size_optional&
    staff_size ();

    void
    staff_size (const staff_size_type& x);

    void
    staff_size (const staff_size_optional& x);

    void
    staff_size (::std::unique_ptr< staff_size_type > p);

    // number
    //
    typedef ::musicxml::staff_number number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // show-frets
    //
    typedef ::musicxml::show_frets show_frets_type;
    typedef ::xsd::cxx::tree::optional< show_frets_type > show_frets_optional;
    typedef ::xsd::cxx::tree::traits< show_frets_type, char > show_frets_traits;

    const show_frets_optional&
    show_frets () const;

    show_frets_optional&
    show_frets ();

    void
    show_frets (const show_frets_type& x);

    void
    show_frets (const show_frets_optional& x);

    void
    show_frets (::std::unique_ptr< show_frets_type > p);

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // print-spacing
    //
    typedef ::musicxml::yes_no print_spacing_type;
    typedef ::xsd::cxx::tree::optional< print_spacing_type > print_spacing_optional;
    typedef ::xsd::cxx::tree::traits< print_spacing_type, char > print_spacing_traits;

    const print_spacing_optional&
    print_spacing () const;

    print_spacing_optional&
    print_spacing ();

    void
    print_spacing (const print_spacing_type& x);

    void
    print_spacing (const print_spacing_optional& x);

    void
    print_spacing (::std::unique_ptr< print_spacing_type > p);

    // Constructors.
    //
    staff_details ();

    staff_details (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    staff_details (const staff_details& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual staff_details*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    staff_details&
    operator= (const staff_details& x);

    virtual 
    ~staff_details ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    staff_type_optional staff_type_;
    staff_lines_optional staff_lines_;
    line_detail_sequence line_detail_;
    staff_tuning_sequence staff_tuning_;
    capo_optional capo_;
    staff_size_optional staff_size_;
    number_optional number_;
    show_frets_optional show_frets_;
    print_object_optional print_object_;
    print_spacing_optional print_spacing_;
  };

  class staff_size: public ::musicxml::non_negative_decimal
  {
    public:
    // scaling
    //
    typedef ::musicxml::non_negative_decimal scaling_type;
    typedef ::xsd::cxx::tree::optional< scaling_type > scaling_optional;
    typedef ::xsd::cxx::tree::traits< scaling_type, char > scaling_traits;

    const scaling_optional&
    scaling () const;

    scaling_optional&
    scaling ();

    void
    scaling (const scaling_type& x);

    void
    scaling (const scaling_optional& x);

    void
    scaling (::std::unique_ptr< scaling_type > p);

    // Constructors.
    //
    staff_size (const ::xml_schema::decimal&);

    staff_size (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    staff_size (const staff_size& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual staff_size*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    staff_size&
    operator= (const staff_size& x);

    virtual 
    ~staff_size ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    scaling_optional scaling_;
  };

  class staff_tuning: public ::xml_schema::type
  {
    public:
    // tuning-step
    //
    typedef ::musicxml::step tuning_step_type;
    typedef ::xsd::cxx::tree::traits< tuning_step_type, char > tuning_step_traits;

    const tuning_step_type&
    tuning_step () const;

    tuning_step_type&
    tuning_step ();

    void
    tuning_step (const tuning_step_type& x);

    void
    tuning_step (::std::unique_ptr< tuning_step_type > p);

    // tuning-alter
    //
    typedef ::musicxml::semitones tuning_alter_type;
    typedef ::xsd::cxx::tree::optional< tuning_alter_type > tuning_alter_optional;
    typedef ::xsd::cxx::tree::traits< tuning_alter_type, char > tuning_alter_traits;

    const tuning_alter_optional&
    tuning_alter () const;

    tuning_alter_optional&
    tuning_alter ();

    void
    tuning_alter (const tuning_alter_type& x);

    void
    tuning_alter (const tuning_alter_optional& x);

    void
    tuning_alter (::std::unique_ptr< tuning_alter_type > p);

    // tuning-octave
    //
    typedef ::musicxml::octave tuning_octave_type;
    typedef ::xsd::cxx::tree::traits< tuning_octave_type, char > tuning_octave_traits;

    const tuning_octave_type&
    tuning_octave () const;

    tuning_octave_type&
    tuning_octave ();

    void
    tuning_octave (const tuning_octave_type& x);

    void
    tuning_octave (::std::unique_ptr< tuning_octave_type > p);

    // line
    //
    typedef ::musicxml::staff_line line_type;
    typedef ::xsd::cxx::tree::traits< line_type, char > line_traits;

    const line_type&
    line () const;

    line_type&
    line ();

    void
    line (const line_type& x);

    void
    line (::std::unique_ptr< line_type > p);

    // Constructors.
    //
    staff_tuning (const tuning_step_type&,
                  const tuning_octave_type&,
                  const line_type&);

    staff_tuning (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    staff_tuning (const staff_tuning& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual staff_tuning*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    staff_tuning&
    operator= (const staff_tuning& x);

    virtual 
    ~staff_tuning ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< tuning_step_type > tuning_step_;
    tuning_alter_optional tuning_alter_;
    ::xsd::cxx::tree::one< tuning_octave_type > tuning_octave_;
    ::xsd::cxx::tree::one< line_type > line_;
  };

  class time: public ::xml_schema::type
  {
    public:
    // beats
    //
    typedef ::xml_schema::string beats_type;
    typedef ::xsd::cxx::tree::sequence< beats_type > beats_sequence;
    typedef beats_sequence::iterator beats_iterator;
    typedef beats_sequence::const_iterator beats_const_iterator;
    typedef ::xsd::cxx::tree::traits< beats_type, char > beats_traits;

    const beats_sequence&
    beats () const;

    beats_sequence&
    beats ();

    void
    beats (const beats_sequence& s);

    // beat-type
    //
    typedef ::xml_schema::string beat_type_type;
    typedef ::xsd::cxx::tree::sequence< beat_type_type > beat_type_sequence;
    typedef beat_type_sequence::iterator beat_type_iterator;
    typedef beat_type_sequence::const_iterator beat_type_const_iterator;
    typedef ::xsd::cxx::tree::traits< beat_type_type, char > beat_type_traits;

    const beat_type_sequence&
    beat_type () const;

    beat_type_sequence&
    beat_type ();

    void
    beat_type (const beat_type_sequence& s);

    // interchangeable
    //
    typedef ::musicxml::interchangeable interchangeable_type;
    typedef ::xsd::cxx::tree::optional< interchangeable_type > interchangeable_optional;
    typedef ::xsd::cxx::tree::traits< interchangeable_type, char > interchangeable_traits;

    const interchangeable_optional&
    interchangeable () const;

    interchangeable_optional&
    interchangeable ();

    void
    interchangeable (const interchangeable_type& x);

    void
    interchangeable (const interchangeable_optional& x);

    void
    interchangeable (::std::unique_ptr< interchangeable_type > p);

    // senza-misura
    //
    typedef ::xml_schema::string senza_misura_type;
    typedef ::xsd::cxx::tree::optional< senza_misura_type > senza_misura_optional;
    typedef ::xsd::cxx::tree::traits< senza_misura_type, char > senza_misura_traits;

    const senza_misura_optional&
    senza_misura () const;

    senza_misura_optional&
    senza_misura ();

    void
    senza_misura (const senza_misura_type& x);

    void
    senza_misura (const senza_misura_optional& x);

    void
    senza_misura (::std::unique_ptr< senza_misura_type > p);

    // number
    //
    typedef ::musicxml::staff_number number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // symbol
    //
    typedef ::musicxml::time_symbol symbol_type;
    typedef ::xsd::cxx::tree::optional< symbol_type > symbol_optional;
    typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

    const symbol_optional&
    symbol () const;

    symbol_optional&
    symbol ();

    void
    symbol (const symbol_type& x);

    void
    symbol (const symbol_optional& x);

    void
    symbol (::std::unique_ptr< symbol_type > p);

    // separator
    //
    typedef ::musicxml::time_separator separator_type;
    typedef ::xsd::cxx::tree::optional< separator_type > separator_optional;
    typedef ::xsd::cxx::tree::traits< separator_type, char > separator_traits;

    const separator_optional&
    separator () const;

    separator_optional&
    separator ();

    void
    separator (const separator_type& x);

    void
    separator (const separator_optional& x);

    void
    separator (::std::unique_ptr< separator_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    time ();

    time (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    time (const time& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual time*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    time&
    operator= (const time& x);

    virtual 
    ~time ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    beats_sequence beats_;
    beat_type_sequence beat_type_;
    interchangeable_optional interchangeable_;
    senza_misura_optional senza_misura_;
    number_optional number_;
    symbol_optional symbol_;
    separator_optional separator_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    print_object_optional print_object_;
    id_optional id_;
  };

  class transpose: public ::xml_schema::type
  {
    public:
    // diatonic
    //
    typedef ::xml_schema::integer diatonic_type;
    typedef ::xsd::cxx::tree::optional< diatonic_type > diatonic_optional;
    typedef ::xsd::cxx::tree::traits< diatonic_type, char > diatonic_traits;

    const diatonic_optional&
    diatonic () const;

    diatonic_optional&
    diatonic ();

    void
    diatonic (const diatonic_type& x);

    void
    diatonic (const diatonic_optional& x);

    // chromatic
    //
    typedef ::musicxml::semitones chromatic_type;
    typedef ::xsd::cxx::tree::traits< chromatic_type, char > chromatic_traits;

    const chromatic_type&
    chromatic () const;

    chromatic_type&
    chromatic ();

    void
    chromatic (const chromatic_type& x);

    void
    chromatic (::std::unique_ptr< chromatic_type > p);

    // octave-change
    //
    typedef ::xml_schema::integer octave_change_type;
    typedef ::xsd::cxx::tree::optional< octave_change_type > octave_change_optional;
    typedef ::xsd::cxx::tree::traits< octave_change_type, char > octave_change_traits;

    const octave_change_optional&
    octave_change () const;

    octave_change_optional&
    octave_change ();

    void
    octave_change (const octave_change_type& x);

    void
    octave_change (const octave_change_optional& x);

    // double
    //
    typedef ::musicxml::double_ double_type;
    typedef ::xsd::cxx::tree::optional< double_type > double_optional;
    typedef ::xsd::cxx::tree::traits< double_type, char > double_traits;

    const double_optional&
    double_ () const;

    double_optional&
    double_ ();

    void
    double_ (const double_type& x);

    void
    double_ (const double_optional& x);

    void
    double_ (::std::unique_ptr< double_type > p);

    // number
    //
    typedef ::musicxml::staff_number number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    transpose (const chromatic_type&);

    transpose (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    transpose (const transpose& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual transpose*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    transpose&
    operator= (const transpose& x);

    virtual 
    ~transpose ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    diatonic_optional diatonic_;
    ::xsd::cxx::tree::one< chromatic_type > chromatic_;
    octave_change_optional octave_change_;
    double_optional double__;
    number_optional number_;
    id_optional id_;
  };

  class bar_style_color: public ::musicxml::bar_style
  {
    public:
    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    bar_style_color (::musicxml::bar_style::value);

    bar_style_color (const char*);

    bar_style_color (const ::std::string&);

    bar_style_color (const ::musicxml::bar_style&);

    bar_style_color (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    bar_style_color (const bar_style_color& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual bar_style_color*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    bar_style_color&
    operator= (const bar_style_color& x);

    virtual 
    ~bar_style_color ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    color_optional color_;
  };

  class barline: public ::xml_schema::type
  {
    public:
    // bar-style
    //
    typedef ::musicxml::bar_style_color bar_style_type;
    typedef ::xsd::cxx::tree::optional< bar_style_type > bar_style_optional;
    typedef ::xsd::cxx::tree::traits< bar_style_type, char > bar_style_traits;

    const bar_style_optional&
    bar_style () const;

    bar_style_optional&
    bar_style ();

    void
    bar_style (const bar_style_type& x);

    void
    bar_style (const bar_style_optional& x);

    void
    bar_style (::std::unique_ptr< bar_style_type > p);

    // footnote
    //
    typedef ::musicxml::formatted_text footnote_type;
    typedef ::xsd::cxx::tree::optional< footnote_type > footnote_optional;
    typedef ::xsd::cxx::tree::traits< footnote_type, char > footnote_traits;

    const footnote_optional&
    footnote () const;

    footnote_optional&
    footnote ();

    void
    footnote (const footnote_type& x);

    void
    footnote (const footnote_optional& x);

    void
    footnote (::std::unique_ptr< footnote_type > p);

    // level
    //
    typedef ::musicxml::level level_type;
    typedef ::xsd::cxx::tree::optional< level_type > level_optional;
    typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

    const level_optional&
    level () const;

    level_optional&
    level ();

    void
    level (const level_type& x);

    void
    level (const level_optional& x);

    void
    level (::std::unique_ptr< level_type > p);

    // wavy-line
    //
    typedef ::musicxml::wavy_line wavy_line_type;
    typedef ::xsd::cxx::tree::optional< wavy_line_type > wavy_line_optional;
    typedef ::xsd::cxx::tree::traits< wavy_line_type, char > wavy_line_traits;

    const wavy_line_optional&
    wavy_line () const;

    wavy_line_optional&
    wavy_line ();

    void
    wavy_line (const wavy_line_type& x);

    void
    wavy_line (const wavy_line_optional& x);

    void
    wavy_line (::std::unique_ptr< wavy_line_type > p);

    // segno
    //
    typedef ::musicxml::segno segno_type;
    typedef ::xsd::cxx::tree::optional< segno_type > segno_optional;
    typedef ::xsd::cxx::tree::traits< segno_type, char > segno_traits;

    const segno_optional&
    segno () const;

    segno_optional&
    segno ();

    void
    segno (const segno_type& x);

    void
    segno (const segno_optional& x);

    void
    segno (::std::unique_ptr< segno_type > p);

    // coda
    //
    typedef ::musicxml::coda coda_type;
    typedef ::xsd::cxx::tree::optional< coda_type > coda_optional;
    typedef ::xsd::cxx::tree::traits< coda_type, char > coda_traits;

    const coda_optional&
    coda () const;

    coda_optional&
    coda ();

    void
    coda (const coda_type& x);

    void
    coda (const coda_optional& x);

    void
    coda (::std::unique_ptr< coda_type > p);

    // fermata
    //
    typedef ::musicxml::fermata fermata_type;
    typedef ::xsd::cxx::tree::sequence< fermata_type > fermata_sequence;
    typedef fermata_sequence::iterator fermata_iterator;
    typedef fermata_sequence::const_iterator fermata_const_iterator;
    typedef ::xsd::cxx::tree::traits< fermata_type, char > fermata_traits;

    const fermata_sequence&
    fermata () const;

    fermata_sequence&
    fermata ();

    void
    fermata (const fermata_sequence& s);

    // ending
    //
    typedef ::musicxml::ending ending_type;
    typedef ::xsd::cxx::tree::optional< ending_type > ending_optional;
    typedef ::xsd::cxx::tree::traits< ending_type, char > ending_traits;

    const ending_optional&
    ending () const;

    ending_optional&
    ending ();

    void
    ending (const ending_type& x);

    void
    ending (const ending_optional& x);

    void
    ending (::std::unique_ptr< ending_type > p);

    // repeat
    //
    typedef ::musicxml::repeat repeat_type;
    typedef ::xsd::cxx::tree::optional< repeat_type > repeat_optional;
    typedef ::xsd::cxx::tree::traits< repeat_type, char > repeat_traits;

    const repeat_optional&
    repeat () const;

    repeat_optional&
    repeat ();

    void
    repeat (const repeat_type& x);

    void
    repeat (const repeat_optional& x);

    void
    repeat (::std::unique_ptr< repeat_type > p);

    // location
    //
    typedef ::musicxml::right_left_middle location_type;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_type&
    location () const;

    location_type&
    location ();

    void
    location (const location_type& x);

    void
    location (::std::unique_ptr< location_type > p);

    static const location_type&
    location_default_value ();

    // segno
    //
    typedef ::xml_schema::token segno1_type;
    typedef ::xsd::cxx::tree::optional< segno1_type > segno1_optional;
    typedef ::xsd::cxx::tree::traits< segno1_type, char > segno1_traits;

    const segno1_optional&
    segno1 () const;

    segno1_optional&
    segno1 ();

    void
    segno1 (const segno1_type& x);

    void
    segno1 (const segno1_optional& x);

    void
    segno1 (::std::unique_ptr< segno1_type > p);

    // coda
    //
    typedef ::xml_schema::token coda1_type;
    typedef ::xsd::cxx::tree::optional< coda1_type > coda1_optional;
    typedef ::xsd::cxx::tree::traits< coda1_type, char > coda1_traits;

    const coda1_optional&
    coda1 () const;

    coda1_optional&
    coda1 ();

    void
    coda1 (const coda1_type& x);

    void
    coda1 (const coda1_optional& x);

    void
    coda1 (::std::unique_ptr< coda1_type > p);

    // divisions
    //
    typedef ::musicxml::divisions divisions_type;
    typedef ::xsd::cxx::tree::optional< divisions_type > divisions_optional;
    typedef ::xsd::cxx::tree::traits< divisions_type, char > divisions_traits;

    const divisions_optional&
    divisions () const;

    divisions_optional&
    divisions ();

    void
    divisions (const divisions_type& x);

    void
    divisions (const divisions_optional& x);

    void
    divisions (::std::unique_ptr< divisions_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    barline ();

    barline (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    barline (const barline& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual barline*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    barline&
    operator= (const barline& x);

    virtual 
    ~barline ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    bar_style_optional bar_style_;
    footnote_optional footnote_;
    level_optional level_;
    wavy_line_optional wavy_line_;
    segno_optional segno_;
    coda_optional coda_;
    fermata_sequence fermata_;
    ending_optional ending_;
    repeat_optional repeat_;
    ::xsd::cxx::tree::one< location_type > location_;
    static const location_type location_default_value_;
    segno1_optional segno1_;
    coda1_optional coda1_;
    divisions_optional divisions_;
    id_optional id_;
  };

  class ending: public ::xml_schema::string
  {
    public:
    // number
    //
    typedef ::musicxml::ending_number number_type;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_type&
    number () const;

    number_type&
    number ();

    void
    number (const number_type& x);

    void
    number (::std::unique_ptr< number_type > p);

    // type
    //
    typedef ::musicxml::start_stop_discontinue type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // system
    //
    typedef ::musicxml::system_relation system_type;
    typedef ::xsd::cxx::tree::optional< system_type > system_optional;
    typedef ::xsd::cxx::tree::traits< system_type, char > system_traits;

    const system_optional&
    system () const;

    system_optional&
    system ();

    void
    system (const system_type& x);

    void
    system (const system_optional& x);

    void
    system (::std::unique_ptr< system_type > p);

    // end-length
    //
    typedef ::musicxml::tenths end_length_type;
    typedef ::xsd::cxx::tree::optional< end_length_type > end_length_optional;
    typedef ::xsd::cxx::tree::traits< end_length_type, char > end_length_traits;

    const end_length_optional&
    end_length () const;

    end_length_optional&
    end_length ();

    void
    end_length (const end_length_type& x);

    void
    end_length (const end_length_optional& x);

    void
    end_length (::std::unique_ptr< end_length_type > p);

    // text-x
    //
    typedef ::musicxml::tenths text_x_type;
    typedef ::xsd::cxx::tree::optional< text_x_type > text_x_optional;
    typedef ::xsd::cxx::tree::traits< text_x_type, char > text_x_traits;

    const text_x_optional&
    text_x () const;

    text_x_optional&
    text_x ();

    void
    text_x (const text_x_type& x);

    void
    text_x (const text_x_optional& x);

    void
    text_x (::std::unique_ptr< text_x_type > p);

    // text-y
    //
    typedef ::musicxml::tenths text_y_type;
    typedef ::xsd::cxx::tree::optional< text_y_type > text_y_optional;
    typedef ::xsd::cxx::tree::traits< text_y_type, char > text_y_traits;

    const text_y_optional&
    text_y () const;

    text_y_optional&
    text_y ();

    void
    text_y (const text_y_type& x);

    void
    text_y (const text_y_optional& x);

    void
    text_y (::std::unique_ptr< text_y_type > p);

    // Constructors.
    //
    ending (const number_type&,
            const type_type&);

    ending (const char*,
            const number_type&,
            const type_type&);

    ending (const ::std::string&,
            const number_type&,
            const type_type&);

    ending (const ::xml_schema::string&,
            const number_type&,
            const type_type&);

    ending (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    ending (const ending& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual ending*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ending&
    operator= (const ending& x);

    virtual 
    ~ending ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< number_type > number_;
    ::xsd::cxx::tree::one< type_type > type_;
    print_object_optional print_object_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    system_optional system_;
    end_length_optional end_length_;
    text_x_optional text_x_;
    text_y_optional text_y_;
  };

  class repeat: public ::xml_schema::type
  {
    public:
    // direction
    //
    typedef ::musicxml::backward_forward direction_type;
    typedef ::xsd::cxx::tree::traits< direction_type, char > direction_traits;

    const direction_type&
    direction () const;

    direction_type&
    direction ();

    void
    direction (const direction_type& x);

    void
    direction (::std::unique_ptr< direction_type > p);

    // times
    //
    typedef ::xml_schema::non_negative_integer times_type;
    typedef ::xsd::cxx::tree::optional< times_type > times_optional;
    typedef ::xsd::cxx::tree::traits< times_type, char > times_traits;

    const times_optional&
    times () const;

    times_optional&
    times ();

    void
    times (const times_type& x);

    void
    times (const times_optional& x);

    // after-jump
    //
    typedef ::musicxml::yes_no after_jump_type;
    typedef ::xsd::cxx::tree::optional< after_jump_type > after_jump_optional;
    typedef ::xsd::cxx::tree::traits< after_jump_type, char > after_jump_traits;

    const after_jump_optional&
    after_jump () const;

    after_jump_optional&
    after_jump ();

    void
    after_jump (const after_jump_type& x);

    void
    after_jump (const after_jump_optional& x);

    void
    after_jump (::std::unique_ptr< after_jump_type > p);

    // winged
    //
    typedef ::musicxml::winged winged_type;
    typedef ::xsd::cxx::tree::optional< winged_type > winged_optional;
    typedef ::xsd::cxx::tree::traits< winged_type, char > winged_traits;

    const winged_optional&
    winged () const;

    winged_optional&
    winged ();

    void
    winged (const winged_type& x);

    void
    winged (const winged_optional& x);

    void
    winged (::std::unique_ptr< winged_type > p);

    // Constructors.
    //
    repeat (const direction_type&);

    repeat (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    repeat (const repeat& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual repeat*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    repeat&
    operator= (const repeat& x);

    virtual 
    ~repeat ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< direction_type > direction_;
    times_optional times_;
    after_jump_optional after_jump_;
    winged_optional winged_;
  };

  class accord: public ::xml_schema::type
  {
    public:
    // tuning-step
    //
    typedef ::musicxml::step tuning_step_type;
    typedef ::xsd::cxx::tree::traits< tuning_step_type, char > tuning_step_traits;

    const tuning_step_type&
    tuning_step () const;

    tuning_step_type&
    tuning_step ();

    void
    tuning_step (const tuning_step_type& x);

    void
    tuning_step (::std::unique_ptr< tuning_step_type > p);

    // tuning-alter
    //
    typedef ::musicxml::semitones tuning_alter_type;
    typedef ::xsd::cxx::tree::optional< tuning_alter_type > tuning_alter_optional;
    typedef ::xsd::cxx::tree::traits< tuning_alter_type, char > tuning_alter_traits;

    const tuning_alter_optional&
    tuning_alter () const;

    tuning_alter_optional&
    tuning_alter ();

    void
    tuning_alter (const tuning_alter_type& x);

    void
    tuning_alter (const tuning_alter_optional& x);

    void
    tuning_alter (::std::unique_ptr< tuning_alter_type > p);

    // tuning-octave
    //
    typedef ::musicxml::octave tuning_octave_type;
    typedef ::xsd::cxx::tree::traits< tuning_octave_type, char > tuning_octave_traits;

    const tuning_octave_type&
    tuning_octave () const;

    tuning_octave_type&
    tuning_octave ();

    void
    tuning_octave (const tuning_octave_type& x);

    void
    tuning_octave (::std::unique_ptr< tuning_octave_type > p);

    // string
    //
    typedef ::musicxml::string_number string_type;
    typedef ::xsd::cxx::tree::optional< string_type > string_optional;
    typedef ::xsd::cxx::tree::traits< string_type, char > string_traits;

    const string_optional&
    string () const;

    string_optional&
    string ();

    void
    string (const string_type& x);

    void
    string (const string_optional& x);

    void
    string (::std::unique_ptr< string_type > p);

    // Constructors.
    //
    accord (const tuning_step_type&,
            const tuning_octave_type&);

    accord (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    accord (const accord& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual accord*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    accord&
    operator= (const accord& x);

    virtual 
    ~accord ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< tuning_step_type > tuning_step_;
    tuning_alter_optional tuning_alter_;
    ::xsd::cxx::tree::one< tuning_octave_type > tuning_octave_;
    string_optional string_;
  };

  class accordion_registration: public ::xml_schema::type
  {
    public:
    // accordion-high
    //
    typedef ::musicxml::empty accordion_high_type;
    typedef ::xsd::cxx::tree::optional< accordion_high_type > accordion_high_optional;
    typedef ::xsd::cxx::tree::traits< accordion_high_type, char > accordion_high_traits;

    const accordion_high_optional&
    accordion_high () const;

    accordion_high_optional&
    accordion_high ();

    void
    accordion_high (const accordion_high_type& x);

    void
    accordion_high (const accordion_high_optional& x);

    void
    accordion_high (::std::unique_ptr< accordion_high_type > p);

    // accordion-middle
    //
    typedef ::musicxml::accordion_middle accordion_middle_type;
    typedef ::xsd::cxx::tree::optional< accordion_middle_type > accordion_middle_optional;
    typedef ::xsd::cxx::tree::traits< accordion_middle_type, char > accordion_middle_traits;

    const accordion_middle_optional&
    accordion_middle () const;

    accordion_middle_optional&
    accordion_middle ();

    void
    accordion_middle (const accordion_middle_type& x);

    void
    accordion_middle (const accordion_middle_optional& x);

    void
    accordion_middle (::std::unique_ptr< accordion_middle_type > p);

    // accordion-low
    //
    typedef ::musicxml::empty accordion_low_type;
    typedef ::xsd::cxx::tree::optional< accordion_low_type > accordion_low_optional;
    typedef ::xsd::cxx::tree::traits< accordion_low_type, char > accordion_low_traits;

    const accordion_low_optional&
    accordion_low () const;

    accordion_low_optional&
    accordion_low ();

    void
    accordion_low (const accordion_low_type& x);

    void
    accordion_low (const accordion_low_optional& x);

    void
    accordion_low (::std::unique_ptr< accordion_low_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    accordion_registration ();

    accordion_registration (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    accordion_registration (const accordion_registration& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual accordion_registration*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    accordion_registration&
    operator= (const accordion_registration& x);

    virtual 
    ~accordion_registration ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    accordion_high_optional accordion_high_;
    accordion_middle_optional accordion_middle_;
    accordion_low_optional accordion_low_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    id_optional id_;
  };

  class barre: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::start_stop type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    barre (const type_type&);

    barre (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    barre (const barre& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual barre*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    barre&
    operator= (const barre& x);

    virtual 
    ~barre ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    color_optional color_;
  };

  class bass: public ::xml_schema::type
  {
    public:
    // bass-separator
    //
    typedef ::musicxml::style_text bass_separator_type;
    typedef ::xsd::cxx::tree::optional< bass_separator_type > bass_separator_optional;
    typedef ::xsd::cxx::tree::traits< bass_separator_type, char > bass_separator_traits;

    const bass_separator_optional&
    bass_separator () const;

    bass_separator_optional&
    bass_separator ();

    void
    bass_separator (const bass_separator_type& x);

    void
    bass_separator (const bass_separator_optional& x);

    void
    bass_separator (::std::unique_ptr< bass_separator_type > p);

    // bass-step
    //
    typedef ::musicxml::bass_step bass_step_type;
    typedef ::xsd::cxx::tree::traits< bass_step_type, char > bass_step_traits;

    const bass_step_type&
    bass_step () const;

    bass_step_type&
    bass_step ();

    void
    bass_step (const bass_step_type& x);

    void
    bass_step (::std::unique_ptr< bass_step_type > p);

    // bass-alter
    //
    typedef ::musicxml::harmony_alter bass_alter_type;
    typedef ::xsd::cxx::tree::optional< bass_alter_type > bass_alter_optional;
    typedef ::xsd::cxx::tree::traits< bass_alter_type, char > bass_alter_traits;

    const bass_alter_optional&
    bass_alter () const;

    bass_alter_optional&
    bass_alter ();

    void
    bass_alter (const bass_alter_type& x);

    void
    bass_alter (const bass_alter_optional& x);

    void
    bass_alter (::std::unique_ptr< bass_alter_type > p);

    // arrangement
    //
    typedef ::musicxml::harmony_arrangement arrangement_type;
    typedef ::xsd::cxx::tree::optional< arrangement_type > arrangement_optional;
    typedef ::xsd::cxx::tree::traits< arrangement_type, char > arrangement_traits;

    const arrangement_optional&
    arrangement () const;

    arrangement_optional&
    arrangement ();

    void
    arrangement (const arrangement_type& x);

    void
    arrangement (const arrangement_optional& x);

    void
    arrangement (::std::unique_ptr< arrangement_type > p);

    // Constructors.
    //
    bass (const bass_step_type&);

    bass (::std::unique_ptr< bass_step_type >);

    bass (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    bass (const bass& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual bass*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    bass&
    operator= (const bass& x);

    virtual 
    ~bass ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    bass_separator_optional bass_separator_;
    ::xsd::cxx::tree::one< bass_step_type > bass_step_;
    bass_alter_optional bass_alter_;
    arrangement_optional arrangement_;
  };

  class harmony_alter: public ::musicxml::semitones
  {
    public:
    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // location
    //
    typedef ::musicxml::left_right location_type;
    typedef ::xsd::cxx::tree::optional< location_type > location_optional;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_optional&
    location () const;

    location_optional&
    location ();

    void
    location (const location_type& x);

    void
    location (const location_optional& x);

    void
    location (::std::unique_ptr< location_type > p);

    // Constructors.
    //
    harmony_alter (const ::xml_schema::decimal&);

    harmony_alter (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    harmony_alter (const harmony_alter& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual harmony_alter*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    harmony_alter&
    operator= (const harmony_alter& x);

    virtual 
    ~harmony_alter ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    print_object_optional print_object_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    location_optional location_;
  };

  class bass_step: public ::musicxml::step
  {
    public:
    // text
    //
    typedef ::xml_schema::token text_type;
    typedef ::xsd::cxx::tree::optional< text_type > text_optional;
    typedef ::xsd::cxx::tree::traits< text_type, char > text_traits;

    const text_optional&
    text () const;

    text_optional&
    text ();

    void
    text (const text_type& x);

    void
    text (const text_optional& x);

    void
    text (::std::unique_ptr< text_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    bass_step (::musicxml::step::value);

    bass_step (const char*);

    bass_step (const ::std::string&);

    bass_step (const ::musicxml::step&);

    bass_step (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    bass_step (const bass_step& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual bass_step*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    bass_step&
    operator= (const bass_step& x);

    virtual 
    ~bass_step ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    text_optional text_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
  };

  class beater: public ::musicxml::beater_value
  {
    public:
    // tip
    //
    typedef ::musicxml::tip_direction tip_type;
    typedef ::xsd::cxx::tree::optional< tip_type > tip_optional;
    typedef ::xsd::cxx::tree::traits< tip_type, char > tip_traits;

    const tip_optional&
    tip () const;

    tip_optional&
    tip ();

    void
    tip (const tip_type& x);

    void
    tip (const tip_optional& x);

    void
    tip (::std::unique_ptr< tip_type > p);

    // Constructors.
    //
    beater (::musicxml::beater_value::value);

    beater (const char*);

    beater (const ::std::string&);

    beater (const ::musicxml::beater_value&);

    beater (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    beater (const beater& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual beater*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    beater&
    operator= (const beater& x);

    virtual 
    ~beater ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    tip_optional tip_;
  };

  class beat_unit_tied: public ::xml_schema::type
  {
    public:
    // beat-unit
    //
    typedef ::musicxml::note_type_value beat_unit_type;
    typedef ::xsd::cxx::tree::traits< beat_unit_type, char > beat_unit_traits;

    const beat_unit_type&
    beat_unit () const;

    beat_unit_type&
    beat_unit ();

    void
    beat_unit (const beat_unit_type& x);

    void
    beat_unit (::std::unique_ptr< beat_unit_type > p);

    // beat-unit-dot
    //
    typedef ::musicxml::empty beat_unit_dot_type;
    typedef ::xsd::cxx::tree::sequence< beat_unit_dot_type > beat_unit_dot_sequence;
    typedef beat_unit_dot_sequence::iterator beat_unit_dot_iterator;
    typedef beat_unit_dot_sequence::const_iterator beat_unit_dot_const_iterator;
    typedef ::xsd::cxx::tree::traits< beat_unit_dot_type, char > beat_unit_dot_traits;

    const beat_unit_dot_sequence&
    beat_unit_dot () const;

    beat_unit_dot_sequence&
    beat_unit_dot ();

    void
    beat_unit_dot (const beat_unit_dot_sequence& s);

    // Constructors.
    //
    beat_unit_tied (const beat_unit_type&);

    beat_unit_tied (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    beat_unit_tied (const beat_unit_tied& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual beat_unit_tied*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    beat_unit_tied&
    operator= (const beat_unit_tied& x);

    virtual 
    ~beat_unit_tied ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< beat_unit_type > beat_unit_;
    beat_unit_dot_sequence beat_unit_dot_;
  };

  class bracket: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::start_stop_continue type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // number
    //
    typedef ::musicxml::number_level number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // line-end
    //
    typedef ::musicxml::line_end line_end_type;
    typedef ::xsd::cxx::tree::traits< line_end_type, char > line_end_traits;

    const line_end_type&
    line_end () const;

    line_end_type&
    line_end ();

    void
    line_end (const line_end_type& x);

    void
    line_end (::std::unique_ptr< line_end_type > p);

    // end-length
    //
    typedef ::musicxml::tenths end_length_type;
    typedef ::xsd::cxx::tree::optional< end_length_type > end_length_optional;
    typedef ::xsd::cxx::tree::traits< end_length_type, char > end_length_traits;

    const end_length_optional&
    end_length () const;

    end_length_optional&
    end_length ();

    void
    end_length (const end_length_type& x);

    void
    end_length (const end_length_optional& x);

    void
    end_length (::std::unique_ptr< end_length_type > p);

    // line-type
    //
    typedef ::musicxml::line_type line_type_type;
    typedef ::xsd::cxx::tree::optional< line_type_type > line_type_optional;
    typedef ::xsd::cxx::tree::traits< line_type_type, char > line_type_traits;

    const line_type_optional&
    line_type () const;

    line_type_optional&
    line_type ();

    void
    line_type (const line_type_type& x);

    void
    line_type (const line_type_optional& x);

    void
    line_type (::std::unique_ptr< line_type_type > p);

    // dash-length
    //
    typedef ::musicxml::tenths dash_length_type;
    typedef ::xsd::cxx::tree::optional< dash_length_type > dash_length_optional;
    typedef ::xsd::cxx::tree::traits< dash_length_type, char > dash_length_traits;

    const dash_length_optional&
    dash_length () const;

    dash_length_optional&
    dash_length ();

    void
    dash_length (const dash_length_type& x);

    void
    dash_length (const dash_length_optional& x);

    void
    dash_length (::std::unique_ptr< dash_length_type > p);

    // space-length
    //
    typedef ::musicxml::tenths space_length_type;
    typedef ::xsd::cxx::tree::optional< space_length_type > space_length_optional;
    typedef ::xsd::cxx::tree::traits< space_length_type, char > space_length_traits;

    const space_length_optional&
    space_length () const;

    space_length_optional&
    space_length ();

    void
    space_length (const space_length_type& x);

    void
    space_length (const space_length_optional& x);

    void
    space_length (::std::unique_ptr< space_length_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    bracket (const type_type&,
             const line_end_type&);

    bracket (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    bracket (const bracket& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual bracket*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    bracket&
    operator= (const bracket& x);

    virtual 
    ~bracket ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    number_optional number_;
    ::xsd::cxx::tree::one< line_end_type > line_end_;
    end_length_optional end_length_;
    line_type_optional line_type_;
    dash_length_optional dash_length_;
    space_length_optional space_length_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    color_optional color_;
    id_optional id_;
  };

  class dashes: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::start_stop_continue type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // number
    //
    typedef ::musicxml::number_level number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // dash-length
    //
    typedef ::musicxml::tenths dash_length_type;
    typedef ::xsd::cxx::tree::optional< dash_length_type > dash_length_optional;
    typedef ::xsd::cxx::tree::traits< dash_length_type, char > dash_length_traits;

    const dash_length_optional&
    dash_length () const;

    dash_length_optional&
    dash_length ();

    void
    dash_length (const dash_length_type& x);

    void
    dash_length (const dash_length_optional& x);

    void
    dash_length (::std::unique_ptr< dash_length_type > p);

    // space-length
    //
    typedef ::musicxml::tenths space_length_type;
    typedef ::xsd::cxx::tree::optional< space_length_type > space_length_optional;
    typedef ::xsd::cxx::tree::traits< space_length_type, char > space_length_traits;

    const space_length_optional&
    space_length () const;

    space_length_optional&
    space_length ();

    void
    space_length (const space_length_type& x);

    void
    space_length (const space_length_optional& x);

    void
    space_length (::std::unique_ptr< space_length_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    dashes (const type_type&);

    dashes (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    dashes (const dashes& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual dashes*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    dashes&
    operator= (const dashes& x);

    virtual 
    ~dashes ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    number_optional number_;
    dash_length_optional dash_length_;
    space_length_optional space_length_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    color_optional color_;
    id_optional id_;
  };

  class degree: public ::xml_schema::type
  {
    public:
    // degree-value
    //
    typedef ::musicxml::degree_value degree_value_type;
    typedef ::xsd::cxx::tree::traits< degree_value_type, char > degree_value_traits;

    const degree_value_type&
    degree_value () const;

    degree_value_type&
    degree_value ();

    void
    degree_value (const degree_value_type& x);

    void
    degree_value (::std::unique_ptr< degree_value_type > p);

    // degree-alter
    //
    typedef ::musicxml::degree_alter degree_alter_type;
    typedef ::xsd::cxx::tree::traits< degree_alter_type, char > degree_alter_traits;

    const degree_alter_type&
    degree_alter () const;

    degree_alter_type&
    degree_alter ();

    void
    degree_alter (const degree_alter_type& x);

    void
    degree_alter (::std::unique_ptr< degree_alter_type > p);

    // degree-type
    //
    typedef ::musicxml::degree_type degree_type_type;
    typedef ::xsd::cxx::tree::traits< degree_type_type, char > degree_type_traits;

    const degree_type_type&
    degree_type () const;

    degree_type_type&
    degree_type ();

    void
    degree_type (const degree_type_type& x);

    void
    degree_type (::std::unique_ptr< degree_type_type > p);

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // Constructors.
    //
    degree (const degree_value_type&,
            const degree_alter_type&,
            const degree_type_type&);

    degree (::std::unique_ptr< degree_value_type >,
            ::std::unique_ptr< degree_alter_type >,
            ::std::unique_ptr< degree_type_type >);

    degree (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    degree (const degree& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual degree*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    degree&
    operator= (const degree& x);

    virtual 
    ~degree ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< degree_value_type > degree_value_;
    ::xsd::cxx::tree::one< degree_alter_type > degree_alter_;
    ::xsd::cxx::tree::one< degree_type_type > degree_type_;
    print_object_optional print_object_;
  };

  class degree_alter: public ::musicxml::semitones
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // plus-minus
    //
    typedef ::musicxml::yes_no plus_minus_type;
    typedef ::xsd::cxx::tree::optional< plus_minus_type > plus_minus_optional;
    typedef ::xsd::cxx::tree::traits< plus_minus_type, char > plus_minus_traits;

    const plus_minus_optional&
    plus_minus () const;

    plus_minus_optional&
    plus_minus ();

    void
    plus_minus (const plus_minus_type& x);

    void
    plus_minus (const plus_minus_optional& x);

    void
    plus_minus (::std::unique_ptr< plus_minus_type > p);

    // Constructors.
    //
    degree_alter (const ::xml_schema::decimal&);

    degree_alter (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    degree_alter (const degree_alter& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual degree_alter*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    degree_alter&
    operator= (const degree_alter& x);

    virtual 
    ~degree_alter ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    plus_minus_optional plus_minus_;
  };

  class degree_type: public ::musicxml::degree_type_value
  {
    public:
    // text
    //
    typedef ::xml_schema::token text_type;
    typedef ::xsd::cxx::tree::optional< text_type > text_optional;
    typedef ::xsd::cxx::tree::traits< text_type, char > text_traits;

    const text_optional&
    text () const;

    text_optional&
    text ();

    void
    text (const text_type& x);

    void
    text (const text_optional& x);

    void
    text (::std::unique_ptr< text_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    degree_type (::musicxml::degree_type_value::value);

    degree_type (const char*);

    degree_type (const ::std::string&);

    degree_type (const ::musicxml::degree_type_value&);

    degree_type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    degree_type (const degree_type& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual degree_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    degree_type&
    operator= (const degree_type& x);

    virtual 
    ~degree_type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    text_optional text_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
  };

  class degree_value: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type >
  {
    public:
    // symbol
    //
    typedef ::musicxml::degree_symbol_value symbol_type;
    typedef ::xsd::cxx::tree::optional< symbol_type > symbol_optional;
    typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

    const symbol_optional&
    symbol () const;

    symbol_optional&
    symbol ();

    void
    symbol (const symbol_type& x);

    void
    symbol (const symbol_optional& x);

    void
    symbol (::std::unique_ptr< symbol_type > p);

    // text
    //
    typedef ::xml_schema::token text_type;
    typedef ::xsd::cxx::tree::optional< text_type > text_optional;
    typedef ::xsd::cxx::tree::traits< text_type, char > text_traits;

    const text_optional&
    text () const;

    text_optional&
    text ();

    void
    text (const text_type& x);

    void
    text (const text_optional& x);

    void
    text (::std::unique_ptr< text_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    degree_value (const ::xml_schema::positive_integer&);

    degree_value (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    degree_value (const degree_value& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual degree_value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    degree_value&
    operator= (const degree_value& x);

    virtual 
    ~degree_value ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    symbol_optional symbol_;
    text_optional text_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
  };

  class direction: public ::xml_schema::type
  {
    public:
    // direction-type
    //
    typedef ::musicxml::direction_type direction_type_type;
    typedef ::xsd::cxx::tree::sequence< direction_type_type > direction_type_sequence;
    typedef direction_type_sequence::iterator direction_type_iterator;
    typedef direction_type_sequence::const_iterator direction_type_const_iterator;
    typedef ::xsd::cxx::tree::traits< direction_type_type, char > direction_type_traits;

    const direction_type_sequence&
    direction_type () const;

    direction_type_sequence&
    direction_type ();

    void
    direction_type (const direction_type_sequence& s);

    // offset
    //
    typedef ::musicxml::offset offset_type;
    typedef ::xsd::cxx::tree::optional< offset_type > offset_optional;
    typedef ::xsd::cxx::tree::traits< offset_type, char > offset_traits;

    const offset_optional&
    offset () const;

    offset_optional&
    offset ();

    void
    offset (const offset_type& x);

    void
    offset (const offset_optional& x);

    void
    offset (::std::unique_ptr< offset_type > p);

    // footnote
    //
    typedef ::musicxml::formatted_text footnote_type;
    typedef ::xsd::cxx::tree::optional< footnote_type > footnote_optional;
    typedef ::xsd::cxx::tree::traits< footnote_type, char > footnote_traits;

    const footnote_optional&
    footnote () const;

    footnote_optional&
    footnote ();

    void
    footnote (const footnote_type& x);

    void
    footnote (const footnote_optional& x);

    void
    footnote (::std::unique_ptr< footnote_type > p);

    // level
    //
    typedef ::musicxml::level level_type;
    typedef ::xsd::cxx::tree::optional< level_type > level_optional;
    typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

    const level_optional&
    level () const;

    level_optional&
    level ();

    void
    level (const level_type& x);

    void
    level (const level_optional& x);

    void
    level (::std::unique_ptr< level_type > p);

    // voice
    //
    typedef ::xml_schema::string voice_type;
    typedef ::xsd::cxx::tree::optional< voice_type > voice_optional;
    typedef ::xsd::cxx::tree::traits< voice_type, char > voice_traits;

    const voice_optional&
    voice () const;

    voice_optional&
    voice ();

    void
    voice (const voice_type& x);

    void
    voice (const voice_optional& x);

    void
    voice (::std::unique_ptr< voice_type > p);

    // staff
    //
    typedef ::xml_schema::positive_integer staff_type;
    typedef ::xsd::cxx::tree::optional< staff_type > staff_optional;
    typedef ::xsd::cxx::tree::traits< staff_type, char > staff_traits;

    const staff_optional&
    staff () const;

    staff_optional&
    staff ();

    void
    staff (const staff_type& x);

    void
    staff (const staff_optional& x);

    // sound
    //
    typedef ::musicxml::sound sound_type;
    typedef ::xsd::cxx::tree::optional< sound_type > sound_optional;
    typedef ::xsd::cxx::tree::traits< sound_type, char > sound_traits;

    const sound_optional&
    sound () const;

    sound_optional&
    sound ();

    void
    sound (const sound_type& x);

    void
    sound (const sound_optional& x);

    void
    sound (::std::unique_ptr< sound_type > p);

    // listening
    //
    typedef ::musicxml::listening listening_type;
    typedef ::xsd::cxx::tree::optional< listening_type > listening_optional;
    typedef ::xsd::cxx::tree::traits< listening_type, char > listening_traits;

    const listening_optional&
    listening () const;

    listening_optional&
    listening ();

    void
    listening (const listening_type& x);

    void
    listening (const listening_optional& x);

    void
    listening (::std::unique_ptr< listening_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // directive
    //
    typedef ::musicxml::yes_no directive_type;
    typedef ::xsd::cxx::tree::optional< directive_type > directive_optional;
    typedef ::xsd::cxx::tree::traits< directive_type, char > directive_traits;

    const directive_optional&
    directive () const;

    directive_optional&
    directive ();

    void
    directive (const directive_type& x);

    void
    directive (const directive_optional& x);

    void
    directive (::std::unique_ptr< directive_type > p);

    // system
    //
    typedef ::musicxml::system_relation system_type;
    typedef ::xsd::cxx::tree::optional< system_type > system_optional;
    typedef ::xsd::cxx::tree::traits< system_type, char > system_traits;

    const system_optional&
    system () const;

    system_optional&
    system ();

    void
    system (const system_type& x);

    void
    system (const system_optional& x);

    void
    system (::std::unique_ptr< system_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    direction ();

    direction (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    direction (const direction& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual direction*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    direction&
    operator= (const direction& x);

    virtual 
    ~direction ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    direction_type_sequence direction_type_;
    offset_optional offset_;
    footnote_optional footnote_;
    level_optional level_;
    voice_optional voice_;
    staff_optional staff_;
    sound_optional sound_;
    listening_optional listening_;
    placement_optional placement_;
    directive_optional directive_;
    system_optional system_;
    id_optional id_;
  };

  class direction_type: public ::xml_schema::type
  {
    public:
    // rehearsal
    //
    typedef ::musicxml::formatted_text_id rehearsal_type;
    typedef ::xsd::cxx::tree::sequence< rehearsal_type > rehearsal_sequence;
    typedef rehearsal_sequence::iterator rehearsal_iterator;
    typedef rehearsal_sequence::const_iterator rehearsal_const_iterator;
    typedef ::xsd::cxx::tree::traits< rehearsal_type, char > rehearsal_traits;

    const rehearsal_sequence&
    rehearsal () const;

    rehearsal_sequence&
    rehearsal ();

    void
    rehearsal (const rehearsal_sequence& s);

    // segno
    //
    typedef ::musicxml::segno segno_type;
    typedef ::xsd::cxx::tree::sequence< segno_type > segno_sequence;
    typedef segno_sequence::iterator segno_iterator;
    typedef segno_sequence::const_iterator segno_const_iterator;
    typedef ::xsd::cxx::tree::traits< segno_type, char > segno_traits;

    const segno_sequence&
    segno () const;

    segno_sequence&
    segno ();

    void
    segno (const segno_sequence& s);

    // coda
    //
    typedef ::musicxml::coda coda_type;
    typedef ::xsd::cxx::tree::sequence< coda_type > coda_sequence;
    typedef coda_sequence::iterator coda_iterator;
    typedef coda_sequence::const_iterator coda_const_iterator;
    typedef ::xsd::cxx::tree::traits< coda_type, char > coda_traits;

    const coda_sequence&
    coda () const;

    coda_sequence&
    coda ();

    void
    coda (const coda_sequence& s);

    // words
    //
    typedef ::musicxml::formatted_text_id words_type;
    typedef ::xsd::cxx::tree::sequence< words_type > words_sequence;
    typedef words_sequence::iterator words_iterator;
    typedef words_sequence::const_iterator words_const_iterator;
    typedef ::xsd::cxx::tree::traits< words_type, char > words_traits;

    const words_sequence&
    words () const;

    words_sequence&
    words ();

    void
    words (const words_sequence& s);

    // symbol
    //
    typedef ::musicxml::formatted_symbol_id symbol_type;
    typedef ::xsd::cxx::tree::sequence< symbol_type > symbol_sequence;
    typedef symbol_sequence::iterator symbol_iterator;
    typedef symbol_sequence::const_iterator symbol_const_iterator;
    typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

    const symbol_sequence&
    symbol () const;

    symbol_sequence&
    symbol ();

    void
    symbol (const symbol_sequence& s);

    // wedge
    //
    typedef ::musicxml::wedge wedge_type;
    typedef ::xsd::cxx::tree::optional< wedge_type > wedge_optional;
    typedef ::xsd::cxx::tree::traits< wedge_type, char > wedge_traits;

    const wedge_optional&
    wedge () const;

    wedge_optional&
    wedge ();

    void
    wedge (const wedge_type& x);

    void
    wedge (const wedge_optional& x);

    void
    wedge (::std::unique_ptr< wedge_type > p);

    // dynamics
    //
    typedef ::musicxml::dynamics dynamics_type;
    typedef ::xsd::cxx::tree::sequence< dynamics_type > dynamics_sequence;
    typedef dynamics_sequence::iterator dynamics_iterator;
    typedef dynamics_sequence::const_iterator dynamics_const_iterator;
    typedef ::xsd::cxx::tree::traits< dynamics_type, char > dynamics_traits;

    const dynamics_sequence&
    dynamics () const;

    dynamics_sequence&
    dynamics ();

    void
    dynamics (const dynamics_sequence& s);

    // dashes
    //
    typedef ::musicxml::dashes dashes_type;
    typedef ::xsd::cxx::tree::optional< dashes_type > dashes_optional;
    typedef ::xsd::cxx::tree::traits< dashes_type, char > dashes_traits;

    const dashes_optional&
    dashes () const;

    dashes_optional&
    dashes ();

    void
    dashes (const dashes_type& x);

    void
    dashes (const dashes_optional& x);

    void
    dashes (::std::unique_ptr< dashes_type > p);

    // bracket
    //
    typedef ::musicxml::bracket bracket_type;
    typedef ::xsd::cxx::tree::optional< bracket_type > bracket_optional;
    typedef ::xsd::cxx::tree::traits< bracket_type, char > bracket_traits;

    const bracket_optional&
    bracket () const;

    bracket_optional&
    bracket ();

    void
    bracket (const bracket_type& x);

    void
    bracket (const bracket_optional& x);

    void
    bracket (::std::unique_ptr< bracket_type > p);

    // pedal
    //
    typedef ::musicxml::pedal pedal_type;
    typedef ::xsd::cxx::tree::optional< pedal_type > pedal_optional;
    typedef ::xsd::cxx::tree::traits< pedal_type, char > pedal_traits;

    const pedal_optional&
    pedal () const;

    pedal_optional&
    pedal ();

    void
    pedal (const pedal_type& x);

    void
    pedal (const pedal_optional& x);

    void
    pedal (::std::unique_ptr< pedal_type > p);

    // metronome
    //
    typedef ::musicxml::metronome metronome_type;
    typedef ::xsd::cxx::tree::optional< metronome_type > metronome_optional;
    typedef ::xsd::cxx::tree::traits< metronome_type, char > metronome_traits;

    const metronome_optional&
    metronome () const;

    metronome_optional&
    metronome ();

    void
    metronome (const metronome_type& x);

    void
    metronome (const metronome_optional& x);

    void
    metronome (::std::unique_ptr< metronome_type > p);

    // octave-shift
    //
    typedef ::musicxml::octave_shift octave_shift_type;
    typedef ::xsd::cxx::tree::optional< octave_shift_type > octave_shift_optional;
    typedef ::xsd::cxx::tree::traits< octave_shift_type, char > octave_shift_traits;

    const octave_shift_optional&
    octave_shift () const;

    octave_shift_optional&
    octave_shift ();

    void
    octave_shift (const octave_shift_type& x);

    void
    octave_shift (const octave_shift_optional& x);

    void
    octave_shift (::std::unique_ptr< octave_shift_type > p);

    // harp-pedals
    //
    typedef ::musicxml::harp_pedals harp_pedals_type;
    typedef ::xsd::cxx::tree::optional< harp_pedals_type > harp_pedals_optional;
    typedef ::xsd::cxx::tree::traits< harp_pedals_type, char > harp_pedals_traits;

    const harp_pedals_optional&
    harp_pedals () const;

    harp_pedals_optional&
    harp_pedals ();

    void
    harp_pedals (const harp_pedals_type& x);

    void
    harp_pedals (const harp_pedals_optional& x);

    void
    harp_pedals (::std::unique_ptr< harp_pedals_type > p);

    // damp
    //
    typedef ::musicxml::empty_print_style_align_id damp_type;
    typedef ::xsd::cxx::tree::optional< damp_type > damp_optional;
    typedef ::xsd::cxx::tree::traits< damp_type, char > damp_traits;

    const damp_optional&
    damp () const;

    damp_optional&
    damp ();

    void
    damp (const damp_type& x);

    void
    damp (const damp_optional& x);

    void
    damp (::std::unique_ptr< damp_type > p);

    // damp-all
    //
    typedef ::musicxml::empty_print_style_align_id damp_all_type;
    typedef ::xsd::cxx::tree::optional< damp_all_type > damp_all_optional;
    typedef ::xsd::cxx::tree::traits< damp_all_type, char > damp_all_traits;

    const damp_all_optional&
    damp_all () const;

    damp_all_optional&
    damp_all ();

    void
    damp_all (const damp_all_type& x);

    void
    damp_all (const damp_all_optional& x);

    void
    damp_all (::std::unique_ptr< damp_all_type > p);

    // eyeglasses
    //
    typedef ::musicxml::empty_print_style_align_id eyeglasses_type;
    typedef ::xsd::cxx::tree::optional< eyeglasses_type > eyeglasses_optional;
    typedef ::xsd::cxx::tree::traits< eyeglasses_type, char > eyeglasses_traits;

    const eyeglasses_optional&
    eyeglasses () const;

    eyeglasses_optional&
    eyeglasses ();

    void
    eyeglasses (const eyeglasses_type& x);

    void
    eyeglasses (const eyeglasses_optional& x);

    void
    eyeglasses (::std::unique_ptr< eyeglasses_type > p);

    // string-mute
    //
    typedef ::musicxml::string_mute string_mute_type;
    typedef ::xsd::cxx::tree::optional< string_mute_type > string_mute_optional;
    typedef ::xsd::cxx::tree::traits< string_mute_type, char > string_mute_traits;

    const string_mute_optional&
    string_mute () const;

    string_mute_optional&
    string_mute ();

    void
    string_mute (const string_mute_type& x);

    void
    string_mute (const string_mute_optional& x);

    void
    string_mute (::std::unique_ptr< string_mute_type > p);

    // scordatura
    //
    typedef ::musicxml::scordatura scordatura_type;
    typedef ::xsd::cxx::tree::optional< scordatura_type > scordatura_optional;
    typedef ::xsd::cxx::tree::traits< scordatura_type, char > scordatura_traits;

    const scordatura_optional&
    scordatura () const;

    scordatura_optional&
    scordatura ();

    void
    scordatura (const scordatura_type& x);

    void
    scordatura (const scordatura_optional& x);

    void
    scordatura (::std::unique_ptr< scordatura_type > p);

    // image
    //
    typedef ::musicxml::image image_type;
    typedef ::xsd::cxx::tree::optional< image_type > image_optional;
    typedef ::xsd::cxx::tree::traits< image_type, char > image_traits;

    const image_optional&
    image () const;

    image_optional&
    image ();

    void
    image (const image_type& x);

    void
    image (const image_optional& x);

    void
    image (::std::unique_ptr< image_type > p);

    // principal-voice
    //
    typedef ::musicxml::principal_voice principal_voice_type;
    typedef ::xsd::cxx::tree::optional< principal_voice_type > principal_voice_optional;
    typedef ::xsd::cxx::tree::traits< principal_voice_type, char > principal_voice_traits;

    const principal_voice_optional&
    principal_voice () const;

    principal_voice_optional&
    principal_voice ();

    void
    principal_voice (const principal_voice_type& x);

    void
    principal_voice (const principal_voice_optional& x);

    void
    principal_voice (::std::unique_ptr< principal_voice_type > p);

    // percussion
    //
    typedef ::musicxml::percussion percussion_type;
    typedef ::xsd::cxx::tree::sequence< percussion_type > percussion_sequence;
    typedef percussion_sequence::iterator percussion_iterator;
    typedef percussion_sequence::const_iterator percussion_const_iterator;
    typedef ::xsd::cxx::tree::traits< percussion_type, char > percussion_traits;

    const percussion_sequence&
    percussion () const;

    percussion_sequence&
    percussion ();

    void
    percussion (const percussion_sequence& s);

    // accordion-registration
    //
    typedef ::musicxml::accordion_registration accordion_registration_type;
    typedef ::xsd::cxx::tree::optional< accordion_registration_type > accordion_registration_optional;
    typedef ::xsd::cxx::tree::traits< accordion_registration_type, char > accordion_registration_traits;

    const accordion_registration_optional&
    accordion_registration () const;

    accordion_registration_optional&
    accordion_registration ();

    void
    accordion_registration (const accordion_registration_type& x);

    void
    accordion_registration (const accordion_registration_optional& x);

    void
    accordion_registration (::std::unique_ptr< accordion_registration_type > p);

    // staff-divide
    //
    typedef ::musicxml::staff_divide staff_divide_type;
    typedef ::xsd::cxx::tree::optional< staff_divide_type > staff_divide_optional;
    typedef ::xsd::cxx::tree::traits< staff_divide_type, char > staff_divide_traits;

    const staff_divide_optional&
    staff_divide () const;

    staff_divide_optional&
    staff_divide ();

    void
    staff_divide (const staff_divide_type& x);

    void
    staff_divide (const staff_divide_optional& x);

    void
    staff_divide (::std::unique_ptr< staff_divide_type > p);

    // other-direction
    //
    typedef ::musicxml::other_direction other_direction_type;
    typedef ::xsd::cxx::tree::optional< other_direction_type > other_direction_optional;
    typedef ::xsd::cxx::tree::traits< other_direction_type, char > other_direction_traits;

    const other_direction_optional&
    other_direction () const;

    other_direction_optional&
    other_direction ();

    void
    other_direction (const other_direction_type& x);

    void
    other_direction (const other_direction_optional& x);

    void
    other_direction (::std::unique_ptr< other_direction_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    direction_type ();

    direction_type (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    direction_type (const direction_type& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual direction_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    direction_type&
    operator= (const direction_type& x);

    virtual 
    ~direction_type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    rehearsal_sequence rehearsal_;
    segno_sequence segno_;
    coda_sequence coda_;
    words_sequence words_;
    symbol_sequence symbol_;
    wedge_optional wedge_;
    dynamics_sequence dynamics_;
    dashes_optional dashes_;
    bracket_optional bracket_;
    pedal_optional pedal_;
    metronome_optional metronome_;
    octave_shift_optional octave_shift_;
    harp_pedals_optional harp_pedals_;
    damp_optional damp_;
    damp_all_optional damp_all_;
    eyeglasses_optional eyeglasses_;
    string_mute_optional string_mute_;
    scordatura_optional scordatura_;
    image_optional image_;
    principal_voice_optional principal_voice_;
    percussion_sequence percussion_;
    accordion_registration_optional accordion_registration_;
    staff_divide_optional staff_divide_;
    other_direction_optional other_direction_;
    id_optional id_;
  };

  class effect: public ::musicxml::effect_value
  {
    public:
    // smufl
    //
    typedef ::musicxml::smufl_pictogram_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    effect (::musicxml::effect_value::value);

    effect (const char*);

    effect (const ::std::string&);

    effect (const ::musicxml::effect_value&);

    effect (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    effect (const effect& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual effect*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    effect&
    operator= (const effect& x);

    virtual 
    ~effect ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    smufl_optional smufl_;
  };

  class feature: public ::xml_schema::string
  {
    public:
    // type
    //
    typedef ::xml_schema::token type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    feature ();

    feature (const char*);

    feature (const ::std::string&);

    feature (const ::xml_schema::string&);

    feature (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    feature (const feature& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual feature*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    feature&
    operator= (const feature& x);

    virtual 
    ~feature ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    type_optional type_;
  };

  class first_fret: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::positive_integer, char, ::xml_schema::simple_type >
  {
    public:
    // text
    //
    typedef ::xml_schema::token text_type;
    typedef ::xsd::cxx::tree::optional< text_type > text_optional;
    typedef ::xsd::cxx::tree::traits< text_type, char > text_traits;

    const text_optional&
    text () const;

    text_optional&
    text ();

    void
    text (const text_type& x);

    void
    text (const text_optional& x);

    void
    text (::std::unique_ptr< text_type > p);

    // location
    //
    typedef ::musicxml::left_right location_type;
    typedef ::xsd::cxx::tree::optional< location_type > location_optional;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_optional&
    location () const;

    location_optional&
    location ();

    void
    location (const location_type& x);

    void
    location (const location_optional& x);

    void
    location (::std::unique_ptr< location_type > p);

    // Constructors.
    //
    first_fret (const ::xml_schema::positive_integer&);

    first_fret (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    first_fret (const first_fret& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual first_fret*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    first_fret&
    operator= (const first_fret& x);

    virtual 
    ~first_fret ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    text_optional text_;
    location_optional location_;
  };

  class frame: public ::xml_schema::type
  {
    public:
    // frame-strings
    //
    typedef ::xml_schema::positive_integer frame_strings_type;
    typedef ::xsd::cxx::tree::traits< frame_strings_type, char > frame_strings_traits;

    const frame_strings_type&
    frame_strings () const;

    frame_strings_type&
    frame_strings ();

    void
    frame_strings (const frame_strings_type& x);

    // frame-frets
    //
    typedef ::xml_schema::positive_integer frame_frets_type;
    typedef ::xsd::cxx::tree::traits< frame_frets_type, char > frame_frets_traits;

    const frame_frets_type&
    frame_frets () const;

    frame_frets_type&
    frame_frets ();

    void
    frame_frets (const frame_frets_type& x);

    // first-fret
    //
    typedef ::musicxml::first_fret first_fret_type;
    typedef ::xsd::cxx::tree::optional< first_fret_type > first_fret_optional;
    typedef ::xsd::cxx::tree::traits< first_fret_type, char > first_fret_traits;

    const first_fret_optional&
    first_fret () const;

    first_fret_optional&
    first_fret ();

    void
    first_fret (const first_fret_type& x);

    void
    first_fret (const first_fret_optional& x);

    void
    first_fret (::std::unique_ptr< first_fret_type > p);

    // frame-note
    //
    typedef ::musicxml::frame_note frame_note_type;
    typedef ::xsd::cxx::tree::sequence< frame_note_type > frame_note_sequence;
    typedef frame_note_sequence::iterator frame_note_iterator;
    typedef frame_note_sequence::const_iterator frame_note_const_iterator;
    typedef ::xsd::cxx::tree::traits< frame_note_type, char > frame_note_traits;

    const frame_note_sequence&
    frame_note () const;

    frame_note_sequence&
    frame_note ();

    void
    frame_note (const frame_note_sequence& s);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign_image valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // height
    //
    typedef ::musicxml::tenths height_type;
    typedef ::xsd::cxx::tree::optional< height_type > height_optional;
    typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

    const height_optional&
    height () const;

    height_optional&
    height ();

    void
    height (const height_type& x);

    void
    height (const height_optional& x);

    void
    height (::std::unique_ptr< height_type > p);

    // width
    //
    typedef ::musicxml::tenths width_type;
    typedef ::xsd::cxx::tree::optional< width_type > width_optional;
    typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

    const width_optional&
    width () const;

    width_optional&
    width ();

    void
    width (const width_type& x);

    void
    width (const width_optional& x);

    void
    width (::std::unique_ptr< width_type > p);

    // unplayed
    //
    typedef ::xml_schema::token unplayed_type;
    typedef ::xsd::cxx::tree::optional< unplayed_type > unplayed_optional;
    typedef ::xsd::cxx::tree::traits< unplayed_type, char > unplayed_traits;

    const unplayed_optional&
    unplayed () const;

    unplayed_optional&
    unplayed ();

    void
    unplayed (const unplayed_type& x);

    void
    unplayed (const unplayed_optional& x);

    void
    unplayed (::std::unique_ptr< unplayed_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    frame (const frame_strings_type&,
           const frame_frets_type&);

    frame (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    frame (const frame& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual frame*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    frame&
    operator= (const frame& x);

    virtual 
    ~frame ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< frame_strings_type > frame_strings_;
    ::xsd::cxx::tree::one< frame_frets_type > frame_frets_;
    first_fret_optional first_fret_;
    frame_note_sequence frame_note_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    height_optional height_;
    width_optional width_;
    unplayed_optional unplayed_;
    id_optional id_;
  };

  class frame_note: public ::xml_schema::type
  {
    public:
    // string
    //
    typedef ::musicxml::string string_type;
    typedef ::xsd::cxx::tree::traits< string_type, char > string_traits;

    const string_type&
    string () const;

    string_type&
    string ();

    void
    string (const string_type& x);

    void
    string (::std::unique_ptr< string_type > p);

    // fret
    //
    typedef ::musicxml::fret fret_type;
    typedef ::xsd::cxx::tree::traits< fret_type, char > fret_traits;

    const fret_type&
    fret () const;

    fret_type&
    fret ();

    void
    fret (const fret_type& x);

    void
    fret (::std::unique_ptr< fret_type > p);

    // fingering
    //
    typedef ::musicxml::fingering fingering_type;
    typedef ::xsd::cxx::tree::optional< fingering_type > fingering_optional;
    typedef ::xsd::cxx::tree::traits< fingering_type, char > fingering_traits;

    const fingering_optional&
    fingering () const;

    fingering_optional&
    fingering ();

    void
    fingering (const fingering_type& x);

    void
    fingering (const fingering_optional& x);

    void
    fingering (::std::unique_ptr< fingering_type > p);

    // barre
    //
    typedef ::musicxml::barre barre_type;
    typedef ::xsd::cxx::tree::optional< barre_type > barre_optional;
    typedef ::xsd::cxx::tree::traits< barre_type, char > barre_traits;

    const barre_optional&
    barre () const;

    barre_optional&
    barre ();

    void
    barre (const barre_type& x);

    void
    barre (const barre_optional& x);

    void
    barre (::std::unique_ptr< barre_type > p);

    // Constructors.
    //
    frame_note (const string_type&,
                const fret_type&);

    frame_note (::std::unique_ptr< string_type >,
                ::std::unique_ptr< fret_type >);

    frame_note (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    frame_note (const frame_note& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual frame_note*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    frame_note&
    operator= (const frame_note& x);

    virtual 
    ~frame_note ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< string_type > string_;
    ::xsd::cxx::tree::one< fret_type > fret_;
    fingering_optional fingering_;
    barre_optional barre_;
  };

  class glass: public ::musicxml::glass_value
  {
    public:
    // smufl
    //
    typedef ::musicxml::smufl_pictogram_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    glass (::musicxml::glass_value::value);

    glass (const char*);

    glass (const ::std::string&);

    glass (const ::musicxml::glass_value&);

    glass (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    glass (const glass& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual glass*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    glass&
    operator= (const glass& x);

    virtual 
    ~glass ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    smufl_optional smufl_;
  };

  class grouping: public ::xml_schema::type
  {
    public:
    // feature
    //
    typedef ::musicxml::feature feature_type;
    typedef ::xsd::cxx::tree::sequence< feature_type > feature_sequence;
    typedef feature_sequence::iterator feature_iterator;
    typedef feature_sequence::const_iterator feature_const_iterator;
    typedef ::xsd::cxx::tree::traits< feature_type, char > feature_traits;

    const feature_sequence&
    feature () const;

    feature_sequence&
    feature ();

    void
    feature (const feature_sequence& s);

    // type
    //
    typedef ::musicxml::start_stop_single type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // number
    //
    typedef ::xml_schema::token number_type;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_type&
    number () const;

    number_type&
    number ();

    void
    number (const number_type& x);

    void
    number (::std::unique_ptr< number_type > p);

    static const number_type&
    number_default_value ();

    // member-of
    //
    typedef ::xml_schema::token member_of_type;
    typedef ::xsd::cxx::tree::optional< member_of_type > member_of_optional;
    typedef ::xsd::cxx::tree::traits< member_of_type, char > member_of_traits;

    const member_of_optional&
    member_of () const;

    member_of_optional&
    member_of ();

    void
    member_of (const member_of_type& x);

    void
    member_of (const member_of_optional& x);

    void
    member_of (::std::unique_ptr< member_of_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    grouping (const type_type&);

    grouping (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    grouping (const grouping& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual grouping*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    grouping&
    operator= (const grouping& x);

    virtual 
    ~grouping ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    feature_sequence feature_;
    ::xsd::cxx::tree::one< type_type > type_;
    ::xsd::cxx::tree::one< number_type > number_;
    static const number_type number_default_value_;
    member_of_optional member_of_;
    id_optional id_;
  };

  class harmony: public ::xml_schema::type
  {
    public:
    // root
    //
    typedef ::musicxml::root root_type;
    typedef ::xsd::cxx::tree::sequence< root_type > root_sequence;
    typedef root_sequence::iterator root_iterator;
    typedef root_sequence::const_iterator root_const_iterator;
    typedef ::xsd::cxx::tree::traits< root_type, char > root_traits;

    const root_sequence&
    root () const;

    root_sequence&
    root ();

    void
    root (const root_sequence& s);

    // numeral
    //
    typedef ::musicxml::numeral numeral_type;
    typedef ::xsd::cxx::tree::sequence< numeral_type > numeral_sequence;
    typedef numeral_sequence::iterator numeral_iterator;
    typedef numeral_sequence::const_iterator numeral_const_iterator;
    typedef ::xsd::cxx::tree::traits< numeral_type, char > numeral_traits;

    const numeral_sequence&
    numeral () const;

    numeral_sequence&
    numeral ();

    void
    numeral (const numeral_sequence& s);

    // function
    //
    typedef ::musicxml::style_text function_type;
    typedef ::xsd::cxx::tree::sequence< function_type > function_sequence;
    typedef function_sequence::iterator function_iterator;
    typedef function_sequence::const_iterator function_const_iterator;
    typedef ::xsd::cxx::tree::traits< function_type, char > function_traits;

    const function_sequence&
    function () const;

    function_sequence&
    function ();

    void
    function (const function_sequence& s);

    // kind
    //
    typedef ::musicxml::kind kind_type;
    typedef ::xsd::cxx::tree::sequence< kind_type > kind_sequence;
    typedef kind_sequence::iterator kind_iterator;
    typedef kind_sequence::const_iterator kind_const_iterator;
    typedef ::xsd::cxx::tree::traits< kind_type, char > kind_traits;

    const kind_sequence&
    kind () const;

    kind_sequence&
    kind ();

    void
    kind (const kind_sequence& s);

    // inversion
    //
    typedef ::musicxml::inversion inversion_type;
    typedef ::xsd::cxx::tree::sequence< inversion_type > inversion_sequence;
    typedef inversion_sequence::iterator inversion_iterator;
    typedef inversion_sequence::const_iterator inversion_const_iterator;
    typedef ::xsd::cxx::tree::traits< inversion_type, char > inversion_traits;

    const inversion_sequence&
    inversion () const;

    inversion_sequence&
    inversion ();

    void
    inversion (const inversion_sequence& s);

    // bass
    //
    typedef ::musicxml::bass bass_type;
    typedef ::xsd::cxx::tree::sequence< bass_type > bass_sequence;
    typedef bass_sequence::iterator bass_iterator;
    typedef bass_sequence::const_iterator bass_const_iterator;
    typedef ::xsd::cxx::tree::traits< bass_type, char > bass_traits;

    const bass_sequence&
    bass () const;

    bass_sequence&
    bass ();

    void
    bass (const bass_sequence& s);

    // degree
    //
    typedef ::musicxml::degree degree_type;
    typedef ::xsd::cxx::tree::sequence< degree_type > degree_sequence;
    typedef degree_sequence::iterator degree_iterator;
    typedef degree_sequence::const_iterator degree_const_iterator;
    typedef ::xsd::cxx::tree::traits< degree_type, char > degree_traits;

    const degree_sequence&
    degree () const;

    degree_sequence&
    degree ();

    void
    degree (const degree_sequence& s);

    // frame
    //
    typedef ::musicxml::frame frame_type;
    typedef ::xsd::cxx::tree::optional< frame_type > frame_optional;
    typedef ::xsd::cxx::tree::traits< frame_type, char > frame_traits;

    const frame_optional&
    frame () const;

    frame_optional&
    frame ();

    void
    frame (const frame_type& x);

    void
    frame (const frame_optional& x);

    void
    frame (::std::unique_ptr< frame_type > p);

    // offset
    //
    typedef ::musicxml::offset offset_type;
    typedef ::xsd::cxx::tree::optional< offset_type > offset_optional;
    typedef ::xsd::cxx::tree::traits< offset_type, char > offset_traits;

    const offset_optional&
    offset () const;

    offset_optional&
    offset ();

    void
    offset (const offset_type& x);

    void
    offset (const offset_optional& x);

    void
    offset (::std::unique_ptr< offset_type > p);

    // footnote
    //
    typedef ::musicxml::formatted_text footnote_type;
    typedef ::xsd::cxx::tree::optional< footnote_type > footnote_optional;
    typedef ::xsd::cxx::tree::traits< footnote_type, char > footnote_traits;

    const footnote_optional&
    footnote () const;

    footnote_optional&
    footnote ();

    void
    footnote (const footnote_type& x);

    void
    footnote (const footnote_optional& x);

    void
    footnote (::std::unique_ptr< footnote_type > p);

    // level
    //
    typedef ::musicxml::level level_type;
    typedef ::xsd::cxx::tree::optional< level_type > level_optional;
    typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

    const level_optional&
    level () const;

    level_optional&
    level ();

    void
    level (const level_type& x);

    void
    level (const level_optional& x);

    void
    level (::std::unique_ptr< level_type > p);

    // staff
    //
    typedef ::xml_schema::positive_integer staff_type;
    typedef ::xsd::cxx::tree::optional< staff_type > staff_optional;
    typedef ::xsd::cxx::tree::traits< staff_type, char > staff_traits;

    const staff_optional&
    staff () const;

    staff_optional&
    staff ();

    void
    staff (const staff_type& x);

    void
    staff (const staff_optional& x);

    // type
    //
    typedef ::musicxml::harmony_type type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    void
    type (::std::unique_ptr< type_type > p);

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // print-frame
    //
    typedef ::musicxml::yes_no print_frame_type;
    typedef ::xsd::cxx::tree::optional< print_frame_type > print_frame_optional;
    typedef ::xsd::cxx::tree::traits< print_frame_type, char > print_frame_traits;

    const print_frame_optional&
    print_frame () const;

    print_frame_optional&
    print_frame ();

    void
    print_frame (const print_frame_type& x);

    void
    print_frame (const print_frame_optional& x);

    void
    print_frame (::std::unique_ptr< print_frame_type > p);

    // arrangement
    //
    typedef ::musicxml::harmony_arrangement arrangement_type;
    typedef ::xsd::cxx::tree::optional< arrangement_type > arrangement_optional;
    typedef ::xsd::cxx::tree::traits< arrangement_type, char > arrangement_traits;

    const arrangement_optional&
    arrangement () const;

    arrangement_optional&
    arrangement ();

    void
    arrangement (const arrangement_type& x);

    void
    arrangement (const arrangement_optional& x);

    void
    arrangement (::std::unique_ptr< arrangement_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // system
    //
    typedef ::musicxml::system_relation system_type;
    typedef ::xsd::cxx::tree::optional< system_type > system_optional;
    typedef ::xsd::cxx::tree::traits< system_type, char > system_traits;

    const system_optional&
    system () const;

    system_optional&
    system ();

    void
    system (const system_type& x);

    void
    system (const system_optional& x);

    void
    system (::std::unique_ptr< system_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    harmony ();

    harmony (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    harmony (const harmony& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual harmony*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    harmony&
    operator= (const harmony& x);

    virtual 
    ~harmony ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    root_sequence root_;
    numeral_sequence numeral_;
    function_sequence function_;
    kind_sequence kind_;
    inversion_sequence inversion_;
    bass_sequence bass_;
    degree_sequence degree_;
    frame_optional frame_;
    offset_optional offset_;
    footnote_optional footnote_;
    level_optional level_;
    staff_optional staff_;
    type_optional type_;
    print_object_optional print_object_;
    print_frame_optional print_frame_;
    arrangement_optional arrangement_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
    system_optional system_;
    id_optional id_;
  };

  class harp_pedals: public ::xml_schema::type
  {
    public:
    // pedal-tuning
    //
    typedef ::musicxml::pedal_tuning pedal_tuning_type;
    typedef ::xsd::cxx::tree::sequence< pedal_tuning_type > pedal_tuning_sequence;
    typedef pedal_tuning_sequence::iterator pedal_tuning_iterator;
    typedef pedal_tuning_sequence::const_iterator pedal_tuning_const_iterator;
    typedef ::xsd::cxx::tree::traits< pedal_tuning_type, char > pedal_tuning_traits;

    const pedal_tuning_sequence&
    pedal_tuning () const;

    pedal_tuning_sequence&
    pedal_tuning ();

    void
    pedal_tuning (const pedal_tuning_sequence& s);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    harp_pedals ();

    harp_pedals (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    harp_pedals (const harp_pedals& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual harp_pedals*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    harp_pedals&
    operator= (const harp_pedals& x);

    virtual 
    ~harp_pedals ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    pedal_tuning_sequence pedal_tuning_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    id_optional id_;
  };

  class image: public ::xml_schema::type
  {
    public:
    // source
    //
    typedef ::xml_schema::uri source_type;
    typedef ::xsd::cxx::tree::traits< source_type, char > source_traits;

    const source_type&
    source () const;

    source_type&
    source ();

    void
    source (const source_type& x);

    void
    source (::std::unique_ptr< source_type > p);

    // type
    //
    typedef ::xml_schema::token type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // height
    //
    typedef ::musicxml::tenths height_type;
    typedef ::xsd::cxx::tree::optional< height_type > height_optional;
    typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

    const height_optional&
    height () const;

    height_optional&
    height ();

    void
    height (const height_type& x);

    void
    height (const height_optional& x);

    void
    height (::std::unique_ptr< height_type > p);

    // width
    //
    typedef ::musicxml::tenths width_type;
    typedef ::xsd::cxx::tree::optional< width_type > width_optional;
    typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

    const width_optional&
    width () const;

    width_optional&
    width ();

    void
    width (const width_type& x);

    void
    width (const width_optional& x);

    void
    width (::std::unique_ptr< width_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign_image valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    image (const source_type&,
           const type_type&);

    image (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    image (const image& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual image*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    image&
    operator= (const image& x);

    virtual 
    ~image ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< source_type > source_;
    ::xsd::cxx::tree::one< type_type > type_;
    height_optional height_;
    width_optional width_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    halign_optional halign_;
    valign_optional valign_;
    id_optional id_;
  };

  class instrument_change: public ::xml_schema::type
  {
    public:
    // instrument-sound
    //
    typedef ::xml_schema::string instrument_sound_type;
    typedef ::xsd::cxx::tree::optional< instrument_sound_type > instrument_sound_optional;
    typedef ::xsd::cxx::tree::traits< instrument_sound_type, char > instrument_sound_traits;

    const instrument_sound_optional&
    instrument_sound () const;

    instrument_sound_optional&
    instrument_sound ();

    void
    instrument_sound (const instrument_sound_type& x);

    void
    instrument_sound (const instrument_sound_optional& x);

    void
    instrument_sound (::std::unique_ptr< instrument_sound_type > p);

    // solo
    //
    typedef ::musicxml::empty solo_type;
    typedef ::xsd::cxx::tree::optional< solo_type > solo_optional;
    typedef ::xsd::cxx::tree::traits< solo_type, char > solo_traits;

    const solo_optional&
    solo () const;

    solo_optional&
    solo ();

    void
    solo (const solo_type& x);

    void
    solo (const solo_optional& x);

    void
    solo (::std::unique_ptr< solo_type > p);

    // ensemble
    //
    typedef ::musicxml::positive_integer_or_empty ensemble_type;
    typedef ::xsd::cxx::tree::optional< ensemble_type > ensemble_optional;
    typedef ::xsd::cxx::tree::traits< ensemble_type, char > ensemble_traits;

    const ensemble_optional&
    ensemble () const;

    ensemble_optional&
    ensemble ();

    void
    ensemble (const ensemble_type& x);

    void
    ensemble (const ensemble_optional& x);

    void
    ensemble (::std::unique_ptr< ensemble_type > p);

    // virtual-instrument
    //
    typedef ::musicxml::virtual_instrument virtual_instrument_type;
    typedef ::xsd::cxx::tree::optional< virtual_instrument_type > virtual_instrument_optional;
    typedef ::xsd::cxx::tree::traits< virtual_instrument_type, char > virtual_instrument_traits;

    const virtual_instrument_optional&
    virtual_instrument () const;

    virtual_instrument_optional&
    virtual_instrument ();

    void
    virtual_instrument (const virtual_instrument_type& x);

    void
    virtual_instrument (const virtual_instrument_optional& x);

    void
    virtual_instrument (::std::unique_ptr< virtual_instrument_type > p);

    // id
    //
    typedef ::xml_schema::idref id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    instrument_change (const id_type&);

    instrument_change (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    instrument_change (const instrument_change& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual instrument_change*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    instrument_change&
    operator= (const instrument_change& x);

    virtual 
    ~instrument_change ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    instrument_sound_optional instrument_sound_;
    solo_optional solo_;
    ensemble_optional ensemble_;
    virtual_instrument_optional virtual_instrument_;
    ::xsd::cxx::tree::one< id_type > id_;
  };

  class inversion: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type >
  {
    public:
    // text
    //
    typedef ::xml_schema::token text_type;
    typedef ::xsd::cxx::tree::optional< text_type > text_optional;
    typedef ::xsd::cxx::tree::traits< text_type, char > text_traits;

    const text_optional&
    text () const;

    text_optional&
    text ();

    void
    text (const text_type& x);

    void
    text (const text_optional& x);

    void
    text (::std::unique_ptr< text_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    inversion (const ::xml_schema::non_negative_integer&);

    inversion (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    inversion (const inversion& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual inversion*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    inversion&
    operator= (const inversion& x);

    virtual 
    ~inversion ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    text_optional text_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
  };

  class kind: public ::musicxml::kind_value
  {
    public:
    // use-symbols
    //
    typedef ::musicxml::yes_no use_symbols_type;
    typedef ::xsd::cxx::tree::optional< use_symbols_type > use_symbols_optional;
    typedef ::xsd::cxx::tree::traits< use_symbols_type, char > use_symbols_traits;

    const use_symbols_optional&
    use_symbols () const;

    use_symbols_optional&
    use_symbols ();

    void
    use_symbols (const use_symbols_type& x);

    void
    use_symbols (const use_symbols_optional& x);

    void
    use_symbols (::std::unique_ptr< use_symbols_type > p);

    // text
    //
    typedef ::xml_schema::token text_type;
    typedef ::xsd::cxx::tree::optional< text_type > text_optional;
    typedef ::xsd::cxx::tree::traits< text_type, char > text_traits;

    const text_optional&
    text () const;

    text_optional&
    text ();

    void
    text (const text_type& x);

    void
    text (const text_optional& x);

    void
    text (::std::unique_ptr< text_type > p);

    // stack-degrees
    //
    typedef ::musicxml::yes_no stack_degrees_type;
    typedef ::xsd::cxx::tree::optional< stack_degrees_type > stack_degrees_optional;
    typedef ::xsd::cxx::tree::traits< stack_degrees_type, char > stack_degrees_traits;

    const stack_degrees_optional&
    stack_degrees () const;

    stack_degrees_optional&
    stack_degrees ();

    void
    stack_degrees (const stack_degrees_type& x);

    void
    stack_degrees (const stack_degrees_optional& x);

    void
    stack_degrees (::std::unique_ptr< stack_degrees_type > p);

    // parentheses-degrees
    //
    typedef ::musicxml::yes_no parentheses_degrees_type;
    typedef ::xsd::cxx::tree::optional< parentheses_degrees_type > parentheses_degrees_optional;
    typedef ::xsd::cxx::tree::traits< parentheses_degrees_type, char > parentheses_degrees_traits;

    const parentheses_degrees_optional&
    parentheses_degrees () const;

    parentheses_degrees_optional&
    parentheses_degrees ();

    void
    parentheses_degrees (const parentheses_degrees_type& x);

    void
    parentheses_degrees (const parentheses_degrees_optional& x);

    void
    parentheses_degrees (::std::unique_ptr< parentheses_degrees_type > p);

    // bracket-degrees
    //
    typedef ::musicxml::yes_no bracket_degrees_type;
    typedef ::xsd::cxx::tree::optional< bracket_degrees_type > bracket_degrees_optional;
    typedef ::xsd::cxx::tree::traits< bracket_degrees_type, char > bracket_degrees_traits;

    const bracket_degrees_optional&
    bracket_degrees () const;

    bracket_degrees_optional&
    bracket_degrees ();

    void
    bracket_degrees (const bracket_degrees_type& x);

    void
    bracket_degrees (const bracket_degrees_optional& x);

    void
    bracket_degrees (::std::unique_ptr< bracket_degrees_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // Constructors.
    //
    kind (::musicxml::kind_value::value);

    kind (const char*);

    kind (const ::std::string&);

    kind (const ::musicxml::kind_value&);

    kind (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    kind (const kind& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual kind*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    kind&
    operator= (const kind& x);

    virtual 
    ~kind ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    use_symbols_optional use_symbols_;
    text_optional text_;
    stack_degrees_optional stack_degrees_;
    parentheses_degrees_optional parentheses_degrees_;
    bracket_degrees_optional bracket_degrees_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
  };

  class listening: public ::xml_schema::type
  {
    public:
    // sync
    //
    typedef ::musicxml::sync sync_type;
    typedef ::xsd::cxx::tree::sequence< sync_type > sync_sequence;
    typedef sync_sequence::iterator sync_iterator;
    typedef sync_sequence::const_iterator sync_const_iterator;
    typedef ::xsd::cxx::tree::traits< sync_type, char > sync_traits;

    const sync_sequence&
    sync () const;

    sync_sequence&
    sync ();

    void
    sync (const sync_sequence& s);

    // other-listening
    //
    typedef ::musicxml::other_listening other_listening_type;
    typedef ::xsd::cxx::tree::sequence< other_listening_type > other_listening_sequence;
    typedef other_listening_sequence::iterator other_listening_iterator;
    typedef other_listening_sequence::const_iterator other_listening_const_iterator;
    typedef ::xsd::cxx::tree::traits< other_listening_type, char > other_listening_traits;

    const other_listening_sequence&
    other_listening () const;

    other_listening_sequence&
    other_listening ();

    void
    other_listening (const other_listening_sequence& s);

    // offset
    //
    typedef ::musicxml::offset offset_type;
    typedef ::xsd::cxx::tree::optional< offset_type > offset_optional;
    typedef ::xsd::cxx::tree::traits< offset_type, char > offset_traits;

    const offset_optional&
    offset () const;

    offset_optional&
    offset ();

    void
    offset (const offset_type& x);

    void
    offset (const offset_optional& x);

    void
    offset (::std::unique_ptr< offset_type > p);

    // Constructors.
    //
    listening ();

    listening (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    listening (const listening& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual listening*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    listening&
    operator= (const listening& x);

    virtual 
    ~listening ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    sync_sequence sync_;
    other_listening_sequence other_listening_;
    offset_optional offset_;
  };

  class measure_numbering: public ::musicxml::measure_numbering_value
  {
    public:
    // system
    //
    typedef ::musicxml::system_relation_number system_type;
    typedef ::xsd::cxx::tree::optional< system_type > system_optional;
    typedef ::xsd::cxx::tree::traits< system_type, char > system_traits;

    const system_optional&
    system () const;

    system_optional&
    system ();

    void
    system (const system_type& x);

    void
    system (const system_optional& x);

    void
    system (::std::unique_ptr< system_type > p);

    // staff
    //
    typedef ::musicxml::staff_number staff_type;
    typedef ::xsd::cxx::tree::optional< staff_type > staff_optional;
    typedef ::xsd::cxx::tree::traits< staff_type, char > staff_traits;

    const staff_optional&
    staff () const;

    staff_optional&
    staff ();

    void
    staff (const staff_type& x);

    void
    staff (const staff_optional& x);

    void
    staff (::std::unique_ptr< staff_type > p);

    // multiple-rest-always
    //
    typedef ::musicxml::yes_no multiple_rest_always_type;
    typedef ::xsd::cxx::tree::optional< multiple_rest_always_type > multiple_rest_always_optional;
    typedef ::xsd::cxx::tree::traits< multiple_rest_always_type, char > multiple_rest_always_traits;

    const multiple_rest_always_optional&
    multiple_rest_always () const;

    multiple_rest_always_optional&
    multiple_rest_always ();

    void
    multiple_rest_always (const multiple_rest_always_type& x);

    void
    multiple_rest_always (const multiple_rest_always_optional& x);

    void
    multiple_rest_always (::std::unique_ptr< multiple_rest_always_type > p);

    // multiple-rest-range
    //
    typedef ::musicxml::yes_no multiple_rest_range_type;
    typedef ::xsd::cxx::tree::optional< multiple_rest_range_type > multiple_rest_range_optional;
    typedef ::xsd::cxx::tree::traits< multiple_rest_range_type, char > multiple_rest_range_traits;

    const multiple_rest_range_optional&
    multiple_rest_range () const;

    multiple_rest_range_optional&
    multiple_rest_range ();

    void
    multiple_rest_range (const multiple_rest_range_type& x);

    void
    multiple_rest_range (const multiple_rest_range_optional& x);

    void
    multiple_rest_range (::std::unique_ptr< multiple_rest_range_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // Constructors.
    //
    measure_numbering (::musicxml::measure_numbering_value::value);

    measure_numbering (const char*);

    measure_numbering (const ::std::string&);

    measure_numbering (const ::musicxml::measure_numbering_value&);

    measure_numbering (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    measure_numbering (const measure_numbering& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual measure_numbering*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    measure_numbering&
    operator= (const measure_numbering& x);

    virtual 
    ~measure_numbering ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    system_optional system_;
    staff_optional staff_;
    multiple_rest_always_optional multiple_rest_always_;
    multiple_rest_range_optional multiple_rest_range_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
  };

  class membrane: public ::musicxml::membrane_value
  {
    public:
    // smufl
    //
    typedef ::musicxml::smufl_pictogram_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    membrane (::musicxml::membrane_value::value);

    membrane (const char*);

    membrane (const ::std::string&);

    membrane (const ::musicxml::membrane_value&);

    membrane (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    membrane (const membrane& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual membrane*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    membrane&
    operator= (const membrane& x);

    virtual 
    ~membrane ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    smufl_optional smufl_;
  };

  class metal: public ::musicxml::metal_value
  {
    public:
    // smufl
    //
    typedef ::musicxml::smufl_pictogram_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    metal (::musicxml::metal_value::value);

    metal (const char*);

    metal (const ::std::string&);

    metal (const ::musicxml::metal_value&);

    metal (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    metal (const metal& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual metal*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    metal&
    operator= (const metal& x);

    virtual 
    ~metal ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    smufl_optional smufl_;
  };

  class metronome: public ::xml_schema::type
  {
    public:
    // beat-unit
    //
    typedef ::musicxml::note_type_value beat_unit_type;
    typedef ::xsd::cxx::tree::sequence< beat_unit_type > beat_unit_sequence;
    typedef beat_unit_sequence::iterator beat_unit_iterator;
    typedef beat_unit_sequence::const_iterator beat_unit_const_iterator;
    typedef ::xsd::cxx::tree::traits< beat_unit_type, char > beat_unit_traits;

    const beat_unit_sequence&
    beat_unit () const;

    beat_unit_sequence&
    beat_unit ();

    void
    beat_unit (const beat_unit_sequence& s);

    // beat-unit-dot
    //
    typedef ::musicxml::empty beat_unit_dot_type;
    typedef ::xsd::cxx::tree::sequence< beat_unit_dot_type > beat_unit_dot_sequence;
    typedef beat_unit_dot_sequence::iterator beat_unit_dot_iterator;
    typedef beat_unit_dot_sequence::const_iterator beat_unit_dot_const_iterator;
    typedef ::xsd::cxx::tree::traits< beat_unit_dot_type, char > beat_unit_dot_traits;

    const beat_unit_dot_sequence&
    beat_unit_dot () const;

    beat_unit_dot_sequence&
    beat_unit_dot ();

    void
    beat_unit_dot (const beat_unit_dot_sequence& s);

    // beat-unit-tied
    //
    typedef ::musicxml::beat_unit_tied beat_unit_tied_type;
    typedef ::xsd::cxx::tree::sequence< beat_unit_tied_type > beat_unit_tied_sequence;
    typedef beat_unit_tied_sequence::iterator beat_unit_tied_iterator;
    typedef beat_unit_tied_sequence::const_iterator beat_unit_tied_const_iterator;
    typedef ::xsd::cxx::tree::traits< beat_unit_tied_type, char > beat_unit_tied_traits;

    const beat_unit_tied_sequence&
    beat_unit_tied () const;

    beat_unit_tied_sequence&
    beat_unit_tied ();

    void
    beat_unit_tied (const beat_unit_tied_sequence& s);

    // per-minute
    //
    typedef ::musicxml::per_minute per_minute_type;
    typedef ::xsd::cxx::tree::optional< per_minute_type > per_minute_optional;
    typedef ::xsd::cxx::tree::traits< per_minute_type, char > per_minute_traits;

    const per_minute_optional&
    per_minute () const;

    per_minute_optional&
    per_minute ();

    void
    per_minute (const per_minute_type& x);

    void
    per_minute (const per_minute_optional& x);

    void
    per_minute (::std::unique_ptr< per_minute_type > p);

    // metronome-arrows
    //
    typedef ::musicxml::empty metronome_arrows_type;
    typedef ::xsd::cxx::tree::optional< metronome_arrows_type > metronome_arrows_optional;
    typedef ::xsd::cxx::tree::traits< metronome_arrows_type, char > metronome_arrows_traits;

    const metronome_arrows_optional&
    metronome_arrows () const;

    metronome_arrows_optional&
    metronome_arrows ();

    void
    metronome_arrows (const metronome_arrows_type& x);

    void
    metronome_arrows (const metronome_arrows_optional& x);

    void
    metronome_arrows (::std::unique_ptr< metronome_arrows_type > p);

    // metronome-note
    //
    typedef ::musicxml::metronome_note metronome_note_type;
    typedef ::xsd::cxx::tree::sequence< metronome_note_type > metronome_note_sequence;
    typedef metronome_note_sequence::iterator metronome_note_iterator;
    typedef metronome_note_sequence::const_iterator metronome_note_const_iterator;
    typedef ::xsd::cxx::tree::traits< metronome_note_type, char > metronome_note_traits;

    const metronome_note_sequence&
    metronome_note () const;

    metronome_note_sequence&
    metronome_note ();

    void
    metronome_note (const metronome_note_sequence& s);

    // metronome-relation
    //
    typedef ::xml_schema::string metronome_relation_type;
    typedef ::xsd::cxx::tree::optional< metronome_relation_type > metronome_relation_optional;
    typedef ::xsd::cxx::tree::traits< metronome_relation_type, char > metronome_relation_traits;

    const metronome_relation_optional&
    metronome_relation () const;

    metronome_relation_optional&
    metronome_relation ();

    void
    metronome_relation (const metronome_relation_type& x);

    void
    metronome_relation (const metronome_relation_optional& x);

    void
    metronome_relation (::std::unique_ptr< metronome_relation_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // justify
    //
    typedef ::musicxml::left_center_right justify_type;
    typedef ::xsd::cxx::tree::optional< justify_type > justify_optional;
    typedef ::xsd::cxx::tree::traits< justify_type, char > justify_traits;

    const justify_optional&
    justify () const;

    justify_optional&
    justify ();

    void
    justify (const justify_type& x);

    void
    justify (const justify_optional& x);

    void
    justify (::std::unique_ptr< justify_type > p);

    // parentheses
    //
    typedef ::musicxml::yes_no parentheses_type;
    typedef ::xsd::cxx::tree::optional< parentheses_type > parentheses_optional;
    typedef ::xsd::cxx::tree::traits< parentheses_type, char > parentheses_traits;

    const parentheses_optional&
    parentheses () const;

    parentheses_optional&
    parentheses ();

    void
    parentheses (const parentheses_type& x);

    void
    parentheses (const parentheses_optional& x);

    void
    parentheses (::std::unique_ptr< parentheses_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    metronome ();

    metronome (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    metronome (const metronome& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual metronome*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    metronome&
    operator= (const metronome& x);

    virtual 
    ~metronome ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    beat_unit_sequence beat_unit_;
    beat_unit_dot_sequence beat_unit_dot_;
    beat_unit_tied_sequence beat_unit_tied_;
    per_minute_optional per_minute_;
    metronome_arrows_optional metronome_arrows_;
    metronome_note_sequence metronome_note_;
    metronome_relation_optional metronome_relation_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    print_object_optional print_object_;
    justify_optional justify_;
    parentheses_optional parentheses_;
    id_optional id_;
  };

  class metronome_beam: public ::musicxml::beam_value
  {
    public:
    // number
    //
    typedef ::musicxml::beam_level number_type;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_type&
    number () const;

    number_type&
    number ();

    void
    number (const number_type& x);

    void
    number (::std::unique_ptr< number_type > p);

    static number_type
    number_default_value ();

    // Constructors.
    //
    metronome_beam (::musicxml::beam_value::value);

    metronome_beam (const char*);

    metronome_beam (const ::std::string&);

    metronome_beam (const ::musicxml::beam_value&);

    metronome_beam (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    metronome_beam (const metronome_beam& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual metronome_beam*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    metronome_beam&
    operator= (const metronome_beam& x);

    virtual 
    ~metronome_beam ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< number_type > number_;
  };

  class metronome_note: public ::xml_schema::type
  {
    public:
    // metronome-type
    //
    typedef ::musicxml::note_type_value metronome_type_type;
    typedef ::xsd::cxx::tree::traits< metronome_type_type, char > metronome_type_traits;

    const metronome_type_type&
    metronome_type () const;

    metronome_type_type&
    metronome_type ();

    void
    metronome_type (const metronome_type_type& x);

    void
    metronome_type (::std::unique_ptr< metronome_type_type > p);

    // metronome-dot
    //
    typedef ::musicxml::empty metronome_dot_type;
    typedef ::xsd::cxx::tree::sequence< metronome_dot_type > metronome_dot_sequence;
    typedef metronome_dot_sequence::iterator metronome_dot_iterator;
    typedef metronome_dot_sequence::const_iterator metronome_dot_const_iterator;
    typedef ::xsd::cxx::tree::traits< metronome_dot_type, char > metronome_dot_traits;

    const metronome_dot_sequence&
    metronome_dot () const;

    metronome_dot_sequence&
    metronome_dot ();

    void
    metronome_dot (const metronome_dot_sequence& s);

    // metronome-beam
    //
    typedef ::musicxml::metronome_beam metronome_beam_type;
    typedef ::xsd::cxx::tree::sequence< metronome_beam_type > metronome_beam_sequence;
    typedef metronome_beam_sequence::iterator metronome_beam_iterator;
    typedef metronome_beam_sequence::const_iterator metronome_beam_const_iterator;
    typedef ::xsd::cxx::tree::traits< metronome_beam_type, char > metronome_beam_traits;

    const metronome_beam_sequence&
    metronome_beam () const;

    metronome_beam_sequence&
    metronome_beam ();

    void
    metronome_beam (const metronome_beam_sequence& s);

    // metronome-tied
    //
    typedef ::musicxml::metronome_tied metronome_tied_type;
    typedef ::xsd::cxx::tree::optional< metronome_tied_type > metronome_tied_optional;
    typedef ::xsd::cxx::tree::traits< metronome_tied_type, char > metronome_tied_traits;

    const metronome_tied_optional&
    metronome_tied () const;

    metronome_tied_optional&
    metronome_tied ();

    void
    metronome_tied (const metronome_tied_type& x);

    void
    metronome_tied (const metronome_tied_optional& x);

    void
    metronome_tied (::std::unique_ptr< metronome_tied_type > p);

    // metronome-tuplet
    //
    typedef ::musicxml::metronome_tuplet metronome_tuplet_type;
    typedef ::xsd::cxx::tree::optional< metronome_tuplet_type > metronome_tuplet_optional;
    typedef ::xsd::cxx::tree::traits< metronome_tuplet_type, char > metronome_tuplet_traits;

    const metronome_tuplet_optional&
    metronome_tuplet () const;

    metronome_tuplet_optional&
    metronome_tuplet ();

    void
    metronome_tuplet (const metronome_tuplet_type& x);

    void
    metronome_tuplet (const metronome_tuplet_optional& x);

    void
    metronome_tuplet (::std::unique_ptr< metronome_tuplet_type > p);

    // Constructors.
    //
    metronome_note (const metronome_type_type&);

    metronome_note (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    metronome_note (const metronome_note& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual metronome_note*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    metronome_note&
    operator= (const metronome_note& x);

    virtual 
    ~metronome_note ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< metronome_type_type > metronome_type_;
    metronome_dot_sequence metronome_dot_;
    metronome_beam_sequence metronome_beam_;
    metronome_tied_optional metronome_tied_;
    metronome_tuplet_optional metronome_tuplet_;
  };

  class metronome_tied: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::start_stop type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    metronome_tied (const type_type&);

    metronome_tied (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    metronome_tied (const metronome_tied& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual metronome_tied*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    metronome_tied&
    operator= (const metronome_tied& x);

    virtual 
    ~metronome_tied ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
  };

  class time_modification: public ::xml_schema::type
  {
    public:
    // actual-notes
    //
    typedef ::xml_schema::non_negative_integer actual_notes_type;
    typedef ::xsd::cxx::tree::traits< actual_notes_type, char > actual_notes_traits;

    const actual_notes_type&
    actual_notes () const;

    actual_notes_type&
    actual_notes ();

    void
    actual_notes (const actual_notes_type& x);

    // normal-notes
    //
    typedef ::xml_schema::non_negative_integer normal_notes_type;
    typedef ::xsd::cxx::tree::traits< normal_notes_type, char > normal_notes_traits;

    const normal_notes_type&
    normal_notes () const;

    normal_notes_type&
    normal_notes ();

    void
    normal_notes (const normal_notes_type& x);

    // normal-type
    //
    typedef ::musicxml::note_type_value normal_type_type;
    typedef ::xsd::cxx::tree::optional< normal_type_type > normal_type_optional;
    typedef ::xsd::cxx::tree::traits< normal_type_type, char > normal_type_traits;

    const normal_type_optional&
    normal_type () const;

    normal_type_optional&
    normal_type ();

    void
    normal_type (const normal_type_type& x);

    void
    normal_type (const normal_type_optional& x);

    void
    normal_type (::std::unique_ptr< normal_type_type > p);

    // normal-dot
    //
    typedef ::musicxml::empty normal_dot_type;
    typedef ::xsd::cxx::tree::sequence< normal_dot_type > normal_dot_sequence;
    typedef normal_dot_sequence::iterator normal_dot_iterator;
    typedef normal_dot_sequence::const_iterator normal_dot_const_iterator;
    typedef ::xsd::cxx::tree::traits< normal_dot_type, char > normal_dot_traits;

    const normal_dot_sequence&
    normal_dot () const;

    normal_dot_sequence&
    normal_dot ();

    void
    normal_dot (const normal_dot_sequence& s);

    // Constructors.
    //
    time_modification (const actual_notes_type&,
                       const normal_notes_type&);

    time_modification (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    time_modification (const time_modification& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual time_modification*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    time_modification&
    operator= (const time_modification& x);

    virtual 
    ~time_modification ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< actual_notes_type > actual_notes_;
    ::xsd::cxx::tree::one< normal_notes_type > normal_notes_;
    normal_type_optional normal_type_;
    normal_dot_sequence normal_dot_;
  };

  class metronome_tuplet: public ::musicxml::time_modification
  {
    public:
    // type
    //
    typedef ::musicxml::start_stop type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // bracket
    //
    typedef ::musicxml::yes_no bracket_type;
    typedef ::xsd::cxx::tree::optional< bracket_type > bracket_optional;
    typedef ::xsd::cxx::tree::traits< bracket_type, char > bracket_traits;

    const bracket_optional&
    bracket () const;

    bracket_optional&
    bracket ();

    void
    bracket (const bracket_type& x);

    void
    bracket (const bracket_optional& x);

    void
    bracket (::std::unique_ptr< bracket_type > p);

    // show-number
    //
    typedef ::musicxml::show_tuplet show_number_type;
    typedef ::xsd::cxx::tree::optional< show_number_type > show_number_optional;
    typedef ::xsd::cxx::tree::traits< show_number_type, char > show_number_traits;

    const show_number_optional&
    show_number () const;

    show_number_optional&
    show_number ();

    void
    show_number (const show_number_type& x);

    void
    show_number (const show_number_optional& x);

    void
    show_number (::std::unique_ptr< show_number_type > p);

    // Constructors.
    //
    metronome_tuplet (const actual_notes_type&,
                      const normal_notes_type&,
                      const type_type&);

    metronome_tuplet (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    metronome_tuplet (const metronome_tuplet& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual metronome_tuplet*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    metronome_tuplet&
    operator= (const metronome_tuplet& x);

    virtual 
    ~metronome_tuplet ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    bracket_optional bracket_;
    show_number_optional show_number_;
  };

  class numeral: public ::xml_schema::type
  {
    public:
    // numeral-root
    //
    typedef ::musicxml::numeral_root numeral_root_type;
    typedef ::xsd::cxx::tree::traits< numeral_root_type, char > numeral_root_traits;

    const numeral_root_type&
    numeral_root () const;

    numeral_root_type&
    numeral_root ();

    void
    numeral_root (const numeral_root_type& x);

    void
    numeral_root (::std::unique_ptr< numeral_root_type > p);

    // numeral-alter
    //
    typedef ::musicxml::harmony_alter numeral_alter_type;
    typedef ::xsd::cxx::tree::optional< numeral_alter_type > numeral_alter_optional;
    typedef ::xsd::cxx::tree::traits< numeral_alter_type, char > numeral_alter_traits;

    const numeral_alter_optional&
    numeral_alter () const;

    numeral_alter_optional&
    numeral_alter ();

    void
    numeral_alter (const numeral_alter_type& x);

    void
    numeral_alter (const numeral_alter_optional& x);

    void
    numeral_alter (::std::unique_ptr< numeral_alter_type > p);

    // numeral-key
    //
    typedef ::musicxml::numeral_key numeral_key_type;
    typedef ::xsd::cxx::tree::optional< numeral_key_type > numeral_key_optional;
    typedef ::xsd::cxx::tree::traits< numeral_key_type, char > numeral_key_traits;

    const numeral_key_optional&
    numeral_key () const;

    numeral_key_optional&
    numeral_key ();

    void
    numeral_key (const numeral_key_type& x);

    void
    numeral_key (const numeral_key_optional& x);

    void
    numeral_key (::std::unique_ptr< numeral_key_type > p);

    // Constructors.
    //
    numeral (const numeral_root_type&);

    numeral (::std::unique_ptr< numeral_root_type >);

    numeral (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    numeral (const numeral& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual numeral*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    numeral&
    operator= (const numeral& x);

    virtual 
    ~numeral ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< numeral_root_type > numeral_root_;
    numeral_alter_optional numeral_alter_;
    numeral_key_optional numeral_key_;
  };

  class numeral_key: public ::xml_schema::type
  {
    public:
    // numeral-fifths
    //
    typedef ::musicxml::fifths numeral_fifths_type;
    typedef ::xsd::cxx::tree::traits< numeral_fifths_type, char > numeral_fifths_traits;

    const numeral_fifths_type&
    numeral_fifths () const;

    numeral_fifths_type&
    numeral_fifths ();

    void
    numeral_fifths (const numeral_fifths_type& x);

    void
    numeral_fifths (::std::unique_ptr< numeral_fifths_type > p);

    // numeral-mode
    //
    typedef ::musicxml::numeral_mode numeral_mode_type;
    typedef ::xsd::cxx::tree::traits< numeral_mode_type, char > numeral_mode_traits;

    const numeral_mode_type&
    numeral_mode () const;

    numeral_mode_type&
    numeral_mode ();

    void
    numeral_mode (const numeral_mode_type& x);

    void
    numeral_mode (::std::unique_ptr< numeral_mode_type > p);

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // Constructors.
    //
    numeral_key (const numeral_fifths_type&,
                 const numeral_mode_type&);

    numeral_key (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    numeral_key (const numeral_key& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual numeral_key*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    numeral_key&
    operator= (const numeral_key& x);

    virtual 
    ~numeral_key ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< numeral_fifths_type > numeral_fifths_;
    ::xsd::cxx::tree::one< numeral_mode_type > numeral_mode_;
    print_object_optional print_object_;
  };

  class numeral_root: public ::musicxml::numeral_value
  {
    public:
    // text
    //
    typedef ::xml_schema::token text_type;
    typedef ::xsd::cxx::tree::optional< text_type > text_optional;
    typedef ::xsd::cxx::tree::traits< text_type, char > text_traits;

    const text_optional&
    text () const;

    text_optional&
    text ();

    void
    text (const text_type& x);

    void
    text (const text_optional& x);

    void
    text (::std::unique_ptr< text_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    numeral_root (const ::xml_schema::positive_integer&);

    numeral_root (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    numeral_root (const numeral_root& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual numeral_root*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    numeral_root&
    operator= (const numeral_root& x);

    virtual 
    ~numeral_root ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    text_optional text_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
  };

  class octave_shift: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::up_down_stop_continue type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // number
    //
    typedef ::musicxml::number_level number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // size
    //
    typedef ::xml_schema::positive_integer size_type;
    typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

    const size_type&
    size () const;

    size_type&
    size ();

    void
    size (const size_type& x);

    static size_type
    size_default_value ();

    // dash-length
    //
    typedef ::musicxml::tenths dash_length_type;
    typedef ::xsd::cxx::tree::optional< dash_length_type > dash_length_optional;
    typedef ::xsd::cxx::tree::traits< dash_length_type, char > dash_length_traits;

    const dash_length_optional&
    dash_length () const;

    dash_length_optional&
    dash_length ();

    void
    dash_length (const dash_length_type& x);

    void
    dash_length (const dash_length_optional& x);

    void
    dash_length (::std::unique_ptr< dash_length_type > p);

    // space-length
    //
    typedef ::musicxml::tenths space_length_type;
    typedef ::xsd::cxx::tree::optional< space_length_type > space_length_optional;
    typedef ::xsd::cxx::tree::traits< space_length_type, char > space_length_traits;

    const space_length_optional&
    space_length () const;

    space_length_optional&
    space_length ();

    void
    space_length (const space_length_type& x);

    void
    space_length (const space_length_optional& x);

    void
    space_length (::std::unique_ptr< space_length_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    octave_shift (const type_type&);

    octave_shift (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    octave_shift (const octave_shift& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual octave_shift*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    octave_shift&
    operator= (const octave_shift& x);

    virtual 
    ~octave_shift ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    number_optional number_;
    ::xsd::cxx::tree::one< size_type > size_;
    dash_length_optional dash_length_;
    space_length_optional space_length_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    id_optional id_;
  };

  class offset: public ::musicxml::divisions
  {
    public:
    // sound
    //
    typedef ::musicxml::yes_no sound_type;
    typedef ::xsd::cxx::tree::optional< sound_type > sound_optional;
    typedef ::xsd::cxx::tree::traits< sound_type, char > sound_traits;

    const sound_optional&
    sound () const;

    sound_optional&
    sound ();

    void
    sound (const sound_type& x);

    void
    sound (const sound_optional& x);

    void
    sound (::std::unique_ptr< sound_type > p);

    // Constructors.
    //
    offset (const ::xml_schema::decimal&);

    offset (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    offset (const offset& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual offset*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    offset&
    operator= (const offset& x);

    virtual 
    ~offset ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    sound_optional sound_;
  };

  class other_direction: public ::xml_schema::string
  {
    public:
    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // smufl
    //
    typedef ::musicxml::smufl_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    other_direction ();

    other_direction (const char*);

    other_direction (const ::std::string&);

    other_direction (const ::xml_schema::string&);

    other_direction (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    other_direction (const other_direction& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual other_direction*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    other_direction&
    operator= (const other_direction& x);

    virtual 
    ~other_direction ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    print_object_optional print_object_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    smufl_optional smufl_;
    id_optional id_;
  };

  class other_listening: public ::xml_schema::string
  {
    public:
    // type
    //
    typedef ::xml_schema::token type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // player
    //
    typedef ::xml_schema::idref player_type;
    typedef ::xsd::cxx::tree::optional< player_type > player_optional;
    typedef ::xsd::cxx::tree::traits< player_type, char > player_traits;

    const player_optional&
    player () const;

    player_optional&
    player ();

    void
    player (const player_type& x);

    void
    player (const player_optional& x);

    void
    player (::std::unique_ptr< player_type > p);

    // time-only
    //
    typedef ::musicxml::time_only time_only_type;
    typedef ::xsd::cxx::tree::optional< time_only_type > time_only_optional;
    typedef ::xsd::cxx::tree::traits< time_only_type, char > time_only_traits;

    const time_only_optional&
    time_only () const;

    time_only_optional&
    time_only ();

    void
    time_only (const time_only_type& x);

    void
    time_only (const time_only_optional& x);

    void
    time_only (::std::unique_ptr< time_only_type > p);

    // Constructors.
    //
    other_listening (const type_type&);

    other_listening (const char*,
                     const type_type&);

    other_listening (const ::std::string&,
                     const type_type&);

    other_listening (const ::xml_schema::string&,
                     const type_type&);

    other_listening (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    other_listening (const other_listening& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual other_listening*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    other_listening&
    operator= (const other_listening& x);

    virtual 
    ~other_listening ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    player_optional player_;
    time_only_optional time_only_;
  };

  class pedal: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::pedal_type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // number
    //
    typedef ::musicxml::number_level number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // line
    //
    typedef ::musicxml::yes_no line_type;
    typedef ::xsd::cxx::tree::optional< line_type > line_optional;
    typedef ::xsd::cxx::tree::traits< line_type, char > line_traits;

    const line_optional&
    line () const;

    line_optional&
    line ();

    void
    line (const line_type& x);

    void
    line (const line_optional& x);

    void
    line (::std::unique_ptr< line_type > p);

    // sign
    //
    typedef ::musicxml::yes_no sign_type;
    typedef ::xsd::cxx::tree::optional< sign_type > sign_optional;
    typedef ::xsd::cxx::tree::traits< sign_type, char > sign_traits;

    const sign_optional&
    sign () const;

    sign_optional&
    sign ();

    void
    sign (const sign_type& x);

    void
    sign (const sign_optional& x);

    void
    sign (::std::unique_ptr< sign_type > p);

    // abbreviated
    //
    typedef ::musicxml::yes_no abbreviated_type;
    typedef ::xsd::cxx::tree::optional< abbreviated_type > abbreviated_optional;
    typedef ::xsd::cxx::tree::traits< abbreviated_type, char > abbreviated_traits;

    const abbreviated_optional&
    abbreviated () const;

    abbreviated_optional&
    abbreviated ();

    void
    abbreviated (const abbreviated_type& x);

    void
    abbreviated (const abbreviated_optional& x);

    void
    abbreviated (::std::unique_ptr< abbreviated_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    pedal (const type_type&);

    pedal (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    pedal (const pedal& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual pedal*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    pedal&
    operator= (const pedal& x);

    virtual 
    ~pedal ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    number_optional number_;
    line_optional line_;
    sign_optional sign_;
    abbreviated_optional abbreviated_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    id_optional id_;
  };

  class pedal_tuning: public ::xml_schema::type
  {
    public:
    // pedal-step
    //
    typedef ::musicxml::step pedal_step_type;
    typedef ::xsd::cxx::tree::traits< pedal_step_type, char > pedal_step_traits;

    const pedal_step_type&
    pedal_step () const;

    pedal_step_type&
    pedal_step ();

    void
    pedal_step (const pedal_step_type& x);

    void
    pedal_step (::std::unique_ptr< pedal_step_type > p);

    // pedal-alter
    //
    typedef ::musicxml::semitones pedal_alter_type;
    typedef ::xsd::cxx::tree::traits< pedal_alter_type, char > pedal_alter_traits;

    const pedal_alter_type&
    pedal_alter () const;

    pedal_alter_type&
    pedal_alter ();

    void
    pedal_alter (const pedal_alter_type& x);

    void
    pedal_alter (::std::unique_ptr< pedal_alter_type > p);

    // Constructors.
    //
    pedal_tuning (const pedal_step_type&,
                  const pedal_alter_type&);

    pedal_tuning (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    pedal_tuning (const pedal_tuning& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual pedal_tuning*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    pedal_tuning&
    operator= (const pedal_tuning& x);

    virtual 
    ~pedal_tuning ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< pedal_step_type > pedal_step_;
    ::xsd::cxx::tree::one< pedal_alter_type > pedal_alter_;
  };

  class per_minute: public ::xml_schema::string
  {
    public:
    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // Constructors.
    //
    per_minute ();

    per_minute (const char*);

    per_minute (const ::std::string&);

    per_minute (const ::xml_schema::string&);

    per_minute (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    per_minute (const per_minute& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual per_minute*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    per_minute&
    operator= (const per_minute& x);

    virtual 
    ~per_minute ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
  };

  class percussion: public ::xml_schema::type
  {
    public:
    // glass
    //
    typedef ::musicxml::glass glass_type;
    typedef ::xsd::cxx::tree::optional< glass_type > glass_optional;
    typedef ::xsd::cxx::tree::traits< glass_type, char > glass_traits;

    const glass_optional&
    glass () const;

    glass_optional&
    glass ();

    void
    glass (const glass_type& x);

    void
    glass (const glass_optional& x);

    void
    glass (::std::unique_ptr< glass_type > p);

    // metal
    //
    typedef ::musicxml::metal metal_type;
    typedef ::xsd::cxx::tree::optional< metal_type > metal_optional;
    typedef ::xsd::cxx::tree::traits< metal_type, char > metal_traits;

    const metal_optional&
    metal () const;

    metal_optional&
    metal ();

    void
    metal (const metal_type& x);

    void
    metal (const metal_optional& x);

    void
    metal (::std::unique_ptr< metal_type > p);

    // wood
    //
    typedef ::musicxml::wood wood_type;
    typedef ::xsd::cxx::tree::optional< wood_type > wood_optional;
    typedef ::xsd::cxx::tree::traits< wood_type, char > wood_traits;

    const wood_optional&
    wood () const;

    wood_optional&
    wood ();

    void
    wood (const wood_type& x);

    void
    wood (const wood_optional& x);

    void
    wood (::std::unique_ptr< wood_type > p);

    // pitched
    //
    typedef ::musicxml::pitched pitched_type;
    typedef ::xsd::cxx::tree::optional< pitched_type > pitched_optional;
    typedef ::xsd::cxx::tree::traits< pitched_type, char > pitched_traits;

    const pitched_optional&
    pitched () const;

    pitched_optional&
    pitched ();

    void
    pitched (const pitched_type& x);

    void
    pitched (const pitched_optional& x);

    void
    pitched (::std::unique_ptr< pitched_type > p);

    // membrane
    //
    typedef ::musicxml::membrane membrane_type;
    typedef ::xsd::cxx::tree::optional< membrane_type > membrane_optional;
    typedef ::xsd::cxx::tree::traits< membrane_type, char > membrane_traits;

    const membrane_optional&
    membrane () const;

    membrane_optional&
    membrane ();

    void
    membrane (const membrane_type& x);

    void
    membrane (const membrane_optional& x);

    void
    membrane (::std::unique_ptr< membrane_type > p);

    // effect
    //
    typedef ::musicxml::effect effect_type;
    typedef ::xsd::cxx::tree::optional< effect_type > effect_optional;
    typedef ::xsd::cxx::tree::traits< effect_type, char > effect_traits;

    const effect_optional&
    effect () const;

    effect_optional&
    effect ();

    void
    effect (const effect_type& x);

    void
    effect (const effect_optional& x);

    void
    effect (::std::unique_ptr< effect_type > p);

    // timpani
    //
    typedef ::musicxml::timpani timpani_type;
    typedef ::xsd::cxx::tree::optional< timpani_type > timpani_optional;
    typedef ::xsd::cxx::tree::traits< timpani_type, char > timpani_traits;

    const timpani_optional&
    timpani () const;

    timpani_optional&
    timpani ();

    void
    timpani (const timpani_type& x);

    void
    timpani (const timpani_optional& x);

    void
    timpani (::std::unique_ptr< timpani_type > p);

    // beater
    //
    typedef ::musicxml::beater beater_type;
    typedef ::xsd::cxx::tree::optional< beater_type > beater_optional;
    typedef ::xsd::cxx::tree::traits< beater_type, char > beater_traits;

    const beater_optional&
    beater () const;

    beater_optional&
    beater ();

    void
    beater (const beater_type& x);

    void
    beater (const beater_optional& x);

    void
    beater (::std::unique_ptr< beater_type > p);

    // stick
    //
    typedef ::musicxml::stick stick_type;
    typedef ::xsd::cxx::tree::optional< stick_type > stick_optional;
    typedef ::xsd::cxx::tree::traits< stick_type, char > stick_traits;

    const stick_optional&
    stick () const;

    stick_optional&
    stick ();

    void
    stick (const stick_type& x);

    void
    stick (const stick_optional& x);

    void
    stick (::std::unique_ptr< stick_type > p);

    // stick-location
    //
    typedef ::musicxml::stick_location stick_location_type;
    typedef ::xsd::cxx::tree::optional< stick_location_type > stick_location_optional;
    typedef ::xsd::cxx::tree::traits< stick_location_type, char > stick_location_traits;

    const stick_location_optional&
    stick_location () const;

    stick_location_optional&
    stick_location ();

    void
    stick_location (const stick_location_type& x);

    void
    stick_location (const stick_location_optional& x);

    void
    stick_location (::std::unique_ptr< stick_location_type > p);

    // other-percussion
    //
    typedef ::musicxml::other_text other_percussion_type;
    typedef ::xsd::cxx::tree::optional< other_percussion_type > other_percussion_optional;
    typedef ::xsd::cxx::tree::traits< other_percussion_type, char > other_percussion_traits;

    const other_percussion_optional&
    other_percussion () const;

    other_percussion_optional&
    other_percussion ();

    void
    other_percussion (const other_percussion_type& x);

    void
    other_percussion (const other_percussion_optional& x);

    void
    other_percussion (::std::unique_ptr< other_percussion_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // enclosure
    //
    typedef ::musicxml::enclosure_shape enclosure_type;
    typedef ::xsd::cxx::tree::optional< enclosure_type > enclosure_optional;
    typedef ::xsd::cxx::tree::traits< enclosure_type, char > enclosure_traits;

    const enclosure_optional&
    enclosure () const;

    enclosure_optional&
    enclosure ();

    void
    enclosure (const enclosure_type& x);

    void
    enclosure (const enclosure_optional& x);

    void
    enclosure (::std::unique_ptr< enclosure_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    percussion ();

    percussion (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    percussion (const percussion& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual percussion*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    percussion&
    operator= (const percussion& x);

    virtual 
    ~percussion ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    glass_optional glass_;
    metal_optional metal_;
    wood_optional wood_;
    pitched_optional pitched_;
    membrane_optional membrane_;
    effect_optional effect_;
    timpani_optional timpani_;
    beater_optional beater_;
    stick_optional stick_;
    stick_location_optional stick_location_;
    other_percussion_optional other_percussion_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    enclosure_optional enclosure_;
    id_optional id_;
  };

  class pitched: public ::musicxml::pitched_value
  {
    public:
    // smufl
    //
    typedef ::musicxml::smufl_pictogram_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    pitched (::musicxml::pitched_value::value);

    pitched (const char*);

    pitched (const ::std::string&);

    pitched (const ::musicxml::pitched_value&);

    pitched (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    pitched (const pitched& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual pitched*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    pitched&
    operator= (const pitched& x);

    virtual 
    ~pitched ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    smufl_optional smufl_;
  };

  class principal_voice: public ::xml_schema::string
  {
    public:
    // type
    //
    typedef ::musicxml::start_stop type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // symbol
    //
    typedef ::musicxml::principal_voice_symbol symbol_type;
    typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

    const symbol_type&
    symbol () const;

    symbol_type&
    symbol ();

    void
    symbol (const symbol_type& x);

    void
    symbol (::std::unique_ptr< symbol_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    principal_voice (const type_type&,
                     const symbol_type&);

    principal_voice (const char*,
                     const type_type&,
                     const symbol_type&);

    principal_voice (const ::std::string&,
                     const type_type&,
                     const symbol_type&);

    principal_voice (const ::xml_schema::string&,
                     const type_type&,
                     const symbol_type&);

    principal_voice (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    principal_voice (const principal_voice& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual principal_voice*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    principal_voice&
    operator= (const principal_voice& x);

    virtual 
    ~principal_voice ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    ::xsd::cxx::tree::one< symbol_type > symbol_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    id_optional id_;
  };

  class print: public ::xml_schema::type
  {
    public:
    // page-layout
    //
    typedef ::musicxml::page_layout page_layout_type;
    typedef ::xsd::cxx::tree::optional< page_layout_type > page_layout_optional;
    typedef ::xsd::cxx::tree::traits< page_layout_type, char > page_layout_traits;

    const page_layout_optional&
    page_layout () const;

    page_layout_optional&
    page_layout ();

    void
    page_layout (const page_layout_type& x);

    void
    page_layout (const page_layout_optional& x);

    void
    page_layout (::std::unique_ptr< page_layout_type > p);

    // system-layout
    //
    typedef ::musicxml::system_layout system_layout_type;
    typedef ::xsd::cxx::tree::optional< system_layout_type > system_layout_optional;
    typedef ::xsd::cxx::tree::traits< system_layout_type, char > system_layout_traits;

    const system_layout_optional&
    system_layout () const;

    system_layout_optional&
    system_layout ();

    void
    system_layout (const system_layout_type& x);

    void
    system_layout (const system_layout_optional& x);

    void
    system_layout (::std::unique_ptr< system_layout_type > p);

    // staff-layout
    //
    typedef ::musicxml::staff_layout staff_layout_type;
    typedef ::xsd::cxx::tree::sequence< staff_layout_type > staff_layout_sequence;
    typedef staff_layout_sequence::iterator staff_layout_iterator;
    typedef staff_layout_sequence::const_iterator staff_layout_const_iterator;
    typedef ::xsd::cxx::tree::traits< staff_layout_type, char > staff_layout_traits;

    const staff_layout_sequence&
    staff_layout () const;

    staff_layout_sequence&
    staff_layout ();

    void
    staff_layout (const staff_layout_sequence& s);

    // measure-layout
    //
    typedef ::musicxml::measure_layout measure_layout_type;
    typedef ::xsd::cxx::tree::optional< measure_layout_type > measure_layout_optional;
    typedef ::xsd::cxx::tree::traits< measure_layout_type, char > measure_layout_traits;

    const measure_layout_optional&
    measure_layout () const;

    measure_layout_optional&
    measure_layout ();

    void
    measure_layout (const measure_layout_type& x);

    void
    measure_layout (const measure_layout_optional& x);

    void
    measure_layout (::std::unique_ptr< measure_layout_type > p);

    // measure-numbering
    //
    typedef ::musicxml::measure_numbering measure_numbering_type;
    typedef ::xsd::cxx::tree::optional< measure_numbering_type > measure_numbering_optional;
    typedef ::xsd::cxx::tree::traits< measure_numbering_type, char > measure_numbering_traits;

    const measure_numbering_optional&
    measure_numbering () const;

    measure_numbering_optional&
    measure_numbering ();

    void
    measure_numbering (const measure_numbering_type& x);

    void
    measure_numbering (const measure_numbering_optional& x);

    void
    measure_numbering (::std::unique_ptr< measure_numbering_type > p);

    // part-name-display
    //
    typedef ::musicxml::name_display part_name_display_type;
    typedef ::xsd::cxx::tree::optional< part_name_display_type > part_name_display_optional;
    typedef ::xsd::cxx::tree::traits< part_name_display_type, char > part_name_display_traits;

    const part_name_display_optional&
    part_name_display () const;

    part_name_display_optional&
    part_name_display ();

    void
    part_name_display (const part_name_display_type& x);

    void
    part_name_display (const part_name_display_optional& x);

    void
    part_name_display (::std::unique_ptr< part_name_display_type > p);

    // part-abbreviation-display
    //
    typedef ::musicxml::name_display part_abbreviation_display_type;
    typedef ::xsd::cxx::tree::optional< part_abbreviation_display_type > part_abbreviation_display_optional;
    typedef ::xsd::cxx::tree::traits< part_abbreviation_display_type, char > part_abbreviation_display_traits;

    const part_abbreviation_display_optional&
    part_abbreviation_display () const;

    part_abbreviation_display_optional&
    part_abbreviation_display ();

    void
    part_abbreviation_display (const part_abbreviation_display_type& x);

    void
    part_abbreviation_display (const part_abbreviation_display_optional& x);

    void
    part_abbreviation_display (::std::unique_ptr< part_abbreviation_display_type > p);

    // staff-spacing
    //
    typedef ::musicxml::tenths staff_spacing_type;
    typedef ::xsd::cxx::tree::optional< staff_spacing_type > staff_spacing_optional;
    typedef ::xsd::cxx::tree::traits< staff_spacing_type, char > staff_spacing_traits;

    const staff_spacing_optional&
    staff_spacing () const;

    staff_spacing_optional&
    staff_spacing ();

    void
    staff_spacing (const staff_spacing_type& x);

    void
    staff_spacing (const staff_spacing_optional& x);

    void
    staff_spacing (::std::unique_ptr< staff_spacing_type > p);

    // new-system
    //
    typedef ::musicxml::yes_no new_system_type;
    typedef ::xsd::cxx::tree::optional< new_system_type > new_system_optional;
    typedef ::xsd::cxx::tree::traits< new_system_type, char > new_system_traits;

    const new_system_optional&
    new_system () const;

    new_system_optional&
    new_system ();

    void
    new_system (const new_system_type& x);

    void
    new_system (const new_system_optional& x);

    void
    new_system (::std::unique_ptr< new_system_type > p);

    // new-page
    //
    typedef ::musicxml::yes_no new_page_type;
    typedef ::xsd::cxx::tree::optional< new_page_type > new_page_optional;
    typedef ::xsd::cxx::tree::traits< new_page_type, char > new_page_traits;

    const new_page_optional&
    new_page () const;

    new_page_optional&
    new_page ();

    void
    new_page (const new_page_type& x);

    void
    new_page (const new_page_optional& x);

    void
    new_page (::std::unique_ptr< new_page_type > p);

    // blank-page
    //
    typedef ::xml_schema::positive_integer blank_page_type;
    typedef ::xsd::cxx::tree::optional< blank_page_type > blank_page_optional;
    typedef ::xsd::cxx::tree::traits< blank_page_type, char > blank_page_traits;

    const blank_page_optional&
    blank_page () const;

    blank_page_optional&
    blank_page ();

    void
    blank_page (const blank_page_type& x);

    void
    blank_page (const blank_page_optional& x);

    // page-number
    //
    typedef ::xml_schema::token page_number_type;
    typedef ::xsd::cxx::tree::optional< page_number_type > page_number_optional;
    typedef ::xsd::cxx::tree::traits< page_number_type, char > page_number_traits;

    const page_number_optional&
    page_number () const;

    page_number_optional&
    page_number ();

    void
    page_number (const page_number_type& x);

    void
    page_number (const page_number_optional& x);

    void
    page_number (::std::unique_ptr< page_number_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    print ();

    print (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    print (const print& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual print*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    print&
    operator= (const print& x);

    virtual 
    ~print ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    page_layout_optional page_layout_;
    system_layout_optional system_layout_;
    staff_layout_sequence staff_layout_;
    measure_layout_optional measure_layout_;
    measure_numbering_optional measure_numbering_;
    part_name_display_optional part_name_display_;
    part_abbreviation_display_optional part_abbreviation_display_;
    staff_spacing_optional staff_spacing_;
    new_system_optional new_system_;
    new_page_optional new_page_;
    blank_page_optional blank_page_;
    page_number_optional page_number_;
    id_optional id_;
  };

  class root: public ::xml_schema::type
  {
    public:
    // root-step
    //
    typedef ::musicxml::root_step root_step_type;
    typedef ::xsd::cxx::tree::traits< root_step_type, char > root_step_traits;

    const root_step_type&
    root_step () const;

    root_step_type&
    root_step ();

    void
    root_step (const root_step_type& x);

    void
    root_step (::std::unique_ptr< root_step_type > p);

    // root-alter
    //
    typedef ::musicxml::harmony_alter root_alter_type;
    typedef ::xsd::cxx::tree::optional< root_alter_type > root_alter_optional;
    typedef ::xsd::cxx::tree::traits< root_alter_type, char > root_alter_traits;

    const root_alter_optional&
    root_alter () const;

    root_alter_optional&
    root_alter ();

    void
    root_alter (const root_alter_type& x);

    void
    root_alter (const root_alter_optional& x);

    void
    root_alter (::std::unique_ptr< root_alter_type > p);

    // Constructors.
    //
    root (const root_step_type&);

    root (::std::unique_ptr< root_step_type >);

    root (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    root (const root& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual root*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    root&
    operator= (const root& x);

    virtual 
    ~root ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< root_step_type > root_step_;
    root_alter_optional root_alter_;
  };

  class root_step: public ::musicxml::step
  {
    public:
    // text
    //
    typedef ::xml_schema::token text_type;
    typedef ::xsd::cxx::tree::optional< text_type > text_optional;
    typedef ::xsd::cxx::tree::traits< text_type, char > text_traits;

    const text_optional&
    text () const;

    text_optional&
    text ();

    void
    text (const text_type& x);

    void
    text (const text_optional& x);

    void
    text (::std::unique_ptr< text_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    root_step (::musicxml::step::value);

    root_step (const char*);

    root_step (const ::std::string&);

    root_step (const ::musicxml::step&);

    root_step (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    root_step (const root_step& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual root_step*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    root_step&
    operator= (const root_step& x);

    virtual 
    ~root_step ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    text_optional text_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
  };

  class scordatura: public ::xml_schema::type
  {
    public:
    // accord
    //
    typedef ::musicxml::accord accord_type;
    typedef ::xsd::cxx::tree::sequence< accord_type > accord_sequence;
    typedef accord_sequence::iterator accord_iterator;
    typedef accord_sequence::const_iterator accord_const_iterator;
    typedef ::xsd::cxx::tree::traits< accord_type, char > accord_traits;

    const accord_sequence&
    accord () const;

    accord_sequence&
    accord ();

    void
    accord (const accord_sequence& s);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    scordatura ();

    scordatura (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    scordatura (const scordatura& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual scordatura*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    scordatura&
    operator= (const scordatura& x);

    virtual 
    ~scordatura ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    accord_sequence accord_;
    id_optional id_;
  };

  class sound: public ::xml_schema::type
  {
    public:
    // instrument-change
    //
    typedef ::musicxml::instrument_change instrument_change_type;
    typedef ::xsd::cxx::tree::sequence< instrument_change_type > instrument_change_sequence;
    typedef instrument_change_sequence::iterator instrument_change_iterator;
    typedef instrument_change_sequence::const_iterator instrument_change_const_iterator;
    typedef ::xsd::cxx::tree::traits< instrument_change_type, char > instrument_change_traits;

    const instrument_change_sequence&
    instrument_change () const;

    instrument_change_sequence&
    instrument_change ();

    void
    instrument_change (const instrument_change_sequence& s);

    // midi-device
    //
    typedef ::musicxml::midi_device midi_device_type;
    typedef ::xsd::cxx::tree::sequence< midi_device_type > midi_device_sequence;
    typedef midi_device_sequence::iterator midi_device_iterator;
    typedef midi_device_sequence::const_iterator midi_device_const_iterator;
    typedef ::xsd::cxx::tree::traits< midi_device_type, char > midi_device_traits;

    const midi_device_sequence&
    midi_device () const;

    midi_device_sequence&
    midi_device ();

    void
    midi_device (const midi_device_sequence& s);

    // midi-instrument
    //
    typedef ::musicxml::midi_instrument midi_instrument_type;
    typedef ::xsd::cxx::tree::sequence< midi_instrument_type > midi_instrument_sequence;
    typedef midi_instrument_sequence::iterator midi_instrument_iterator;
    typedef midi_instrument_sequence::const_iterator midi_instrument_const_iterator;
    typedef ::xsd::cxx::tree::traits< midi_instrument_type, char > midi_instrument_traits;

    const midi_instrument_sequence&
    midi_instrument () const;

    midi_instrument_sequence&
    midi_instrument ();

    void
    midi_instrument (const midi_instrument_sequence& s);

    // play
    //
    typedef ::musicxml::play play_type;
    typedef ::xsd::cxx::tree::sequence< play_type > play_sequence;
    typedef play_sequence::iterator play_iterator;
    typedef play_sequence::const_iterator play_const_iterator;
    typedef ::xsd::cxx::tree::traits< play_type, char > play_traits;

    const play_sequence&
    play () const;

    play_sequence&
    play ();

    void
    play (const play_sequence& s);

    // swing
    //
    typedef ::musicxml::swing swing_type;
    typedef ::xsd::cxx::tree::optional< swing_type > swing_optional;
    typedef ::xsd::cxx::tree::traits< swing_type, char > swing_traits;

    const swing_optional&
    swing () const;

    swing_optional&
    swing ();

    void
    swing (const swing_type& x);

    void
    swing (const swing_optional& x);

    void
    swing (::std::unique_ptr< swing_type > p);

    // offset
    //
    typedef ::musicxml::offset offset_type;
    typedef ::xsd::cxx::tree::optional< offset_type > offset_optional;
    typedef ::xsd::cxx::tree::traits< offset_type, char > offset_traits;

    const offset_optional&
    offset () const;

    offset_optional&
    offset ();

    void
    offset (const offset_type& x);

    void
    offset (const offset_optional& x);

    void
    offset (::std::unique_ptr< offset_type > p);

    // tempo
    //
    typedef ::musicxml::non_negative_decimal tempo_type;
    typedef ::xsd::cxx::tree::optional< tempo_type > tempo_optional;
    typedef ::xsd::cxx::tree::traits< tempo_type, char > tempo_traits;

    const tempo_optional&
    tempo () const;

    tempo_optional&
    tempo ();

    void
    tempo (const tempo_type& x);

    void
    tempo (const tempo_optional& x);

    void
    tempo (::std::unique_ptr< tempo_type > p);

    // dynamics
    //
    typedef ::musicxml::non_negative_decimal dynamics_type;
    typedef ::xsd::cxx::tree::optional< dynamics_type > dynamics_optional;
    typedef ::xsd::cxx::tree::traits< dynamics_type, char > dynamics_traits;

    const dynamics_optional&
    dynamics () const;

    dynamics_optional&
    dynamics ();

    void
    dynamics (const dynamics_type& x);

    void
    dynamics (const dynamics_optional& x);

    void
    dynamics (::std::unique_ptr< dynamics_type > p);

    // dacapo
    //
    typedef ::musicxml::yes_no dacapo_type;
    typedef ::xsd::cxx::tree::optional< dacapo_type > dacapo_optional;
    typedef ::xsd::cxx::tree::traits< dacapo_type, char > dacapo_traits;

    const dacapo_optional&
    dacapo () const;

    dacapo_optional&
    dacapo ();

    void
    dacapo (const dacapo_type& x);

    void
    dacapo (const dacapo_optional& x);

    void
    dacapo (::std::unique_ptr< dacapo_type > p);

    // segno
    //
    typedef ::xml_schema::token segno_type;
    typedef ::xsd::cxx::tree::optional< segno_type > segno_optional;
    typedef ::xsd::cxx::tree::traits< segno_type, char > segno_traits;

    const segno_optional&
    segno () const;

    segno_optional&
    segno ();

    void
    segno (const segno_type& x);

    void
    segno (const segno_optional& x);

    void
    segno (::std::unique_ptr< segno_type > p);

    // dalsegno
    //
    typedef ::xml_schema::token dalsegno_type;
    typedef ::xsd::cxx::tree::optional< dalsegno_type > dalsegno_optional;
    typedef ::xsd::cxx::tree::traits< dalsegno_type, char > dalsegno_traits;

    const dalsegno_optional&
    dalsegno () const;

    dalsegno_optional&
    dalsegno ();

    void
    dalsegno (const dalsegno_type& x);

    void
    dalsegno (const dalsegno_optional& x);

    void
    dalsegno (::std::unique_ptr< dalsegno_type > p);

    // coda
    //
    typedef ::xml_schema::token coda_type;
    typedef ::xsd::cxx::tree::optional< coda_type > coda_optional;
    typedef ::xsd::cxx::tree::traits< coda_type, char > coda_traits;

    const coda_optional&
    coda () const;

    coda_optional&
    coda ();

    void
    coda (const coda_type& x);

    void
    coda (const coda_optional& x);

    void
    coda (::std::unique_ptr< coda_type > p);

    // tocoda
    //
    typedef ::xml_schema::token tocoda_type;
    typedef ::xsd::cxx::tree::optional< tocoda_type > tocoda_optional;
    typedef ::xsd::cxx::tree::traits< tocoda_type, char > tocoda_traits;

    const tocoda_optional&
    tocoda () const;

    tocoda_optional&
    tocoda ();

    void
    tocoda (const tocoda_type& x);

    void
    tocoda (const tocoda_optional& x);

    void
    tocoda (::std::unique_ptr< tocoda_type > p);

    // divisions
    //
    typedef ::musicxml::divisions divisions_type;
    typedef ::xsd::cxx::tree::optional< divisions_type > divisions_optional;
    typedef ::xsd::cxx::tree::traits< divisions_type, char > divisions_traits;

    const divisions_optional&
    divisions () const;

    divisions_optional&
    divisions ();

    void
    divisions (const divisions_type& x);

    void
    divisions (const divisions_optional& x);

    void
    divisions (::std::unique_ptr< divisions_type > p);

    // forward-repeat
    //
    typedef ::musicxml::yes_no forward_repeat_type;
    typedef ::xsd::cxx::tree::optional< forward_repeat_type > forward_repeat_optional;
    typedef ::xsd::cxx::tree::traits< forward_repeat_type, char > forward_repeat_traits;

    const forward_repeat_optional&
    forward_repeat () const;

    forward_repeat_optional&
    forward_repeat ();

    void
    forward_repeat (const forward_repeat_type& x);

    void
    forward_repeat (const forward_repeat_optional& x);

    void
    forward_repeat (::std::unique_ptr< forward_repeat_type > p);

    // fine
    //
    typedef ::xml_schema::token fine_type;
    typedef ::xsd::cxx::tree::optional< fine_type > fine_optional;
    typedef ::xsd::cxx::tree::traits< fine_type, char > fine_traits;

    const fine_optional&
    fine () const;

    fine_optional&
    fine ();

    void
    fine (const fine_type& x);

    void
    fine (const fine_optional& x);

    void
    fine (::std::unique_ptr< fine_type > p);

    // time-only
    //
    typedef ::musicxml::time_only time_only_type;
    typedef ::xsd::cxx::tree::optional< time_only_type > time_only_optional;
    typedef ::xsd::cxx::tree::traits< time_only_type, char > time_only_traits;

    const time_only_optional&
    time_only () const;

    time_only_optional&
    time_only ();

    void
    time_only (const time_only_type& x);

    void
    time_only (const time_only_optional& x);

    void
    time_only (::std::unique_ptr< time_only_type > p);

    // pizzicato
    //
    typedef ::musicxml::yes_no pizzicato_type;
    typedef ::xsd::cxx::tree::optional< pizzicato_type > pizzicato_optional;
    typedef ::xsd::cxx::tree::traits< pizzicato_type, char > pizzicato_traits;

    const pizzicato_optional&
    pizzicato () const;

    pizzicato_optional&
    pizzicato ();

    void
    pizzicato (const pizzicato_type& x);

    void
    pizzicato (const pizzicato_optional& x);

    void
    pizzicato (::std::unique_ptr< pizzicato_type > p);

    // pan
    //
    typedef ::musicxml::rotation_degrees pan_type;
    typedef ::xsd::cxx::tree::optional< pan_type > pan_optional;
    typedef ::xsd::cxx::tree::traits< pan_type, char > pan_traits;

    const pan_optional&
    pan () const;

    pan_optional&
    pan ();

    void
    pan (const pan_type& x);

    void
    pan (const pan_optional& x);

    void
    pan (::std::unique_ptr< pan_type > p);

    // elevation
    //
    typedef ::musicxml::rotation_degrees elevation_type;
    typedef ::xsd::cxx::tree::optional< elevation_type > elevation_optional;
    typedef ::xsd::cxx::tree::traits< elevation_type, char > elevation_traits;

    const elevation_optional&
    elevation () const;

    elevation_optional&
    elevation ();

    void
    elevation (const elevation_type& x);

    void
    elevation (const elevation_optional& x);

    void
    elevation (::std::unique_ptr< elevation_type > p);

    // damper-pedal
    //
    typedef ::musicxml::yes_no_number damper_pedal_type;
    typedef ::xsd::cxx::tree::optional< damper_pedal_type > damper_pedal_optional;
    typedef ::xsd::cxx::tree::traits< damper_pedal_type, char > damper_pedal_traits;

    const damper_pedal_optional&
    damper_pedal () const;

    damper_pedal_optional&
    damper_pedal ();

    void
    damper_pedal (const damper_pedal_type& x);

    void
    damper_pedal (const damper_pedal_optional& x);

    void
    damper_pedal (::std::unique_ptr< damper_pedal_type > p);

    // soft-pedal
    //
    typedef ::musicxml::yes_no_number soft_pedal_type;
    typedef ::xsd::cxx::tree::optional< soft_pedal_type > soft_pedal_optional;
    typedef ::xsd::cxx::tree::traits< soft_pedal_type, char > soft_pedal_traits;

    const soft_pedal_optional&
    soft_pedal () const;

    soft_pedal_optional&
    soft_pedal ();

    void
    soft_pedal (const soft_pedal_type& x);

    void
    soft_pedal (const soft_pedal_optional& x);

    void
    soft_pedal (::std::unique_ptr< soft_pedal_type > p);

    // sostenuto-pedal
    //
    typedef ::musicxml::yes_no_number sostenuto_pedal_type;
    typedef ::xsd::cxx::tree::optional< sostenuto_pedal_type > sostenuto_pedal_optional;
    typedef ::xsd::cxx::tree::traits< sostenuto_pedal_type, char > sostenuto_pedal_traits;

    const sostenuto_pedal_optional&
    sostenuto_pedal () const;

    sostenuto_pedal_optional&
    sostenuto_pedal ();

    void
    sostenuto_pedal (const sostenuto_pedal_type& x);

    void
    sostenuto_pedal (const sostenuto_pedal_optional& x);

    void
    sostenuto_pedal (::std::unique_ptr< sostenuto_pedal_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    sound ();

    sound (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    sound (const sound& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual sound*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    sound&
    operator= (const sound& x);

    virtual 
    ~sound ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    instrument_change_sequence instrument_change_;
    midi_device_sequence midi_device_;
    midi_instrument_sequence midi_instrument_;
    play_sequence play_;
    swing_optional swing_;
    offset_optional offset_;
    tempo_optional tempo_;
    dynamics_optional dynamics_;
    dacapo_optional dacapo_;
    segno_optional segno_;
    dalsegno_optional dalsegno_;
    coda_optional coda_;
    tocoda_optional tocoda_;
    divisions_optional divisions_;
    forward_repeat_optional forward_repeat_;
    fine_optional fine_;
    time_only_optional time_only_;
    pizzicato_optional pizzicato_;
    pan_optional pan_;
    elevation_optional elevation_;
    damper_pedal_optional damper_pedal_;
    soft_pedal_optional soft_pedal_;
    sostenuto_pedal_optional sostenuto_pedal_;
    id_optional id_;
  };

  class staff_divide: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::staff_divide_symbol type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    staff_divide (const type_type&);

    staff_divide (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    staff_divide (const staff_divide& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual staff_divide*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    staff_divide&
    operator= (const staff_divide& x);

    virtual 
    ~staff_divide ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    id_optional id_;
  };

  class stick: public ::xml_schema::type
  {
    public:
    // stick-type
    //
    typedef ::musicxml::stick_type stick_type_type;
    typedef ::xsd::cxx::tree::traits< stick_type_type, char > stick_type_traits;

    const stick_type_type&
    stick_type () const;

    stick_type_type&
    stick_type ();

    void
    stick_type (const stick_type_type& x);

    void
    stick_type (::std::unique_ptr< stick_type_type > p);

    // stick-material
    //
    typedef ::musicxml::stick_material stick_material_type;
    typedef ::xsd::cxx::tree::traits< stick_material_type, char > stick_material_traits;

    const stick_material_type&
    stick_material () const;

    stick_material_type&
    stick_material ();

    void
    stick_material (const stick_material_type& x);

    void
    stick_material (::std::unique_ptr< stick_material_type > p);

    // tip
    //
    typedef ::musicxml::tip_direction tip_type;
    typedef ::xsd::cxx::tree::optional< tip_type > tip_optional;
    typedef ::xsd::cxx::tree::traits< tip_type, char > tip_traits;

    const tip_optional&
    tip () const;

    tip_optional&
    tip ();

    void
    tip (const tip_type& x);

    void
    tip (const tip_optional& x);

    void
    tip (::std::unique_ptr< tip_type > p);

    // parentheses
    //
    typedef ::musicxml::yes_no parentheses_type;
    typedef ::xsd::cxx::tree::optional< parentheses_type > parentheses_optional;
    typedef ::xsd::cxx::tree::traits< parentheses_type, char > parentheses_traits;

    const parentheses_optional&
    parentheses () const;

    parentheses_optional&
    parentheses ();

    void
    parentheses (const parentheses_type& x);

    void
    parentheses (const parentheses_optional& x);

    void
    parentheses (::std::unique_ptr< parentheses_type > p);

    // dashed-circle
    //
    typedef ::musicxml::yes_no dashed_circle_type;
    typedef ::xsd::cxx::tree::optional< dashed_circle_type > dashed_circle_optional;
    typedef ::xsd::cxx::tree::traits< dashed_circle_type, char > dashed_circle_traits;

    const dashed_circle_optional&
    dashed_circle () const;

    dashed_circle_optional&
    dashed_circle ();

    void
    dashed_circle (const dashed_circle_type& x);

    void
    dashed_circle (const dashed_circle_optional& x);

    void
    dashed_circle (::std::unique_ptr< dashed_circle_type > p);

    // Constructors.
    //
    stick (const stick_type_type&,
           const stick_material_type&);

    stick (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    stick (const stick& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual stick*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    stick&
    operator= (const stick& x);

    virtual 
    ~stick ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< stick_type_type > stick_type_;
    ::xsd::cxx::tree::one< stick_material_type > stick_material_;
    tip_optional tip_;
    parentheses_optional parentheses_;
    dashed_circle_optional dashed_circle_;
  };

  class string_mute: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::on_off type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    string_mute (const type_type&);

    string_mute (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    string_mute (const string_mute& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual string_mute*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    string_mute&
    operator= (const string_mute& x);

    virtual 
    ~string_mute ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    id_optional id_;
  };

  class swing: public ::xml_schema::type
  {
    public:
    // straight
    //
    typedef ::musicxml::empty straight_type;
    typedef ::xsd::cxx::tree::optional< straight_type > straight_optional;
    typedef ::xsd::cxx::tree::traits< straight_type, char > straight_traits;

    const straight_optional&
    straight () const;

    straight_optional&
    straight ();

    void
    straight (const straight_type& x);

    void
    straight (const straight_optional& x);

    void
    straight (::std::unique_ptr< straight_type > p);

    // first
    //
    typedef ::xml_schema::positive_integer first_type;
    typedef ::xsd::cxx::tree::optional< first_type > first_optional;
    typedef ::xsd::cxx::tree::traits< first_type, char > first_traits;

    const first_optional&
    first () const;

    first_optional&
    first ();

    void
    first (const first_type& x);

    void
    first (const first_optional& x);

    // second
    //
    typedef ::xml_schema::positive_integer second_type;
    typedef ::xsd::cxx::tree::optional< second_type > second_optional;
    typedef ::xsd::cxx::tree::traits< second_type, char > second_traits;

    const second_optional&
    second () const;

    second_optional&
    second ();

    void
    second (const second_type& x);

    void
    second (const second_optional& x);

    // swing-type
    //
    typedef ::musicxml::swing_type_value swing_type_type;
    typedef ::xsd::cxx::tree::optional< swing_type_type > swing_type_optional;
    typedef ::xsd::cxx::tree::traits< swing_type_type, char > swing_type_traits;

    const swing_type_optional&
    swing_type () const;

    swing_type_optional&
    swing_type ();

    void
    swing_type (const swing_type_type& x);

    void
    swing_type (const swing_type_optional& x);

    void
    swing_type (::std::unique_ptr< swing_type_type > p);

    // swing-style
    //
    typedef ::xml_schema::string swing_style_type;
    typedef ::xsd::cxx::tree::optional< swing_style_type > swing_style_optional;
    typedef ::xsd::cxx::tree::traits< swing_style_type, char > swing_style_traits;

    const swing_style_optional&
    swing_style () const;

    swing_style_optional&
    swing_style ();

    void
    swing_style (const swing_style_type& x);

    void
    swing_style (const swing_style_optional& x);

    void
    swing_style (::std::unique_ptr< swing_style_type > p);

    // Constructors.
    //
    swing ();

    swing (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    swing (const swing& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual swing*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    swing&
    operator= (const swing& x);

    virtual 
    ~swing ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    straight_optional straight_;
    first_optional first_;
    second_optional second_;
    swing_type_optional swing_type_;
    swing_style_optional swing_style_;
  };

  class sync: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::sync_type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // latency
    //
    typedef ::musicxml::milliseconds latency_type;
    typedef ::xsd::cxx::tree::optional< latency_type > latency_optional;
    typedef ::xsd::cxx::tree::traits< latency_type, char > latency_traits;

    const latency_optional&
    latency () const;

    latency_optional&
    latency ();

    void
    latency (const latency_type& x);

    void
    latency (const latency_optional& x);

    void
    latency (::std::unique_ptr< latency_type > p);

    // player
    //
    typedef ::xml_schema::idref player_type;
    typedef ::xsd::cxx::tree::optional< player_type > player_optional;
    typedef ::xsd::cxx::tree::traits< player_type, char > player_traits;

    const player_optional&
    player () const;

    player_optional&
    player ();

    void
    player (const player_type& x);

    void
    player (const player_optional& x);

    void
    player (::std::unique_ptr< player_type > p);

    // time-only
    //
    typedef ::musicxml::time_only time_only_type;
    typedef ::xsd::cxx::tree::optional< time_only_type > time_only_optional;
    typedef ::xsd::cxx::tree::traits< time_only_type, char > time_only_traits;

    const time_only_optional&
    time_only () const;

    time_only_optional&
    time_only ();

    void
    time_only (const time_only_type& x);

    void
    time_only (const time_only_optional& x);

    void
    time_only (::std::unique_ptr< time_only_type > p);

    // Constructors.
    //
    sync (const type_type&);

    sync (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    sync (const sync& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual sync*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    sync&
    operator= (const sync& x);

    virtual 
    ~sync ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    latency_optional latency_;
    player_optional player_;
    time_only_optional time_only_;
  };

  class timpani: public ::xml_schema::type
  {
    public:
    // smufl
    //
    typedef ::musicxml::smufl_pictogram_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    timpani ();

    timpani (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    timpani (const timpani& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual timpani*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    timpani&
    operator= (const timpani& x);

    virtual 
    ~timpani ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    smufl_optional smufl_;
  };

  class wedge: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::wedge_type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // number
    //
    typedef ::musicxml::number_level number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // spread
    //
    typedef ::musicxml::tenths spread_type;
    typedef ::xsd::cxx::tree::optional< spread_type > spread_optional;
    typedef ::xsd::cxx::tree::traits< spread_type, char > spread_traits;

    const spread_optional&
    spread () const;

    spread_optional&
    spread ();

    void
    spread (const spread_type& x);

    void
    spread (const spread_optional& x);

    void
    spread (::std::unique_ptr< spread_type > p);

    // niente
    //
    typedef ::musicxml::yes_no niente_type;
    typedef ::xsd::cxx::tree::optional< niente_type > niente_optional;
    typedef ::xsd::cxx::tree::traits< niente_type, char > niente_traits;

    const niente_optional&
    niente () const;

    niente_optional&
    niente ();

    void
    niente (const niente_type& x);

    void
    niente (const niente_optional& x);

    void
    niente (::std::unique_ptr< niente_type > p);

    // line-type
    //
    typedef ::musicxml::line_type line_type_type;
    typedef ::xsd::cxx::tree::optional< line_type_type > line_type_optional;
    typedef ::xsd::cxx::tree::traits< line_type_type, char > line_type_traits;

    const line_type_optional&
    line_type () const;

    line_type_optional&
    line_type ();

    void
    line_type (const line_type_type& x);

    void
    line_type (const line_type_optional& x);

    void
    line_type (::std::unique_ptr< line_type_type > p);

    // dash-length
    //
    typedef ::musicxml::tenths dash_length_type;
    typedef ::xsd::cxx::tree::optional< dash_length_type > dash_length_optional;
    typedef ::xsd::cxx::tree::traits< dash_length_type, char > dash_length_traits;

    const dash_length_optional&
    dash_length () const;

    dash_length_optional&
    dash_length ();

    void
    dash_length (const dash_length_type& x);

    void
    dash_length (const dash_length_optional& x);

    void
    dash_length (::std::unique_ptr< dash_length_type > p);

    // space-length
    //
    typedef ::musicxml::tenths space_length_type;
    typedef ::xsd::cxx::tree::optional< space_length_type > space_length_optional;
    typedef ::xsd::cxx::tree::traits< space_length_type, char > space_length_traits;

    const space_length_optional&
    space_length () const;

    space_length_optional&
    space_length ();

    void
    space_length (const space_length_type& x);

    void
    space_length (const space_length_optional& x);

    void
    space_length (::std::unique_ptr< space_length_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    wedge (const type_type&);

    wedge (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    wedge (const wedge& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual wedge*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    wedge&
    operator= (const wedge& x);

    virtual 
    ~wedge ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    number_optional number_;
    spread_optional spread_;
    niente_optional niente_;
    line_type_optional line_type_;
    dash_length_optional dash_length_;
    space_length_optional space_length_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    color_optional color_;
    id_optional id_;
  };

  class wood: public ::musicxml::wood_value
  {
    public:
    // smufl
    //
    typedef ::musicxml::smufl_pictogram_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    wood (::musicxml::wood_value::value);

    wood (const char*);

    wood (const ::std::string&);

    wood (const ::musicxml::wood_value&);

    wood (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    wood (const wood& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual wood*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    wood&
    operator= (const wood& x);

    virtual 
    ~wood ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    smufl_optional smufl_;
  };

  class encoding: public ::xml_schema::type
  {
    public:
    // encoding-date
    //
    typedef ::musicxml::yyyy_mm_dd encoding_date_type;
    typedef ::xsd::cxx::tree::sequence< encoding_date_type > encoding_date_sequence;
    typedef encoding_date_sequence::iterator encoding_date_iterator;
    typedef encoding_date_sequence::const_iterator encoding_date_const_iterator;
    typedef ::xsd::cxx::tree::traits< encoding_date_type, char > encoding_date_traits;

    const encoding_date_sequence&
    encoding_date () const;

    encoding_date_sequence&
    encoding_date ();

    void
    encoding_date (const encoding_date_sequence& s);

    // encoder
    //
    typedef ::musicxml::typed_text encoder_type;
    typedef ::xsd::cxx::tree::sequence< encoder_type > encoder_sequence;
    typedef encoder_sequence::iterator encoder_iterator;
    typedef encoder_sequence::const_iterator encoder_const_iterator;
    typedef ::xsd::cxx::tree::traits< encoder_type, char > encoder_traits;

    const encoder_sequence&
    encoder () const;

    encoder_sequence&
    encoder ();

    void
    encoder (const encoder_sequence& s);

    // software
    //
    typedef ::xml_schema::string software_type;
    typedef ::xsd::cxx::tree::sequence< software_type > software_sequence;
    typedef software_sequence::iterator software_iterator;
    typedef software_sequence::const_iterator software_const_iterator;
    typedef ::xsd::cxx::tree::traits< software_type, char > software_traits;

    const software_sequence&
    software () const;

    software_sequence&
    software ();

    void
    software (const software_sequence& s);

    // encoding-description
    //
    typedef ::xml_schema::string encoding_description_type;
    typedef ::xsd::cxx::tree::sequence< encoding_description_type > encoding_description_sequence;
    typedef encoding_description_sequence::iterator encoding_description_iterator;
    typedef encoding_description_sequence::const_iterator encoding_description_const_iterator;
    typedef ::xsd::cxx::tree::traits< encoding_description_type, char > encoding_description_traits;

    const encoding_description_sequence&
    encoding_description () const;

    encoding_description_sequence&
    encoding_description ();

    void
    encoding_description (const encoding_description_sequence& s);

    // supports
    //
    typedef ::musicxml::supports supports_type;
    typedef ::xsd::cxx::tree::sequence< supports_type > supports_sequence;
    typedef supports_sequence::iterator supports_iterator;
    typedef supports_sequence::const_iterator supports_const_iterator;
    typedef ::xsd::cxx::tree::traits< supports_type, char > supports_traits;

    const supports_sequence&
    supports () const;

    supports_sequence&
    supports ();

    void
    supports (const supports_sequence& s);

    // Constructors.
    //
    encoding ();

    encoding (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    encoding (const encoding& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual encoding*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    encoding&
    operator= (const encoding& x);

    virtual 
    ~encoding ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    encoding_date_sequence encoding_date_;
    encoder_sequence encoder_;
    software_sequence software_;
    encoding_description_sequence encoding_description_;
    supports_sequence supports_;
  };

  class identification: public ::xml_schema::type
  {
    public:
    // creator
    //
    typedef ::musicxml::typed_text creator_type;
    typedef ::xsd::cxx::tree::sequence< creator_type > creator_sequence;
    typedef creator_sequence::iterator creator_iterator;
    typedef creator_sequence::const_iterator creator_const_iterator;
    typedef ::xsd::cxx::tree::traits< creator_type, char > creator_traits;

    const creator_sequence&
    creator () const;

    creator_sequence&
    creator ();

    void
    creator (const creator_sequence& s);

    // rights
    //
    typedef ::musicxml::typed_text rights_type;
    typedef ::xsd::cxx::tree::sequence< rights_type > rights_sequence;
    typedef rights_sequence::iterator rights_iterator;
    typedef rights_sequence::const_iterator rights_const_iterator;
    typedef ::xsd::cxx::tree::traits< rights_type, char > rights_traits;

    const rights_sequence&
    rights () const;

    rights_sequence&
    rights ();

    void
    rights (const rights_sequence& s);

    // encoding
    //
    typedef ::musicxml::encoding encoding_type;
    typedef ::xsd::cxx::tree::optional< encoding_type > encoding_optional;
    typedef ::xsd::cxx::tree::traits< encoding_type, char > encoding_traits;

    const encoding_optional&
    encoding () const;

    encoding_optional&
    encoding ();

    void
    encoding (const encoding_type& x);

    void
    encoding (const encoding_optional& x);

    void
    encoding (::std::unique_ptr< encoding_type > p);

    // source
    //
    typedef ::xml_schema::string source_type;
    typedef ::xsd::cxx::tree::optional< source_type > source_optional;
    typedef ::xsd::cxx::tree::traits< source_type, char > source_traits;

    const source_optional&
    source () const;

    source_optional&
    source ();

    void
    source (const source_type& x);

    void
    source (const source_optional& x);

    void
    source (::std::unique_ptr< source_type > p);

    // relation
    //
    typedef ::musicxml::typed_text relation_type;
    typedef ::xsd::cxx::tree::sequence< relation_type > relation_sequence;
    typedef relation_sequence::iterator relation_iterator;
    typedef relation_sequence::const_iterator relation_const_iterator;
    typedef ::xsd::cxx::tree::traits< relation_type, char > relation_traits;

    const relation_sequence&
    relation () const;

    relation_sequence&
    relation ();

    void
    relation (const relation_sequence& s);

    // miscellaneous
    //
    typedef ::musicxml::miscellaneous miscellaneous_type;
    typedef ::xsd::cxx::tree::optional< miscellaneous_type > miscellaneous_optional;
    typedef ::xsd::cxx::tree::traits< miscellaneous_type, char > miscellaneous_traits;

    const miscellaneous_optional&
    miscellaneous () const;

    miscellaneous_optional&
    miscellaneous ();

    void
    miscellaneous (const miscellaneous_type& x);

    void
    miscellaneous (const miscellaneous_optional& x);

    void
    miscellaneous (::std::unique_ptr< miscellaneous_type > p);

    // Constructors.
    //
    identification ();

    identification (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    identification (const identification& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual identification*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    identification&
    operator= (const identification& x);

    virtual 
    ~identification ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    creator_sequence creator_;
    rights_sequence rights_;
    encoding_optional encoding_;
    source_optional source_;
    relation_sequence relation_;
    miscellaneous_optional miscellaneous_;
  };

  class miscellaneous: public ::xml_schema::type
  {
    public:
    // miscellaneous-field
    //
    typedef ::musicxml::miscellaneous_field miscellaneous_field_type;
    typedef ::xsd::cxx::tree::sequence< miscellaneous_field_type > miscellaneous_field_sequence;
    typedef miscellaneous_field_sequence::iterator miscellaneous_field_iterator;
    typedef miscellaneous_field_sequence::const_iterator miscellaneous_field_const_iterator;
    typedef ::xsd::cxx::tree::traits< miscellaneous_field_type, char > miscellaneous_field_traits;

    const miscellaneous_field_sequence&
    miscellaneous_field () const;

    miscellaneous_field_sequence&
    miscellaneous_field ();

    void
    miscellaneous_field (const miscellaneous_field_sequence& s);

    // Constructors.
    //
    miscellaneous ();

    miscellaneous (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    miscellaneous (const miscellaneous& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual miscellaneous*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    miscellaneous&
    operator= (const miscellaneous& x);

    virtual 
    ~miscellaneous ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    miscellaneous_field_sequence miscellaneous_field_;
  };

  class miscellaneous_field: public ::xml_schema::string
  {
    public:
    // name
    //
    typedef ::xml_schema::token name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // Constructors.
    //
    miscellaneous_field (const name_type&);

    miscellaneous_field (const char*,
                         const name_type&);

    miscellaneous_field (const ::std::string&,
                         const name_type&);

    miscellaneous_field (const ::xml_schema::string&,
                         const name_type&);

    miscellaneous_field (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    miscellaneous_field (const miscellaneous_field& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual miscellaneous_field*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    miscellaneous_field&
    operator= (const miscellaneous_field& x);

    virtual 
    ~miscellaneous_field ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
  };

  class supports: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::yes_no type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // element
    //
    typedef ::xml_schema::nmtoken element_type;
    typedef ::xsd::cxx::tree::traits< element_type, char > element_traits;

    const element_type&
    element () const;

    element_type&
    element ();

    void
    element (const element_type& x);

    void
    element (::std::unique_ptr< element_type > p);

    // attribute
    //
    typedef ::xml_schema::nmtoken attribute_type;
    typedef ::xsd::cxx::tree::optional< attribute_type > attribute_optional;
    typedef ::xsd::cxx::tree::traits< attribute_type, char > attribute_traits;

    const attribute_optional&
    attribute () const;

    attribute_optional&
    attribute ();

    void
    attribute (const attribute_type& x);

    void
    attribute (const attribute_optional& x);

    void
    attribute (::std::unique_ptr< attribute_type > p);

    // value
    //
    typedef ::xml_schema::token value_type;
    typedef ::xsd::cxx::tree::optional< value_type > value_optional;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_optional&
    value () const;

    value_optional&
    value ();

    void
    value (const value_type& x);

    void
    value (const value_optional& x);

    void
    value (::std::unique_ptr< value_type > p);

    // Constructors.
    //
    supports (const type_type&,
              const element_type&);

    supports (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    supports (const supports& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual supports*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    supports&
    operator= (const supports& x);

    virtual 
    ~supports ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    ::xsd::cxx::tree::one< element_type > element_;
    attribute_optional attribute_;
    value_optional value_;
  };

  class appearance: public ::xml_schema::type
  {
    public:
    // line-width
    //
    typedef ::musicxml::line_width line_width_type;
    typedef ::xsd::cxx::tree::sequence< line_width_type > line_width_sequence;
    typedef line_width_sequence::iterator line_width_iterator;
    typedef line_width_sequence::const_iterator line_width_const_iterator;
    typedef ::xsd::cxx::tree::traits< line_width_type, char > line_width_traits;

    const line_width_sequence&
    line_width () const;

    line_width_sequence&
    line_width ();

    void
    line_width (const line_width_sequence& s);

    // note-size
    //
    typedef ::musicxml::note_size note_size_type;
    typedef ::xsd::cxx::tree::sequence< note_size_type > note_size_sequence;
    typedef note_size_sequence::iterator note_size_iterator;
    typedef note_size_sequence::const_iterator note_size_const_iterator;
    typedef ::xsd::cxx::tree::traits< note_size_type, char > note_size_traits;

    const note_size_sequence&
    note_size () const;

    note_size_sequence&
    note_size ();

    void
    note_size (const note_size_sequence& s);

    // distance
    //
    typedef ::musicxml::distance distance_type;
    typedef ::xsd::cxx::tree::sequence< distance_type > distance_sequence;
    typedef distance_sequence::iterator distance_iterator;
    typedef distance_sequence::const_iterator distance_const_iterator;
    typedef ::xsd::cxx::tree::traits< distance_type, char > distance_traits;

    const distance_sequence&
    distance () const;

    distance_sequence&
    distance ();

    void
    distance (const distance_sequence& s);

    // glyph
    //
    typedef ::musicxml::glyph glyph_type;
    typedef ::xsd::cxx::tree::sequence< glyph_type > glyph_sequence;
    typedef glyph_sequence::iterator glyph_iterator;
    typedef glyph_sequence::const_iterator glyph_const_iterator;
    typedef ::xsd::cxx::tree::traits< glyph_type, char > glyph_traits;

    const glyph_sequence&
    glyph () const;

    glyph_sequence&
    glyph ();

    void
    glyph (const glyph_sequence& s);

    // other-appearance
    //
    typedef ::musicxml::other_appearance other_appearance_type;
    typedef ::xsd::cxx::tree::sequence< other_appearance_type > other_appearance_sequence;
    typedef other_appearance_sequence::iterator other_appearance_iterator;
    typedef other_appearance_sequence::const_iterator other_appearance_const_iterator;
    typedef ::xsd::cxx::tree::traits< other_appearance_type, char > other_appearance_traits;

    const other_appearance_sequence&
    other_appearance () const;

    other_appearance_sequence&
    other_appearance ();

    void
    other_appearance (const other_appearance_sequence& s);

    // Constructors.
    //
    appearance ();

    appearance (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    appearance (const appearance& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual appearance*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    appearance&
    operator= (const appearance& x);

    virtual 
    ~appearance ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    line_width_sequence line_width_;
    note_size_sequence note_size_;
    distance_sequence distance_;
    glyph_sequence glyph_;
    other_appearance_sequence other_appearance_;
  };

  class distance: public ::musicxml::tenths
  {
    public:
    // type
    //
    typedef ::musicxml::distance_type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    distance (const ::xml_schema::decimal&,
              const type_type&);

    distance (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    distance (const distance& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual distance*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    distance&
    operator= (const distance& x);

    virtual 
    ~distance ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
  };

  class glyph: public ::musicxml::smufl_glyph_name
  {
    public:
    // type
    //
    typedef ::musicxml::glyph_type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    glyph (const char*,
           const type_type&);

    glyph (const ::std::string&,
           const type_type&);

    glyph (const ::xml_schema::nmtoken&,
           const type_type&);

    glyph (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    glyph (const glyph& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual glyph*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    glyph&
    operator= (const glyph& x);

    virtual 
    ~glyph ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
  };

  class line_width: public ::musicxml::tenths
  {
    public:
    // type
    //
    typedef ::musicxml::line_width_type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    line_width (const ::xml_schema::decimal&,
                const type_type&);

    line_width (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    line_width (const line_width& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual line_width*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    line_width&
    operator= (const line_width& x);

    virtual 
    ~line_width ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
  };

  class measure_layout: public ::xml_schema::type
  {
    public:
    // measure-distance
    //
    typedef ::musicxml::tenths measure_distance_type;
    typedef ::xsd::cxx::tree::optional< measure_distance_type > measure_distance_optional;
    typedef ::xsd::cxx::tree::traits< measure_distance_type, char > measure_distance_traits;

    const measure_distance_optional&
    measure_distance () const;

    measure_distance_optional&
    measure_distance ();

    void
    measure_distance (const measure_distance_type& x);

    void
    measure_distance (const measure_distance_optional& x);

    void
    measure_distance (::std::unique_ptr< measure_distance_type > p);

    // Constructors.
    //
    measure_layout ();

    measure_layout (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    measure_layout (const measure_layout& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual measure_layout*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    measure_layout&
    operator= (const measure_layout& x);

    virtual 
    ~measure_layout ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    measure_distance_optional measure_distance_;
  };

  class note_size: public ::musicxml::non_negative_decimal
  {
    public:
    // type
    //
    typedef ::musicxml::note_size_type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    note_size (const ::xml_schema::decimal&,
               const type_type&);

    note_size (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    note_size (const note_size& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual note_size*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    note_size&
    operator= (const note_size& x);

    virtual 
    ~note_size ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
  };

  class other_appearance: public ::xml_schema::string
  {
    public:
    // type
    //
    typedef ::xml_schema::token type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    other_appearance (const type_type&);

    other_appearance (const char*,
                      const type_type&);

    other_appearance (const ::std::string&,
                      const type_type&);

    other_appearance (const ::xml_schema::string&,
                      const type_type&);

    other_appearance (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    other_appearance (const other_appearance& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual other_appearance*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    other_appearance&
    operator= (const other_appearance& x);

    virtual 
    ~other_appearance ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
  };

  class page_layout: public ::xml_schema::type
  {
    public:
    // page-height
    //
    typedef ::musicxml::tenths page_height_type;
    typedef ::xsd::cxx::tree::optional< page_height_type > page_height_optional;
    typedef ::xsd::cxx::tree::traits< page_height_type, char > page_height_traits;

    const page_height_optional&
    page_height () const;

    page_height_optional&
    page_height ();

    void
    page_height (const page_height_type& x);

    void
    page_height (const page_height_optional& x);

    void
    page_height (::std::unique_ptr< page_height_type > p);

    // page-width
    //
    typedef ::musicxml::tenths page_width_type;
    typedef ::xsd::cxx::tree::optional< page_width_type > page_width_optional;
    typedef ::xsd::cxx::tree::traits< page_width_type, char > page_width_traits;

    const page_width_optional&
    page_width () const;

    page_width_optional&
    page_width ();

    void
    page_width (const page_width_type& x);

    void
    page_width (const page_width_optional& x);

    void
    page_width (::std::unique_ptr< page_width_type > p);

    // page-margins
    //
    typedef ::musicxml::page_margins page_margins_type;
    typedef ::xsd::cxx::tree::sequence< page_margins_type > page_margins_sequence;
    typedef page_margins_sequence::iterator page_margins_iterator;
    typedef page_margins_sequence::const_iterator page_margins_const_iterator;
    typedef ::xsd::cxx::tree::traits< page_margins_type, char > page_margins_traits;

    const page_margins_sequence&
    page_margins () const;

    page_margins_sequence&
    page_margins ();

    void
    page_margins (const page_margins_sequence& s);

    // Constructors.
    //
    page_layout ();

    page_layout (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    page_layout (const page_layout& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual page_layout*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    page_layout&
    operator= (const page_layout& x);

    virtual 
    ~page_layout ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    page_height_optional page_height_;
    page_width_optional page_width_;
    page_margins_sequence page_margins_;
  };

  class page_margins: public ::xml_schema::type
  {
    public:
    // left-margin
    //
    typedef ::musicxml::tenths left_margin_type;
    typedef ::xsd::cxx::tree::traits< left_margin_type, char > left_margin_traits;

    const left_margin_type&
    left_margin () const;

    left_margin_type&
    left_margin ();

    void
    left_margin (const left_margin_type& x);

    void
    left_margin (::std::unique_ptr< left_margin_type > p);

    // right-margin
    //
    typedef ::musicxml::tenths right_margin_type;
    typedef ::xsd::cxx::tree::traits< right_margin_type, char > right_margin_traits;

    const right_margin_type&
    right_margin () const;

    right_margin_type&
    right_margin ();

    void
    right_margin (const right_margin_type& x);

    void
    right_margin (::std::unique_ptr< right_margin_type > p);

    // top-margin
    //
    typedef ::musicxml::tenths top_margin_type;
    typedef ::xsd::cxx::tree::traits< top_margin_type, char > top_margin_traits;

    const top_margin_type&
    top_margin () const;

    top_margin_type&
    top_margin ();

    void
    top_margin (const top_margin_type& x);

    void
    top_margin (::std::unique_ptr< top_margin_type > p);

    // bottom-margin
    //
    typedef ::musicxml::tenths bottom_margin_type;
    typedef ::xsd::cxx::tree::traits< bottom_margin_type, char > bottom_margin_traits;

    const bottom_margin_type&
    bottom_margin () const;

    bottom_margin_type&
    bottom_margin ();

    void
    bottom_margin (const bottom_margin_type& x);

    void
    bottom_margin (::std::unique_ptr< bottom_margin_type > p);

    // type
    //
    typedef ::musicxml::margin_type type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    page_margins (const left_margin_type&,
                  const right_margin_type&,
                  const top_margin_type&,
                  const bottom_margin_type&);

    page_margins (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    page_margins (const page_margins& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual page_margins*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    page_margins&
    operator= (const page_margins& x);

    virtual 
    ~page_margins ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< left_margin_type > left_margin_;
    ::xsd::cxx::tree::one< right_margin_type > right_margin_;
    ::xsd::cxx::tree::one< top_margin_type > top_margin_;
    ::xsd::cxx::tree::one< bottom_margin_type > bottom_margin_;
    type_optional type_;
  };

  class scaling: public ::xml_schema::type
  {
    public:
    // millimeters
    //
    typedef ::musicxml::millimeters millimeters_type;
    typedef ::xsd::cxx::tree::traits< millimeters_type, char > millimeters_traits;

    const millimeters_type&
    millimeters () const;

    millimeters_type&
    millimeters ();

    void
    millimeters (const millimeters_type& x);

    void
    millimeters (::std::unique_ptr< millimeters_type > p);

    // tenths
    //
    typedef ::musicxml::tenths tenths_type;
    typedef ::xsd::cxx::tree::traits< tenths_type, char > tenths_traits;

    const tenths_type&
    tenths () const;

    tenths_type&
    tenths ();

    void
    tenths (const tenths_type& x);

    void
    tenths (::std::unique_ptr< tenths_type > p);

    // Constructors.
    //
    scaling (const millimeters_type&,
             const tenths_type&);

    scaling (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    scaling (const scaling& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual scaling*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    scaling&
    operator= (const scaling& x);

    virtual 
    ~scaling ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< millimeters_type > millimeters_;
    ::xsd::cxx::tree::one< tenths_type > tenths_;
  };

  class staff_layout: public ::xml_schema::type
  {
    public:
    // staff-distance
    //
    typedef ::musicxml::tenths staff_distance_type;
    typedef ::xsd::cxx::tree::optional< staff_distance_type > staff_distance_optional;
    typedef ::xsd::cxx::tree::traits< staff_distance_type, char > staff_distance_traits;

    const staff_distance_optional&
    staff_distance () const;

    staff_distance_optional&
    staff_distance ();

    void
    staff_distance (const staff_distance_type& x);

    void
    staff_distance (const staff_distance_optional& x);

    void
    staff_distance (::std::unique_ptr< staff_distance_type > p);

    // number
    //
    typedef ::musicxml::staff_number number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // Constructors.
    //
    staff_layout ();

    staff_layout (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    staff_layout (const staff_layout& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual staff_layout*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    staff_layout&
    operator= (const staff_layout& x);

    virtual 
    ~staff_layout ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    staff_distance_optional staff_distance_;
    number_optional number_;
  };

  class system_dividers: public ::xml_schema::type
  {
    public:
    // left-divider
    //
    typedef ::musicxml::empty_print_object_style_align left_divider_type;
    typedef ::xsd::cxx::tree::traits< left_divider_type, char > left_divider_traits;

    const left_divider_type&
    left_divider () const;

    left_divider_type&
    left_divider ();

    void
    left_divider (const left_divider_type& x);

    void
    left_divider (::std::unique_ptr< left_divider_type > p);

    // right-divider
    //
    typedef ::musicxml::empty_print_object_style_align right_divider_type;
    typedef ::xsd::cxx::tree::traits< right_divider_type, char > right_divider_traits;

    const right_divider_type&
    right_divider () const;

    right_divider_type&
    right_divider ();

    void
    right_divider (const right_divider_type& x);

    void
    right_divider (::std::unique_ptr< right_divider_type > p);

    // Constructors.
    //
    system_dividers (const left_divider_type&,
                     const right_divider_type&);

    system_dividers (::std::unique_ptr< left_divider_type >,
                     ::std::unique_ptr< right_divider_type >);

    system_dividers (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    system_dividers (const system_dividers& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual system_dividers*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    system_dividers&
    operator= (const system_dividers& x);

    virtual 
    ~system_dividers ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< left_divider_type > left_divider_;
    ::xsd::cxx::tree::one< right_divider_type > right_divider_;
  };

  class system_layout: public ::xml_schema::type
  {
    public:
    // system-margins
    //
    typedef ::musicxml::system_margins system_margins_type;
    typedef ::xsd::cxx::tree::optional< system_margins_type > system_margins_optional;
    typedef ::xsd::cxx::tree::traits< system_margins_type, char > system_margins_traits;

    const system_margins_optional&
    system_margins () const;

    system_margins_optional&
    system_margins ();

    void
    system_margins (const system_margins_type& x);

    void
    system_margins (const system_margins_optional& x);

    void
    system_margins (::std::unique_ptr< system_margins_type > p);

    // system-distance
    //
    typedef ::musicxml::tenths system_distance_type;
    typedef ::xsd::cxx::tree::optional< system_distance_type > system_distance_optional;
    typedef ::xsd::cxx::tree::traits< system_distance_type, char > system_distance_traits;

    const system_distance_optional&
    system_distance () const;

    system_distance_optional&
    system_distance ();

    void
    system_distance (const system_distance_type& x);

    void
    system_distance (const system_distance_optional& x);

    void
    system_distance (::std::unique_ptr< system_distance_type > p);

    // top-system-distance
    //
    typedef ::musicxml::tenths top_system_distance_type;
    typedef ::xsd::cxx::tree::optional< top_system_distance_type > top_system_distance_optional;
    typedef ::xsd::cxx::tree::traits< top_system_distance_type, char > top_system_distance_traits;

    const top_system_distance_optional&
    top_system_distance () const;

    top_system_distance_optional&
    top_system_distance ();

    void
    top_system_distance (const top_system_distance_type& x);

    void
    top_system_distance (const top_system_distance_optional& x);

    void
    top_system_distance (::std::unique_ptr< top_system_distance_type > p);

    // system-dividers
    //
    typedef ::musicxml::system_dividers system_dividers_type;
    typedef ::xsd::cxx::tree::optional< system_dividers_type > system_dividers_optional;
    typedef ::xsd::cxx::tree::traits< system_dividers_type, char > system_dividers_traits;

    const system_dividers_optional&
    system_dividers () const;

    system_dividers_optional&
    system_dividers ();

    void
    system_dividers (const system_dividers_type& x);

    void
    system_dividers (const system_dividers_optional& x);

    void
    system_dividers (::std::unique_ptr< system_dividers_type > p);

    // Constructors.
    //
    system_layout ();

    system_layout (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    system_layout (const system_layout& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual system_layout*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    system_layout&
    operator= (const system_layout& x);

    virtual 
    ~system_layout ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    system_margins_optional system_margins_;
    system_distance_optional system_distance_;
    top_system_distance_optional top_system_distance_;
    system_dividers_optional system_dividers_;
  };

  class system_margins: public ::xml_schema::type
  {
    public:
    // left-margin
    //
    typedef ::musicxml::tenths left_margin_type;
    typedef ::xsd::cxx::tree::traits< left_margin_type, char > left_margin_traits;

    const left_margin_type&
    left_margin () const;

    left_margin_type&
    left_margin ();

    void
    left_margin (const left_margin_type& x);

    void
    left_margin (::std::unique_ptr< left_margin_type > p);

    // right-margin
    //
    typedef ::musicxml::tenths right_margin_type;
    typedef ::xsd::cxx::tree::traits< right_margin_type, char > right_margin_traits;

    const right_margin_type&
    right_margin () const;

    right_margin_type&
    right_margin ();

    void
    right_margin (const right_margin_type& x);

    void
    right_margin (::std::unique_ptr< right_margin_type > p);

    // Constructors.
    //
    system_margins (const left_margin_type&,
                    const right_margin_type&);

    system_margins (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    system_margins (const system_margins& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual system_margins*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    system_margins&
    operator= (const system_margins& x);

    virtual 
    ~system_margins ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< left_margin_type > left_margin_;
    ::xsd::cxx::tree::one< right_margin_type > right_margin_;
  };

  class bookmark: public ::xml_schema::type
  {
    public:
    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // name
    //
    typedef ::xml_schema::token name_type;
    typedef ::xsd::cxx::tree::optional< name_type > name_optional;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_optional&
    name () const;

    name_optional&
    name ();

    void
    name (const name_type& x);

    void
    name (const name_optional& x);

    void
    name (::std::unique_ptr< name_type > p);

    // element
    //
    typedef ::xml_schema::nmtoken element_type;
    typedef ::xsd::cxx::tree::optional< element_type > element_optional;
    typedef ::xsd::cxx::tree::traits< element_type, char > element_traits;

    const element_optional&
    element () const;

    element_optional&
    element ();

    void
    element (const element_type& x);

    void
    element (const element_optional& x);

    void
    element (::std::unique_ptr< element_type > p);

    // position
    //
    typedef ::xml_schema::positive_integer position_type;
    typedef ::xsd::cxx::tree::optional< position_type > position_optional;
    typedef ::xsd::cxx::tree::traits< position_type, char > position_traits;

    const position_optional&
    position () const;

    position_optional&
    position ();

    void
    position (const position_type& x);

    void
    position (const position_optional& x);

    // Constructors.
    //
    bookmark (const id_type&);

    bookmark (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    bookmark (const bookmark& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual bookmark*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    bookmark&
    operator= (const bookmark& x);

    virtual 
    ~bookmark ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
    name_optional name_;
    element_optional element_;
    position_optional position_;
  };

  class link: public ::xml_schema::type
  {
    public:
    // href
    //
    typedef ::xml_schema::uri href_type;
    typedef ::xsd::cxx::tree::traits< href_type, char > href_traits;

    const href_type&
    href () const;

    href_type&
    href ();

    void
    href (const href_type& x);

    void
    href (::std::unique_ptr< href_type > p);

    // type
    //
    typedef ::xlink::type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    static const type_type&
    type_default_value ();

    // role
    //
    typedef ::xml_schema::token role_type;
    typedef ::xsd::cxx::tree::optional< role_type > role_optional;
    typedef ::xsd::cxx::tree::traits< role_type, char > role_traits;

    const role_optional&
    role () const;

    role_optional&
    role ();

    void
    role (const role_type& x);

    void
    role (const role_optional& x);

    void
    role (::std::unique_ptr< role_type > p);

    // title
    //
    typedef ::xml_schema::token title_type;
    typedef ::xsd::cxx::tree::optional< title_type > title_optional;
    typedef ::xsd::cxx::tree::traits< title_type, char > title_traits;

    const title_optional&
    title () const;

    title_optional&
    title ();

    void
    title (const title_type& x);

    void
    title (const title_optional& x);

    void
    title (::std::unique_ptr< title_type > p);

    // show
    //
    typedef ::xlink::show show_type;
    typedef ::xsd::cxx::tree::traits< show_type, char > show_traits;

    const show_type&
    show () const;

    show_type&
    show ();

    void
    show (const show_type& x);

    void
    show (::std::unique_ptr< show_type > p);

    static const show_type&
    show_default_value ();

    // actuate
    //
    typedef ::xlink::actuate actuate_type;
    typedef ::xsd::cxx::tree::traits< actuate_type, char > actuate_traits;

    const actuate_type&
    actuate () const;

    actuate_type&
    actuate ();

    void
    actuate (const actuate_type& x);

    void
    actuate (::std::unique_ptr< actuate_type > p);

    static const actuate_type&
    actuate_default_value ();

    // name
    //
    typedef ::xml_schema::token name_type;
    typedef ::xsd::cxx::tree::optional< name_type > name_optional;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_optional&
    name () const;

    name_optional&
    name ();

    void
    name (const name_type& x);

    void
    name (const name_optional& x);

    void
    name (::std::unique_ptr< name_type > p);

    // element
    //
    typedef ::xml_schema::nmtoken element_type;
    typedef ::xsd::cxx::tree::optional< element_type > element_optional;
    typedef ::xsd::cxx::tree::traits< element_type, char > element_traits;

    const element_optional&
    element () const;

    element_optional&
    element ();

    void
    element (const element_type& x);

    void
    element (const element_optional& x);

    void
    element (::std::unique_ptr< element_type > p);

    // position
    //
    typedef ::xml_schema::positive_integer position_type;
    typedef ::xsd::cxx::tree::optional< position_type > position_optional;
    typedef ::xsd::cxx::tree::traits< position_type, char > position_traits;

    const position_optional&
    position () const;

    position_optional&
    position ();

    void
    position (const position_type& x);

    void
    position (const position_optional& x);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // Constructors.
    //
    link (const href_type&);

    link (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    link (const link& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual link*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    link&
    operator= (const link& x);

    virtual 
    ~link ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< href_type > href_;
    ::xsd::cxx::tree::one< type_type > type_;
    static const type_type type_default_value_;
    role_optional role_;
    title_optional title_;
    ::xsd::cxx::tree::one< show_type > show_;
    static const show_type show_default_value_;
    ::xsd::cxx::tree::one< actuate_type > actuate_;
    static const actuate_type actuate_default_value_;
    name_optional name_;
    element_optional element_;
    position_optional position_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
  };

  class accidental: public ::musicxml::accidental_value
  {
    public:
    // cautionary
    //
    typedef ::musicxml::yes_no cautionary_type;
    typedef ::xsd::cxx::tree::optional< cautionary_type > cautionary_optional;
    typedef ::xsd::cxx::tree::traits< cautionary_type, char > cautionary_traits;

    const cautionary_optional&
    cautionary () const;

    cautionary_optional&
    cautionary ();

    void
    cautionary (const cautionary_type& x);

    void
    cautionary (const cautionary_optional& x);

    void
    cautionary (::std::unique_ptr< cautionary_type > p);

    // editorial
    //
    typedef ::musicxml::yes_no editorial_type;
    typedef ::xsd::cxx::tree::optional< editorial_type > editorial_optional;
    typedef ::xsd::cxx::tree::traits< editorial_type, char > editorial_traits;

    const editorial_optional&
    editorial () const;

    editorial_optional&
    editorial ();

    void
    editorial (const editorial_type& x);

    void
    editorial (const editorial_optional& x);

    void
    editorial (::std::unique_ptr< editorial_type > p);

    // parentheses
    //
    typedef ::musicxml::yes_no parentheses_type;
    typedef ::xsd::cxx::tree::optional< parentheses_type > parentheses_optional;
    typedef ::xsd::cxx::tree::traits< parentheses_type, char > parentheses_traits;

    const parentheses_optional&
    parentheses () const;

    parentheses_optional&
    parentheses ();

    void
    parentheses (const parentheses_type& x);

    void
    parentheses (const parentheses_optional& x);

    void
    parentheses (::std::unique_ptr< parentheses_type > p);

    // bracket
    //
    typedef ::musicxml::yes_no bracket_type;
    typedef ::xsd::cxx::tree::optional< bracket_type > bracket_optional;
    typedef ::xsd::cxx::tree::traits< bracket_type, char > bracket_traits;

    const bracket_optional&
    bracket () const;

    bracket_optional&
    bracket ();

    void
    bracket (const bracket_type& x);

    void
    bracket (const bracket_optional& x);

    void
    bracket (::std::unique_ptr< bracket_type > p);

    // size
    //
    typedef ::musicxml::symbol_size size_type;
    typedef ::xsd::cxx::tree::optional< size_type > size_optional;
    typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

    const size_optional&
    size () const;

    size_optional&
    size ();

    void
    size (const size_type& x);

    void
    size (const size_optional& x);

    void
    size (::std::unique_ptr< size_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // smufl
    //
    typedef ::musicxml::smufl_accidental_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    accidental (::musicxml::accidental_value::value);

    accidental (const char*);

    accidental (const ::std::string&);

    accidental (const ::musicxml::accidental_value&);

    accidental (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    accidental (const accidental& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual accidental*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    accidental&
    operator= (const accidental& x);

    virtual 
    ~accidental ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    cautionary_optional cautionary_;
    editorial_optional editorial_;
    parentheses_optional parentheses_;
    bracket_optional bracket_;
    size_optional size_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    smufl_optional smufl_;
  };

  class accidental_mark: public ::musicxml::accidental_value
  {
    public:
    // parentheses
    //
    typedef ::musicxml::yes_no parentheses_type;
    typedef ::xsd::cxx::tree::optional< parentheses_type > parentheses_optional;
    typedef ::xsd::cxx::tree::traits< parentheses_type, char > parentheses_traits;

    const parentheses_optional&
    parentheses () const;

    parentheses_optional&
    parentheses ();

    void
    parentheses (const parentheses_type& x);

    void
    parentheses (const parentheses_optional& x);

    void
    parentheses (::std::unique_ptr< parentheses_type > p);

    // bracket
    //
    typedef ::musicxml::yes_no bracket_type;
    typedef ::xsd::cxx::tree::optional< bracket_type > bracket_optional;
    typedef ::xsd::cxx::tree::traits< bracket_type, char > bracket_traits;

    const bracket_optional&
    bracket () const;

    bracket_optional&
    bracket ();

    void
    bracket (const bracket_type& x);

    void
    bracket (const bracket_optional& x);

    void
    bracket (::std::unique_ptr< bracket_type > p);

    // size
    //
    typedef ::musicxml::symbol_size size_type;
    typedef ::xsd::cxx::tree::optional< size_type > size_optional;
    typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

    const size_optional&
    size () const;

    size_optional&
    size ();

    void
    size (const size_type& x);

    void
    size (const size_optional& x);

    void
    size (::std::unique_ptr< size_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // smufl
    //
    typedef ::musicxml::smufl_accidental_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    accidental_mark (::musicxml::accidental_value::value);

    accidental_mark (const char*);

    accidental_mark (const ::std::string&);

    accidental_mark (const ::musicxml::accidental_value&);

    accidental_mark (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    accidental_mark (const accidental_mark& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual accidental_mark*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    accidental_mark&
    operator= (const accidental_mark& x);

    virtual 
    ~accidental_mark ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    parentheses_optional parentheses_;
    bracket_optional bracket_;
    size_optional size_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
    smufl_optional smufl_;
    id_optional id_;
  };

  class arpeggiate: public ::xml_schema::type
  {
    public:
    // number
    //
    typedef ::musicxml::number_level number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // direction
    //
    typedef ::musicxml::up_down direction_type;
    typedef ::xsd::cxx::tree::optional< direction_type > direction_optional;
    typedef ::xsd::cxx::tree::traits< direction_type, char > direction_traits;

    const direction_optional&
    direction () const;

    direction_optional&
    direction ();

    void
    direction (const direction_type& x);

    void
    direction (const direction_optional& x);

    void
    direction (::std::unique_ptr< direction_type > p);

    // unbroken
    //
    typedef ::musicxml::yes_no unbroken_type;
    typedef ::xsd::cxx::tree::optional< unbroken_type > unbroken_optional;
    typedef ::xsd::cxx::tree::traits< unbroken_type, char > unbroken_traits;

    const unbroken_optional&
    unbroken () const;

    unbroken_optional&
    unbroken ();

    void
    unbroken (const unbroken_type& x);

    void
    unbroken (const unbroken_optional& x);

    void
    unbroken (::std::unique_ptr< unbroken_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    arpeggiate ();

    arpeggiate (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    arpeggiate (const arpeggiate& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual arpeggiate*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    arpeggiate&
    operator= (const arpeggiate& x);

    virtual 
    ~arpeggiate ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    number_optional number_;
    direction_optional direction_;
    unbroken_optional unbroken_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    placement_optional placement_;
    color_optional color_;
    id_optional id_;
  };

  class articulations: public ::xml_schema::type
  {
    public:
    // accent
    //
    typedef ::musicxml::empty_placement accent_type;
    typedef ::xsd::cxx::tree::sequence< accent_type > accent_sequence;
    typedef accent_sequence::iterator accent_iterator;
    typedef accent_sequence::const_iterator accent_const_iterator;
    typedef ::xsd::cxx::tree::traits< accent_type, char > accent_traits;

    const accent_sequence&
    accent () const;

    accent_sequence&
    accent ();

    void
    accent (const accent_sequence& s);

    // strong-accent
    //
    typedef ::musicxml::strong_accent strong_accent_type;
    typedef ::xsd::cxx::tree::sequence< strong_accent_type > strong_accent_sequence;
    typedef strong_accent_sequence::iterator strong_accent_iterator;
    typedef strong_accent_sequence::const_iterator strong_accent_const_iterator;
    typedef ::xsd::cxx::tree::traits< strong_accent_type, char > strong_accent_traits;

    const strong_accent_sequence&
    strong_accent () const;

    strong_accent_sequence&
    strong_accent ();

    void
    strong_accent (const strong_accent_sequence& s);

    // staccato
    //
    typedef ::musicxml::empty_placement staccato_type;
    typedef ::xsd::cxx::tree::sequence< staccato_type > staccato_sequence;
    typedef staccato_sequence::iterator staccato_iterator;
    typedef staccato_sequence::const_iterator staccato_const_iterator;
    typedef ::xsd::cxx::tree::traits< staccato_type, char > staccato_traits;

    const staccato_sequence&
    staccato () const;

    staccato_sequence&
    staccato ();

    void
    staccato (const staccato_sequence& s);

    // tenuto
    //
    typedef ::musicxml::empty_placement tenuto_type;
    typedef ::xsd::cxx::tree::sequence< tenuto_type > tenuto_sequence;
    typedef tenuto_sequence::iterator tenuto_iterator;
    typedef tenuto_sequence::const_iterator tenuto_const_iterator;
    typedef ::xsd::cxx::tree::traits< tenuto_type, char > tenuto_traits;

    const tenuto_sequence&
    tenuto () const;

    tenuto_sequence&
    tenuto ();

    void
    tenuto (const tenuto_sequence& s);

    // detached-legato
    //
    typedef ::musicxml::empty_placement detached_legato_type;
    typedef ::xsd::cxx::tree::sequence< detached_legato_type > detached_legato_sequence;
    typedef detached_legato_sequence::iterator detached_legato_iterator;
    typedef detached_legato_sequence::const_iterator detached_legato_const_iterator;
    typedef ::xsd::cxx::tree::traits< detached_legato_type, char > detached_legato_traits;

    const detached_legato_sequence&
    detached_legato () const;

    detached_legato_sequence&
    detached_legato ();

    void
    detached_legato (const detached_legato_sequence& s);

    // staccatissimo
    //
    typedef ::musicxml::empty_placement staccatissimo_type;
    typedef ::xsd::cxx::tree::sequence< staccatissimo_type > staccatissimo_sequence;
    typedef staccatissimo_sequence::iterator staccatissimo_iterator;
    typedef staccatissimo_sequence::const_iterator staccatissimo_const_iterator;
    typedef ::xsd::cxx::tree::traits< staccatissimo_type, char > staccatissimo_traits;

    const staccatissimo_sequence&
    staccatissimo () const;

    staccatissimo_sequence&
    staccatissimo ();

    void
    staccatissimo (const staccatissimo_sequence& s);

    // spiccato
    //
    typedef ::musicxml::empty_placement spiccato_type;
    typedef ::xsd::cxx::tree::sequence< spiccato_type > spiccato_sequence;
    typedef spiccato_sequence::iterator spiccato_iterator;
    typedef spiccato_sequence::const_iterator spiccato_const_iterator;
    typedef ::xsd::cxx::tree::traits< spiccato_type, char > spiccato_traits;

    const spiccato_sequence&
    spiccato () const;

    spiccato_sequence&
    spiccato ();

    void
    spiccato (const spiccato_sequence& s);

    // scoop
    //
    typedef ::musicxml::empty_line scoop_type;
    typedef ::xsd::cxx::tree::sequence< scoop_type > scoop_sequence;
    typedef scoop_sequence::iterator scoop_iterator;
    typedef scoop_sequence::const_iterator scoop_const_iterator;
    typedef ::xsd::cxx::tree::traits< scoop_type, char > scoop_traits;

    const scoop_sequence&
    scoop () const;

    scoop_sequence&
    scoop ();

    void
    scoop (const scoop_sequence& s);

    // plop
    //
    typedef ::musicxml::empty_line plop_type;
    typedef ::xsd::cxx::tree::sequence< plop_type > plop_sequence;
    typedef plop_sequence::iterator plop_iterator;
    typedef plop_sequence::const_iterator plop_const_iterator;
    typedef ::xsd::cxx::tree::traits< plop_type, char > plop_traits;

    const plop_sequence&
    plop () const;

    plop_sequence&
    plop ();

    void
    plop (const plop_sequence& s);

    // doit
    //
    typedef ::musicxml::empty_line doit_type;
    typedef ::xsd::cxx::tree::sequence< doit_type > doit_sequence;
    typedef doit_sequence::iterator doit_iterator;
    typedef doit_sequence::const_iterator doit_const_iterator;
    typedef ::xsd::cxx::tree::traits< doit_type, char > doit_traits;

    const doit_sequence&
    doit () const;

    doit_sequence&
    doit ();

    void
    doit (const doit_sequence& s);

    // falloff
    //
    typedef ::musicxml::empty_line falloff_type;
    typedef ::xsd::cxx::tree::sequence< falloff_type > falloff_sequence;
    typedef falloff_sequence::iterator falloff_iterator;
    typedef falloff_sequence::const_iterator falloff_const_iterator;
    typedef ::xsd::cxx::tree::traits< falloff_type, char > falloff_traits;

    const falloff_sequence&
    falloff () const;

    falloff_sequence&
    falloff ();

    void
    falloff (const falloff_sequence& s);

    // breath-mark
    //
    typedef ::musicxml::breath_mark breath_mark_type;
    typedef ::xsd::cxx::tree::sequence< breath_mark_type > breath_mark_sequence;
    typedef breath_mark_sequence::iterator breath_mark_iterator;
    typedef breath_mark_sequence::const_iterator breath_mark_const_iterator;
    typedef ::xsd::cxx::tree::traits< breath_mark_type, char > breath_mark_traits;

    const breath_mark_sequence&
    breath_mark () const;

    breath_mark_sequence&
    breath_mark ();

    void
    breath_mark (const breath_mark_sequence& s);

    // caesura
    //
    typedef ::musicxml::caesura caesura_type;
    typedef ::xsd::cxx::tree::sequence< caesura_type > caesura_sequence;
    typedef caesura_sequence::iterator caesura_iterator;
    typedef caesura_sequence::const_iterator caesura_const_iterator;
    typedef ::xsd::cxx::tree::traits< caesura_type, char > caesura_traits;

    const caesura_sequence&
    caesura () const;

    caesura_sequence&
    caesura ();

    void
    caesura (const caesura_sequence& s);

    // stress
    //
    typedef ::musicxml::empty_placement stress_type;
    typedef ::xsd::cxx::tree::sequence< stress_type > stress_sequence;
    typedef stress_sequence::iterator stress_iterator;
    typedef stress_sequence::const_iterator stress_const_iterator;
    typedef ::xsd::cxx::tree::traits< stress_type, char > stress_traits;

    const stress_sequence&
    stress () const;

    stress_sequence&
    stress ();

    void
    stress (const stress_sequence& s);

    // unstress
    //
    typedef ::musicxml::empty_placement unstress_type;
    typedef ::xsd::cxx::tree::sequence< unstress_type > unstress_sequence;
    typedef unstress_sequence::iterator unstress_iterator;
    typedef unstress_sequence::const_iterator unstress_const_iterator;
    typedef ::xsd::cxx::tree::traits< unstress_type, char > unstress_traits;

    const unstress_sequence&
    unstress () const;

    unstress_sequence&
    unstress ();

    void
    unstress (const unstress_sequence& s);

    // soft-accent
    //
    typedef ::musicxml::empty_placement soft_accent_type;
    typedef ::xsd::cxx::tree::sequence< soft_accent_type > soft_accent_sequence;
    typedef soft_accent_sequence::iterator soft_accent_iterator;
    typedef soft_accent_sequence::const_iterator soft_accent_const_iterator;
    typedef ::xsd::cxx::tree::traits< soft_accent_type, char > soft_accent_traits;

    const soft_accent_sequence&
    soft_accent () const;

    soft_accent_sequence&
    soft_accent ();

    void
    soft_accent (const soft_accent_sequence& s);

    // other-articulation
    //
    typedef ::musicxml::other_placement_text other_articulation_type;
    typedef ::xsd::cxx::tree::sequence< other_articulation_type > other_articulation_sequence;
    typedef other_articulation_sequence::iterator other_articulation_iterator;
    typedef other_articulation_sequence::const_iterator other_articulation_const_iterator;
    typedef ::xsd::cxx::tree::traits< other_articulation_type, char > other_articulation_traits;

    const other_articulation_sequence&
    other_articulation () const;

    other_articulation_sequence&
    other_articulation ();

    void
    other_articulation (const other_articulation_sequence& s);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    articulations ();

    articulations (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    articulations (const articulations& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual articulations*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    articulations&
    operator= (const articulations& x);

    virtual 
    ~articulations ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    accent_sequence accent_;
    strong_accent_sequence strong_accent_;
    staccato_sequence staccato_;
    tenuto_sequence tenuto_;
    detached_legato_sequence detached_legato_;
    staccatissimo_sequence staccatissimo_;
    spiccato_sequence spiccato_;
    scoop_sequence scoop_;
    plop_sequence plop_;
    doit_sequence doit_;
    falloff_sequence falloff_;
    breath_mark_sequence breath_mark_;
    caesura_sequence caesura_;
    stress_sequence stress_;
    unstress_sequence unstress_;
    soft_accent_sequence soft_accent_;
    other_articulation_sequence other_articulation_;
    id_optional id_;
  };

  class arrow: public ::xml_schema::type
  {
    public:
    // arrow-direction
    //
    typedef ::musicxml::arrow_direction arrow_direction_type;
    typedef ::xsd::cxx::tree::optional< arrow_direction_type > arrow_direction_optional;
    typedef ::xsd::cxx::tree::traits< arrow_direction_type, char > arrow_direction_traits;

    const arrow_direction_optional&
    arrow_direction () const;

    arrow_direction_optional&
    arrow_direction ();

    void
    arrow_direction (const arrow_direction_type& x);

    void
    arrow_direction (const arrow_direction_optional& x);

    void
    arrow_direction (::std::unique_ptr< arrow_direction_type > p);

    // arrow-style
    //
    typedef ::musicxml::arrow_style arrow_style_type;
    typedef ::xsd::cxx::tree::optional< arrow_style_type > arrow_style_optional;
    typedef ::xsd::cxx::tree::traits< arrow_style_type, char > arrow_style_traits;

    const arrow_style_optional&
    arrow_style () const;

    arrow_style_optional&
    arrow_style ();

    void
    arrow_style (const arrow_style_type& x);

    void
    arrow_style (const arrow_style_optional& x);

    void
    arrow_style (::std::unique_ptr< arrow_style_type > p);

    // arrowhead
    //
    typedef ::musicxml::empty arrowhead_type;
    typedef ::xsd::cxx::tree::optional< arrowhead_type > arrowhead_optional;
    typedef ::xsd::cxx::tree::traits< arrowhead_type, char > arrowhead_traits;

    const arrowhead_optional&
    arrowhead () const;

    arrowhead_optional&
    arrowhead ();

    void
    arrowhead (const arrowhead_type& x);

    void
    arrowhead (const arrowhead_optional& x);

    void
    arrowhead (::std::unique_ptr< arrowhead_type > p);

    // circular-arrow
    //
    typedef ::musicxml::circular_arrow circular_arrow_type;
    typedef ::xsd::cxx::tree::optional< circular_arrow_type > circular_arrow_optional;
    typedef ::xsd::cxx::tree::traits< circular_arrow_type, char > circular_arrow_traits;

    const circular_arrow_optional&
    circular_arrow () const;

    circular_arrow_optional&
    circular_arrow ();

    void
    circular_arrow (const circular_arrow_type& x);

    void
    circular_arrow (const circular_arrow_optional& x);

    void
    circular_arrow (::std::unique_ptr< circular_arrow_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // smufl
    //
    typedef ::musicxml::smufl_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    arrow ();

    arrow (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    arrow (const arrow& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual arrow*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    arrow&
    operator= (const arrow& x);

    virtual 
    ~arrow ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    arrow_direction_optional arrow_direction_;
    arrow_style_optional arrow_style_;
    arrowhead_optional arrowhead_;
    circular_arrow_optional circular_arrow_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
    smufl_optional smufl_;
  };

  class assess: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::yes_no type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // player
    //
    typedef ::xml_schema::idref player_type;
    typedef ::xsd::cxx::tree::optional< player_type > player_optional;
    typedef ::xsd::cxx::tree::traits< player_type, char > player_traits;

    const player_optional&
    player () const;

    player_optional&
    player ();

    void
    player (const player_type& x);

    void
    player (const player_optional& x);

    void
    player (::std::unique_ptr< player_type > p);

    // time-only
    //
    typedef ::musicxml::time_only time_only_type;
    typedef ::xsd::cxx::tree::optional< time_only_type > time_only_optional;
    typedef ::xsd::cxx::tree::traits< time_only_type, char > time_only_traits;

    const time_only_optional&
    time_only () const;

    time_only_optional&
    time_only ();

    void
    time_only (const time_only_type& x);

    void
    time_only (const time_only_optional& x);

    void
    time_only (::std::unique_ptr< time_only_type > p);

    // Constructors.
    //
    assess (const type_type&);

    assess (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    assess (const assess& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual assess*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    assess&
    operator= (const assess& x);

    virtual 
    ~assess ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    player_optional player_;
    time_only_optional time_only_;
  };

  class backup: public ::xml_schema::type
  {
    public:
    // duration
    //
    typedef ::musicxml::positive_divisions duration_type;
    typedef ::xsd::cxx::tree::traits< duration_type, char > duration_traits;

    const duration_type&
    duration () const;

    duration_type&
    duration ();

    void
    duration (const duration_type& x);

    void
    duration (::std::unique_ptr< duration_type > p);

    // footnote
    //
    typedef ::musicxml::formatted_text footnote_type;
    typedef ::xsd::cxx::tree::optional< footnote_type > footnote_optional;
    typedef ::xsd::cxx::tree::traits< footnote_type, char > footnote_traits;

    const footnote_optional&
    footnote () const;

    footnote_optional&
    footnote ();

    void
    footnote (const footnote_type& x);

    void
    footnote (const footnote_optional& x);

    void
    footnote (::std::unique_ptr< footnote_type > p);

    // level
    //
    typedef ::musicxml::level level_type;
    typedef ::xsd::cxx::tree::optional< level_type > level_optional;
    typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

    const level_optional&
    level () const;

    level_optional&
    level ();

    void
    level (const level_type& x);

    void
    level (const level_optional& x);

    void
    level (::std::unique_ptr< level_type > p);

    // Constructors.
    //
    backup (const duration_type&);

    backup (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    backup (const backup& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual backup*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    backup&
    operator= (const backup& x);

    virtual 
    ~backup ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< duration_type > duration_;
    footnote_optional footnote_;
    level_optional level_;
  };

  class beam: public ::musicxml::beam_value
  {
    public:
    // number
    //
    typedef ::musicxml::beam_level number_type;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_type&
    number () const;

    number_type&
    number ();

    void
    number (const number_type& x);

    void
    number (::std::unique_ptr< number_type > p);

    static number_type
    number_default_value ();

    // repeater
    //
    typedef ::musicxml::yes_no repeater_type;
    typedef ::xsd::cxx::tree::optional< repeater_type > repeater_optional;
    typedef ::xsd::cxx::tree::traits< repeater_type, char > repeater_traits;

    const repeater_optional&
    repeater () const;

    repeater_optional&
    repeater ();

    void
    repeater (const repeater_type& x);

    void
    repeater (const repeater_optional& x);

    void
    repeater (::std::unique_ptr< repeater_type > p);

    // fan
    //
    typedef ::musicxml::fan fan_type;
    typedef ::xsd::cxx::tree::optional< fan_type > fan_optional;
    typedef ::xsd::cxx::tree::traits< fan_type, char > fan_traits;

    const fan_optional&
    fan () const;

    fan_optional&
    fan ();

    void
    fan (const fan_type& x);

    void
    fan (const fan_optional& x);

    void
    fan (::std::unique_ptr< fan_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    beam (::musicxml::beam_value::value);

    beam (const char*);

    beam (const ::std::string&);

    beam (const ::musicxml::beam_value&);

    beam (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    beam (const beam& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual beam*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    beam&
    operator= (const beam& x);

    virtual 
    ~beam ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< number_type > number_;
    repeater_optional repeater_;
    fan_optional fan_;
    color_optional color_;
    id_optional id_;
  };

  class bend: public ::xml_schema::type
  {
    public:
    // bend-alter
    //
    typedef ::musicxml::semitones bend_alter_type;
    typedef ::xsd::cxx::tree::traits< bend_alter_type, char > bend_alter_traits;

    const bend_alter_type&
    bend_alter () const;

    bend_alter_type&
    bend_alter ();

    void
    bend_alter (const bend_alter_type& x);

    void
    bend_alter (::std::unique_ptr< bend_alter_type > p);

    // pre-bend
    //
    typedef ::musicxml::empty pre_bend_type;
    typedef ::xsd::cxx::tree::optional< pre_bend_type > pre_bend_optional;
    typedef ::xsd::cxx::tree::traits< pre_bend_type, char > pre_bend_traits;

    const pre_bend_optional&
    pre_bend () const;

    pre_bend_optional&
    pre_bend ();

    void
    pre_bend (const pre_bend_type& x);

    void
    pre_bend (const pre_bend_optional& x);

    void
    pre_bend (::std::unique_ptr< pre_bend_type > p);

    // release
    //
    typedef ::musicxml::release release_type;
    typedef ::xsd::cxx::tree::optional< release_type > release_optional;
    typedef ::xsd::cxx::tree::traits< release_type, char > release_traits;

    const release_optional&
    release () const;

    release_optional&
    release ();

    void
    release (const release_type& x);

    void
    release (const release_optional& x);

    void
    release (::std::unique_ptr< release_type > p);

    // with-bar
    //
    typedef ::musicxml::placement_text with_bar_type;
    typedef ::xsd::cxx::tree::optional< with_bar_type > with_bar_optional;
    typedef ::xsd::cxx::tree::traits< with_bar_type, char > with_bar_traits;

    const with_bar_optional&
    with_bar () const;

    with_bar_optional&
    with_bar ();

    void
    with_bar (const with_bar_type& x);

    void
    with_bar (const with_bar_optional& x);

    void
    with_bar (::std::unique_ptr< with_bar_type > p);

    // shape
    //
    typedef ::musicxml::bend_shape shape_type;
    typedef ::xsd::cxx::tree::optional< shape_type > shape_optional;
    typedef ::xsd::cxx::tree::traits< shape_type, char > shape_traits;

    const shape_optional&
    shape () const;

    shape_optional&
    shape ();

    void
    shape (const shape_type& x);

    void
    shape (const shape_optional& x);

    void
    shape (::std::unique_ptr< shape_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // accelerate
    //
    typedef ::musicxml::yes_no accelerate_type;
    typedef ::xsd::cxx::tree::optional< accelerate_type > accelerate_optional;
    typedef ::xsd::cxx::tree::traits< accelerate_type, char > accelerate_traits;

    const accelerate_optional&
    accelerate () const;

    accelerate_optional&
    accelerate ();

    void
    accelerate (const accelerate_type& x);

    void
    accelerate (const accelerate_optional& x);

    void
    accelerate (::std::unique_ptr< accelerate_type > p);

    // beats
    //
    typedef ::musicxml::trill_beats beats_type;
    typedef ::xsd::cxx::tree::optional< beats_type > beats_optional;
    typedef ::xsd::cxx::tree::traits< beats_type, char > beats_traits;

    const beats_optional&
    beats () const;

    beats_optional&
    beats ();

    void
    beats (const beats_type& x);

    void
    beats (const beats_optional& x);

    void
    beats (::std::unique_ptr< beats_type > p);

    // first-beat
    //
    typedef ::musicxml::percent first_beat_type;
    typedef ::xsd::cxx::tree::optional< first_beat_type > first_beat_optional;
    typedef ::xsd::cxx::tree::traits< first_beat_type, char > first_beat_traits;

    const first_beat_optional&
    first_beat () const;

    first_beat_optional&
    first_beat ();

    void
    first_beat (const first_beat_type& x);

    void
    first_beat (const first_beat_optional& x);

    void
    first_beat (::std::unique_ptr< first_beat_type > p);

    // last-beat
    //
    typedef ::musicxml::percent last_beat_type;
    typedef ::xsd::cxx::tree::optional< last_beat_type > last_beat_optional;
    typedef ::xsd::cxx::tree::traits< last_beat_type, char > last_beat_traits;

    const last_beat_optional&
    last_beat () const;

    last_beat_optional&
    last_beat ();

    void
    last_beat (const last_beat_type& x);

    void
    last_beat (const last_beat_optional& x);

    void
    last_beat (::std::unique_ptr< last_beat_type > p);

    // Constructors.
    //
    bend (const bend_alter_type&);

    bend (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    bend (const bend& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual bend*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    bend&
    operator= (const bend& x);

    virtual 
    ~bend ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< bend_alter_type > bend_alter_;
    pre_bend_optional pre_bend_;
    release_optional release_;
    with_bar_optional with_bar_;
    shape_optional shape_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    accelerate_optional accelerate_;
    beats_optional beats_;
    first_beat_optional first_beat_;
    last_beat_optional last_beat_;
  };

  class breath_mark: public ::musicxml::breath_mark_value
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // Constructors.
    //
    breath_mark (::musicxml::breath_mark_value::value);

    breath_mark (const char*);

    breath_mark (const ::std::string&);

    breath_mark (const ::musicxml::breath_mark_value&);

    breath_mark (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    breath_mark (const breath_mark& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual breath_mark*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    breath_mark&
    operator= (const breath_mark& x);

    virtual 
    ~breath_mark ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
  };

  class caesura: public ::musicxml::caesura_value
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // Constructors.
    //
    caesura (::musicxml::caesura_value::value);

    caesura (const char*);

    caesura (const ::std::string&);

    caesura (const ::musicxml::caesura_value&);

    caesura (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    caesura (const caesura& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual caesura*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    caesura&
    operator= (const caesura& x);

    virtual 
    ~caesura ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
  };

  class elision: public ::xml_schema::string
  {
    public:
    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // smufl
    //
    typedef ::musicxml::smufl_lyrics_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    elision ();

    elision (const char*);

    elision (const ::std::string&);

    elision (const ::xml_schema::string&);

    elision (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    elision (const elision& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual elision*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    elision&
    operator= (const elision& x);

    virtual 
    ~elision ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    smufl_optional smufl_;
  };

  class empty_line: public ::xml_schema::type
  {
    public:
    // line-shape
    //
    typedef ::musicxml::line_shape line_shape_type;
    typedef ::xsd::cxx::tree::optional< line_shape_type > line_shape_optional;
    typedef ::xsd::cxx::tree::traits< line_shape_type, char > line_shape_traits;

    const line_shape_optional&
    line_shape () const;

    line_shape_optional&
    line_shape ();

    void
    line_shape (const line_shape_type& x);

    void
    line_shape (const line_shape_optional& x);

    void
    line_shape (::std::unique_ptr< line_shape_type > p);

    // line-type
    //
    typedef ::musicxml::line_type line_type_type;
    typedef ::xsd::cxx::tree::optional< line_type_type > line_type_optional;
    typedef ::xsd::cxx::tree::traits< line_type_type, char > line_type_traits;

    const line_type_optional&
    line_type () const;

    line_type_optional&
    line_type ();

    void
    line_type (const line_type_type& x);

    void
    line_type (const line_type_optional& x);

    void
    line_type (::std::unique_ptr< line_type_type > p);

    // line-length
    //
    typedef ::musicxml::line_length line_length_type;
    typedef ::xsd::cxx::tree::optional< line_length_type > line_length_optional;
    typedef ::xsd::cxx::tree::traits< line_length_type, char > line_length_traits;

    const line_length_optional&
    line_length () const;

    line_length_optional&
    line_length ();

    void
    line_length (const line_length_type& x);

    void
    line_length (const line_length_optional& x);

    void
    line_length (::std::unique_ptr< line_length_type > p);

    // dash-length
    //
    typedef ::musicxml::tenths dash_length_type;
    typedef ::xsd::cxx::tree::optional< dash_length_type > dash_length_optional;
    typedef ::xsd::cxx::tree::traits< dash_length_type, char > dash_length_traits;

    const dash_length_optional&
    dash_length () const;

    dash_length_optional&
    dash_length ();

    void
    dash_length (const dash_length_type& x);

    void
    dash_length (const dash_length_optional& x);

    void
    dash_length (::std::unique_ptr< dash_length_type > p);

    // space-length
    //
    typedef ::musicxml::tenths space_length_type;
    typedef ::xsd::cxx::tree::optional< space_length_type > space_length_optional;
    typedef ::xsd::cxx::tree::traits< space_length_type, char > space_length_traits;

    const space_length_optional&
    space_length () const;

    space_length_optional&
    space_length ();

    void
    space_length (const space_length_type& x);

    void
    space_length (const space_length_optional& x);

    void
    space_length (::std::unique_ptr< space_length_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // Constructors.
    //
    empty_line ();

    empty_line (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    empty_line (const empty_line& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual empty_line*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    empty_line&
    operator= (const empty_line& x);

    virtual 
    ~empty_line ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    line_shape_optional line_shape_;
    line_type_optional line_type_;
    line_length_optional line_length_;
    dash_length_optional dash_length_;
    space_length_optional space_length_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
  };

  class extend: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::start_stop_continue type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    void
    type (::std::unique_ptr< type_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    extend ();

    extend (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    extend (const extend& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual extend*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    extend&
    operator= (const extend& x);

    virtual 
    ~extend ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    type_optional type_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    color_optional color_;
  };

  class figure: public ::xml_schema::type
  {
    public:
    // prefix
    //
    typedef ::musicxml::style_text prefix_type;
    typedef ::xsd::cxx::tree::optional< prefix_type > prefix_optional;
    typedef ::xsd::cxx::tree::traits< prefix_type, char > prefix_traits;

    const prefix_optional&
    prefix () const;

    prefix_optional&
    prefix ();

    void
    prefix (const prefix_type& x);

    void
    prefix (const prefix_optional& x);

    void
    prefix (::std::unique_ptr< prefix_type > p);

    // figure-number
    //
    typedef ::musicxml::style_text figure_number_type;
    typedef ::xsd::cxx::tree::optional< figure_number_type > figure_number_optional;
    typedef ::xsd::cxx::tree::traits< figure_number_type, char > figure_number_traits;

    const figure_number_optional&
    figure_number () const;

    figure_number_optional&
    figure_number ();

    void
    figure_number (const figure_number_type& x);

    void
    figure_number (const figure_number_optional& x);

    void
    figure_number (::std::unique_ptr< figure_number_type > p);

    // suffix
    //
    typedef ::musicxml::style_text suffix_type;
    typedef ::xsd::cxx::tree::optional< suffix_type > suffix_optional;
    typedef ::xsd::cxx::tree::traits< suffix_type, char > suffix_traits;

    const suffix_optional&
    suffix () const;

    suffix_optional&
    suffix ();

    void
    suffix (const suffix_type& x);

    void
    suffix (const suffix_optional& x);

    void
    suffix (::std::unique_ptr< suffix_type > p);

    // extend
    //
    typedef ::musicxml::extend extend_type;
    typedef ::xsd::cxx::tree::optional< extend_type > extend_optional;
    typedef ::xsd::cxx::tree::traits< extend_type, char > extend_traits;

    const extend_optional&
    extend () const;

    extend_optional&
    extend ();

    void
    extend (const extend_type& x);

    void
    extend (const extend_optional& x);

    void
    extend (::std::unique_ptr< extend_type > p);

    // footnote
    //
    typedef ::musicxml::formatted_text footnote_type;
    typedef ::xsd::cxx::tree::optional< footnote_type > footnote_optional;
    typedef ::xsd::cxx::tree::traits< footnote_type, char > footnote_traits;

    const footnote_optional&
    footnote () const;

    footnote_optional&
    footnote ();

    void
    footnote (const footnote_type& x);

    void
    footnote (const footnote_optional& x);

    void
    footnote (::std::unique_ptr< footnote_type > p);

    // level
    //
    typedef ::musicxml::level level_type;
    typedef ::xsd::cxx::tree::optional< level_type > level_optional;
    typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

    const level_optional&
    level () const;

    level_optional&
    level ();

    void
    level (const level_type& x);

    void
    level (const level_optional& x);

    void
    level (::std::unique_ptr< level_type > p);

    // Constructors.
    //
    figure ();

    figure (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    figure (const figure& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual figure*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    figure&
    operator= (const figure& x);

    virtual 
    ~figure ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    prefix_optional prefix_;
    figure_number_optional figure_number_;
    suffix_optional suffix_;
    extend_optional extend_;
    footnote_optional footnote_;
    level_optional level_;
  };

  class figured_bass: public ::xml_schema::type
  {
    public:
    // figure
    //
    typedef ::musicxml::figure figure_type;
    typedef ::xsd::cxx::tree::sequence< figure_type > figure_sequence;
    typedef figure_sequence::iterator figure_iterator;
    typedef figure_sequence::const_iterator figure_const_iterator;
    typedef ::xsd::cxx::tree::traits< figure_type, char > figure_traits;

    const figure_sequence&
    figure () const;

    figure_sequence&
    figure ();

    void
    figure (const figure_sequence& s);

    // duration
    //
    typedef ::musicxml::positive_divisions duration_type;
    typedef ::xsd::cxx::tree::optional< duration_type > duration_optional;
    typedef ::xsd::cxx::tree::traits< duration_type, char > duration_traits;

    const duration_optional&
    duration () const;

    duration_optional&
    duration ();

    void
    duration (const duration_type& x);

    void
    duration (const duration_optional& x);

    void
    duration (::std::unique_ptr< duration_type > p);

    // footnote
    //
    typedef ::musicxml::formatted_text footnote_type;
    typedef ::xsd::cxx::tree::optional< footnote_type > footnote_optional;
    typedef ::xsd::cxx::tree::traits< footnote_type, char > footnote_traits;

    const footnote_optional&
    footnote () const;

    footnote_optional&
    footnote ();

    void
    footnote (const footnote_type& x);

    void
    footnote (const footnote_optional& x);

    void
    footnote (::std::unique_ptr< footnote_type > p);

    // level
    //
    typedef ::musicxml::level level_type;
    typedef ::xsd::cxx::tree::optional< level_type > level_optional;
    typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

    const level_optional&
    level () const;

    level_optional&
    level ();

    void
    level (const level_type& x);

    void
    level (const level_optional& x);

    void
    level (::std::unique_ptr< level_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // halign
    //
    typedef ::musicxml::left_center_right halign_type;
    typedef ::xsd::cxx::tree::optional< halign_type > halign_optional;
    typedef ::xsd::cxx::tree::traits< halign_type, char > halign_traits;

    const halign_optional&
    halign () const;

    halign_optional&
    halign ();

    void
    halign (const halign_type& x);

    void
    halign (const halign_optional& x);

    void
    halign (::std::unique_ptr< halign_type > p);

    // valign
    //
    typedef ::musicxml::valign valign_type;
    typedef ::xsd::cxx::tree::optional< valign_type > valign_optional;
    typedef ::xsd::cxx::tree::traits< valign_type, char > valign_traits;

    const valign_optional&
    valign () const;

    valign_optional&
    valign ();

    void
    valign (const valign_type& x);

    void
    valign (const valign_optional& x);

    void
    valign (::std::unique_ptr< valign_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // print-dot
    //
    typedef ::musicxml::yes_no print_dot_type;
    typedef ::xsd::cxx::tree::optional< print_dot_type > print_dot_optional;
    typedef ::xsd::cxx::tree::traits< print_dot_type, char > print_dot_traits;

    const print_dot_optional&
    print_dot () const;

    print_dot_optional&
    print_dot ();

    void
    print_dot (const print_dot_type& x);

    void
    print_dot (const print_dot_optional& x);

    void
    print_dot (::std::unique_ptr< print_dot_type > p);

    // print-spacing
    //
    typedef ::musicxml::yes_no print_spacing_type;
    typedef ::xsd::cxx::tree::optional< print_spacing_type > print_spacing_optional;
    typedef ::xsd::cxx::tree::traits< print_spacing_type, char > print_spacing_traits;

    const print_spacing_optional&
    print_spacing () const;

    print_spacing_optional&
    print_spacing ();

    void
    print_spacing (const print_spacing_type& x);

    void
    print_spacing (const print_spacing_optional& x);

    void
    print_spacing (::std::unique_ptr< print_spacing_type > p);

    // print-lyric
    //
    typedef ::musicxml::yes_no print_lyric_type;
    typedef ::xsd::cxx::tree::optional< print_lyric_type > print_lyric_optional;
    typedef ::xsd::cxx::tree::traits< print_lyric_type, char > print_lyric_traits;

    const print_lyric_optional&
    print_lyric () const;

    print_lyric_optional&
    print_lyric ();

    void
    print_lyric (const print_lyric_type& x);

    void
    print_lyric (const print_lyric_optional& x);

    void
    print_lyric (::std::unique_ptr< print_lyric_type > p);

    // parentheses
    //
    typedef ::musicxml::yes_no parentheses_type;
    typedef ::xsd::cxx::tree::optional< parentheses_type > parentheses_optional;
    typedef ::xsd::cxx::tree::traits< parentheses_type, char > parentheses_traits;

    const parentheses_optional&
    parentheses () const;

    parentheses_optional&
    parentheses ();

    void
    parentheses (const parentheses_type& x);

    void
    parentheses (const parentheses_optional& x);

    void
    parentheses (::std::unique_ptr< parentheses_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    figured_bass ();

    figured_bass (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    figured_bass (const figured_bass& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual figured_bass*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    figured_bass&
    operator= (const figured_bass& x);

    virtual 
    ~figured_bass ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    figure_sequence figure_;
    duration_optional duration_;
    footnote_optional footnote_;
    level_optional level_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    halign_optional halign_;
    valign_optional valign_;
    placement_optional placement_;
    print_object_optional print_object_;
    print_dot_optional print_dot_;
    print_spacing_optional print_spacing_;
    print_lyric_optional print_lyric_;
    parentheses_optional parentheses_;
    id_optional id_;
  };

  class forward: public ::xml_schema::type
  {
    public:
    // duration
    //
    typedef ::musicxml::positive_divisions duration_type;
    typedef ::xsd::cxx::tree::traits< duration_type, char > duration_traits;

    const duration_type&
    duration () const;

    duration_type&
    duration ();

    void
    duration (const duration_type& x);

    void
    duration (::std::unique_ptr< duration_type > p);

    // footnote
    //
    typedef ::musicxml::formatted_text footnote_type;
    typedef ::xsd::cxx::tree::optional< footnote_type > footnote_optional;
    typedef ::xsd::cxx::tree::traits< footnote_type, char > footnote_traits;

    const footnote_optional&
    footnote () const;

    footnote_optional&
    footnote ();

    void
    footnote (const footnote_type& x);

    void
    footnote (const footnote_optional& x);

    void
    footnote (::std::unique_ptr< footnote_type > p);

    // level
    //
    typedef ::musicxml::level level_type;
    typedef ::xsd::cxx::tree::optional< level_type > level_optional;
    typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

    const level_optional&
    level () const;

    level_optional&
    level ();

    void
    level (const level_type& x);

    void
    level (const level_optional& x);

    void
    level (::std::unique_ptr< level_type > p);

    // voice
    //
    typedef ::xml_schema::string voice_type;
    typedef ::xsd::cxx::tree::optional< voice_type > voice_optional;
    typedef ::xsd::cxx::tree::traits< voice_type, char > voice_traits;

    const voice_optional&
    voice () const;

    voice_optional&
    voice ();

    void
    voice (const voice_type& x);

    void
    voice (const voice_optional& x);

    void
    voice (::std::unique_ptr< voice_type > p);

    // staff
    //
    typedef ::xml_schema::positive_integer staff_type;
    typedef ::xsd::cxx::tree::optional< staff_type > staff_optional;
    typedef ::xsd::cxx::tree::traits< staff_type, char > staff_traits;

    const staff_optional&
    staff () const;

    staff_optional&
    staff ();

    void
    staff (const staff_type& x);

    void
    staff (const staff_optional& x);

    // Constructors.
    //
    forward (const duration_type&);

    forward (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    forward (const forward& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual forward*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    forward&
    operator= (const forward& x);

    virtual 
    ~forward ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< duration_type > duration_;
    footnote_optional footnote_;
    level_optional level_;
    voice_optional voice_;
    staff_optional staff_;
  };

  class glissando: public ::xml_schema::string
  {
    public:
    // type
    //
    typedef ::musicxml::start_stop type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // number
    //
    typedef ::musicxml::number_level number_type;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_type&
    number () const;

    number_type&
    number ();

    void
    number (const number_type& x);

    void
    number (::std::unique_ptr< number_type > p);

    static number_type
    number_default_value ();

    // line-type
    //
    typedef ::musicxml::line_type line_type_type;
    typedef ::xsd::cxx::tree::optional< line_type_type > line_type_optional;
    typedef ::xsd::cxx::tree::traits< line_type_type, char > line_type_traits;

    const line_type_optional&
    line_type () const;

    line_type_optional&
    line_type ();

    void
    line_type (const line_type_type& x);

    void
    line_type (const line_type_optional& x);

    void
    line_type (::std::unique_ptr< line_type_type > p);

    // dash-length
    //
    typedef ::musicxml::tenths dash_length_type;
    typedef ::xsd::cxx::tree::optional< dash_length_type > dash_length_optional;
    typedef ::xsd::cxx::tree::traits< dash_length_type, char > dash_length_traits;

    const dash_length_optional&
    dash_length () const;

    dash_length_optional&
    dash_length ();

    void
    dash_length (const dash_length_type& x);

    void
    dash_length (const dash_length_optional& x);

    void
    dash_length (::std::unique_ptr< dash_length_type > p);

    // space-length
    //
    typedef ::musicxml::tenths space_length_type;
    typedef ::xsd::cxx::tree::optional< space_length_type > space_length_optional;
    typedef ::xsd::cxx::tree::traits< space_length_type, char > space_length_traits;

    const space_length_optional&
    space_length () const;

    space_length_optional&
    space_length ();

    void
    space_length (const space_length_type& x);

    void
    space_length (const space_length_optional& x);

    void
    space_length (::std::unique_ptr< space_length_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    glissando (const type_type&);

    glissando (const char*,
               const type_type&);

    glissando (const ::std::string&,
               const type_type&);

    glissando (const ::xml_schema::string&,
               const type_type&);

    glissando (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    glissando (const glissando& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual glissando*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    glissando&
    operator= (const glissando& x);

    virtual 
    ~glissando ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    ::xsd::cxx::tree::one< number_type > number_;
    line_type_optional line_type_;
    dash_length_optional dash_length_;
    space_length_optional space_length_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    id_optional id_;
  };

  class grace: public ::xml_schema::type
  {
    public:
    // steal-time-previous
    //
    typedef ::musicxml::percent steal_time_previous_type;
    typedef ::xsd::cxx::tree::optional< steal_time_previous_type > steal_time_previous_optional;
    typedef ::xsd::cxx::tree::traits< steal_time_previous_type, char > steal_time_previous_traits;

    const steal_time_previous_optional&
    steal_time_previous () const;

    steal_time_previous_optional&
    steal_time_previous ();

    void
    steal_time_previous (const steal_time_previous_type& x);

    void
    steal_time_previous (const steal_time_previous_optional& x);

    void
    steal_time_previous (::std::unique_ptr< steal_time_previous_type > p);

    // steal-time-following
    //
    typedef ::musicxml::percent steal_time_following_type;
    typedef ::xsd::cxx::tree::optional< steal_time_following_type > steal_time_following_optional;
    typedef ::xsd::cxx::tree::traits< steal_time_following_type, char > steal_time_following_traits;

    const steal_time_following_optional&
    steal_time_following () const;

    steal_time_following_optional&
    steal_time_following ();

    void
    steal_time_following (const steal_time_following_type& x);

    void
    steal_time_following (const steal_time_following_optional& x);

    void
    steal_time_following (::std::unique_ptr< steal_time_following_type > p);

    // make-time
    //
    typedef ::musicxml::divisions make_time_type;
    typedef ::xsd::cxx::tree::optional< make_time_type > make_time_optional;
    typedef ::xsd::cxx::tree::traits< make_time_type, char > make_time_traits;

    const make_time_optional&
    make_time () const;

    make_time_optional&
    make_time ();

    void
    make_time (const make_time_type& x);

    void
    make_time (const make_time_optional& x);

    void
    make_time (::std::unique_ptr< make_time_type > p);

    // slash
    //
    typedef ::musicxml::yes_no slash_type;
    typedef ::xsd::cxx::tree::optional< slash_type > slash_optional;
    typedef ::xsd::cxx::tree::traits< slash_type, char > slash_traits;

    const slash_optional&
    slash () const;

    slash_optional&
    slash ();

    void
    slash (const slash_type& x);

    void
    slash (const slash_optional& x);

    void
    slash (::std::unique_ptr< slash_type > p);

    // Constructors.
    //
    grace ();

    grace (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    grace (const grace& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual grace*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    grace&
    operator= (const grace& x);

    virtual 
    ~grace ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    steal_time_previous_optional steal_time_previous_;
    steal_time_following_optional steal_time_following_;
    make_time_optional make_time_;
    slash_optional slash_;
  };

  class hammer_on_pull_off: public ::xml_schema::string
  {
    public:
    // type
    //
    typedef ::musicxml::start_stop type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // number
    //
    typedef ::musicxml::number_level number_type;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_type&
    number () const;

    number_type&
    number ();

    void
    number (const number_type& x);

    void
    number (::std::unique_ptr< number_type > p);

    static number_type
    number_default_value ();

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // Constructors.
    //
    hammer_on_pull_off (const type_type&);

    hammer_on_pull_off (const char*,
                        const type_type&);

    hammer_on_pull_off (const ::std::string&,
                        const type_type&);

    hammer_on_pull_off (const ::xml_schema::string&,
                        const type_type&);

    hammer_on_pull_off (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    hammer_on_pull_off (const hammer_on_pull_off& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual hammer_on_pull_off*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    hammer_on_pull_off&
    operator= (const hammer_on_pull_off& x);

    virtual 
    ~hammer_on_pull_off ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    ::xsd::cxx::tree::one< number_type > number_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
  };

  class handbell: public ::musicxml::handbell_value
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // Constructors.
    //
    handbell (::musicxml::handbell_value::value);

    handbell (const char*);

    handbell (const ::std::string&);

    handbell (const ::musicxml::handbell_value&);

    handbell (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    handbell (const handbell& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual handbell*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    handbell&
    operator= (const handbell& x);

    virtual 
    ~handbell ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
  };

  class harmon_closed: public ::musicxml::harmon_closed_value
  {
    public:
    // location
    //
    typedef ::musicxml::harmon_closed_location location_type;
    typedef ::xsd::cxx::tree::optional< location_type > location_optional;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_optional&
    location () const;

    location_optional&
    location ();

    void
    location (const location_type& x);

    void
    location (const location_optional& x);

    void
    location (::std::unique_ptr< location_type > p);

    // Constructors.
    //
    harmon_closed (::musicxml::harmon_closed_value::value);

    harmon_closed (const char*);

    harmon_closed (const ::std::string&);

    harmon_closed (const ::musicxml::harmon_closed_value&);

    harmon_closed (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    harmon_closed (const harmon_closed& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual harmon_closed*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    harmon_closed&
    operator= (const harmon_closed& x);

    virtual 
    ~harmon_closed ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    location_optional location_;
  };

  class harmon_mute: public ::xml_schema::type
  {
    public:
    // harmon-closed
    //
    typedef ::musicxml::harmon_closed harmon_closed_type;
    typedef ::xsd::cxx::tree::traits< harmon_closed_type, char > harmon_closed_traits;

    const harmon_closed_type&
    harmon_closed () const;

    harmon_closed_type&
    harmon_closed ();

    void
    harmon_closed (const harmon_closed_type& x);

    void
    harmon_closed (::std::unique_ptr< harmon_closed_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // Constructors.
    //
    harmon_mute (const harmon_closed_type&);

    harmon_mute (::std::unique_ptr< harmon_closed_type >);

    harmon_mute (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    harmon_mute (const harmon_mute& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual harmon_mute*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    harmon_mute&
    operator= (const harmon_mute& x);

    virtual 
    ~harmon_mute ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< harmon_closed_type > harmon_closed_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
  };

  class harmonic: public ::xml_schema::type
  {
    public:
    // natural
    //
    typedef ::musicxml::empty natural_type;
    typedef ::xsd::cxx::tree::optional< natural_type > natural_optional;
    typedef ::xsd::cxx::tree::traits< natural_type, char > natural_traits;

    const natural_optional&
    natural () const;

    natural_optional&
    natural ();

    void
    natural (const natural_type& x);

    void
    natural (const natural_optional& x);

    void
    natural (::std::unique_ptr< natural_type > p);

    // artificial
    //
    typedef ::musicxml::empty artificial_type;
    typedef ::xsd::cxx::tree::optional< artificial_type > artificial_optional;
    typedef ::xsd::cxx::tree::traits< artificial_type, char > artificial_traits;

    const artificial_optional&
    artificial () const;

    artificial_optional&
    artificial ();

    void
    artificial (const artificial_type& x);

    void
    artificial (const artificial_optional& x);

    void
    artificial (::std::unique_ptr< artificial_type > p);

    // base-pitch
    //
    typedef ::musicxml::empty base_pitch_type;
    typedef ::xsd::cxx::tree::optional< base_pitch_type > base_pitch_optional;
    typedef ::xsd::cxx::tree::traits< base_pitch_type, char > base_pitch_traits;

    const base_pitch_optional&
    base_pitch () const;

    base_pitch_optional&
    base_pitch ();

    void
    base_pitch (const base_pitch_type& x);

    void
    base_pitch (const base_pitch_optional& x);

    void
    base_pitch (::std::unique_ptr< base_pitch_type > p);

    // touching-pitch
    //
    typedef ::musicxml::empty touching_pitch_type;
    typedef ::xsd::cxx::tree::optional< touching_pitch_type > touching_pitch_optional;
    typedef ::xsd::cxx::tree::traits< touching_pitch_type, char > touching_pitch_traits;

    const touching_pitch_optional&
    touching_pitch () const;

    touching_pitch_optional&
    touching_pitch ();

    void
    touching_pitch (const touching_pitch_type& x);

    void
    touching_pitch (const touching_pitch_optional& x);

    void
    touching_pitch (::std::unique_ptr< touching_pitch_type > p);

    // sounding-pitch
    //
    typedef ::musicxml::empty sounding_pitch_type;
    typedef ::xsd::cxx::tree::optional< sounding_pitch_type > sounding_pitch_optional;
    typedef ::xsd::cxx::tree::traits< sounding_pitch_type, char > sounding_pitch_traits;

    const sounding_pitch_optional&
    sounding_pitch () const;

    sounding_pitch_optional&
    sounding_pitch ();

    void
    sounding_pitch (const sounding_pitch_type& x);

    void
    sounding_pitch (const sounding_pitch_optional& x);

    void
    sounding_pitch (::std::unique_ptr< sounding_pitch_type > p);

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // Constructors.
    //
    harmonic ();

    harmonic (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    harmonic (const harmonic& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual harmonic*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    harmonic&
    operator= (const harmonic& x);

    virtual 
    ~harmonic ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    natural_optional natural_;
    artificial_optional artificial_;
    base_pitch_optional base_pitch_;
    touching_pitch_optional touching_pitch_;
    sounding_pitch_optional sounding_pitch_;
    print_object_optional print_object_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
  };

  class heel_toe: public ::musicxml::empty_placement
  {
    public:
    // substitution
    //
    typedef ::musicxml::yes_no substitution_type;
    typedef ::xsd::cxx::tree::optional< substitution_type > substitution_optional;
    typedef ::xsd::cxx::tree::traits< substitution_type, char > substitution_traits;

    const substitution_optional&
    substitution () const;

    substitution_optional&
    substitution ();

    void
    substitution (const substitution_type& x);

    void
    substitution (const substitution_optional& x);

    void
    substitution (::std::unique_ptr< substitution_type > p);

    // Constructors.
    //
    heel_toe ();

    heel_toe (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    heel_toe (const heel_toe& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual heel_toe*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    heel_toe&
    operator= (const heel_toe& x);

    virtual 
    ~heel_toe ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    substitution_optional substitution_;
  };

  class hole: public ::xml_schema::type
  {
    public:
    // hole-type
    //
    typedef ::xml_schema::string hole_type_type;
    typedef ::xsd::cxx::tree::optional< hole_type_type > hole_type_optional;
    typedef ::xsd::cxx::tree::traits< hole_type_type, char > hole_type_traits;

    const hole_type_optional&
    hole_type () const;

    hole_type_optional&
    hole_type ();

    void
    hole_type (const hole_type_type& x);

    void
    hole_type (const hole_type_optional& x);

    void
    hole_type (::std::unique_ptr< hole_type_type > p);

    // hole-closed
    //
    typedef ::musicxml::hole_closed hole_closed_type;
    typedef ::xsd::cxx::tree::traits< hole_closed_type, char > hole_closed_traits;

    const hole_closed_type&
    hole_closed () const;

    hole_closed_type&
    hole_closed ();

    void
    hole_closed (const hole_closed_type& x);

    void
    hole_closed (::std::unique_ptr< hole_closed_type > p);

    // hole-shape
    //
    typedef ::xml_schema::string hole_shape_type;
    typedef ::xsd::cxx::tree::optional< hole_shape_type > hole_shape_optional;
    typedef ::xsd::cxx::tree::traits< hole_shape_type, char > hole_shape_traits;

    const hole_shape_optional&
    hole_shape () const;

    hole_shape_optional&
    hole_shape ();

    void
    hole_shape (const hole_shape_type& x);

    void
    hole_shape (const hole_shape_optional& x);

    void
    hole_shape (::std::unique_ptr< hole_shape_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // Constructors.
    //
    hole (const hole_closed_type&);

    hole (::std::unique_ptr< hole_closed_type >);

    hole (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    hole (const hole& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual hole*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    hole&
    operator= (const hole& x);

    virtual 
    ~hole ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    hole_type_optional hole_type_;
    ::xsd::cxx::tree::one< hole_closed_type > hole_closed_;
    hole_shape_optional hole_shape_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
  };

  class hole_closed: public ::musicxml::hole_closed_value
  {
    public:
    // location
    //
    typedef ::musicxml::hole_closed_location location_type;
    typedef ::xsd::cxx::tree::optional< location_type > location_optional;
    typedef ::xsd::cxx::tree::traits< location_type, char > location_traits;

    const location_optional&
    location () const;

    location_optional&
    location ();

    void
    location (const location_type& x);

    void
    location (const location_optional& x);

    void
    location (::std::unique_ptr< location_type > p);

    // Constructors.
    //
    hole_closed (::musicxml::hole_closed_value::value);

    hole_closed (const char*);

    hole_closed (const ::std::string&);

    hole_closed (const ::musicxml::hole_closed_value&);

    hole_closed (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    hole_closed (const hole_closed& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual hole_closed*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    hole_closed&
    operator= (const hole_closed& x);

    virtual 
    ~hole_closed ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    location_optional location_;
  };

  class instrument: public ::xml_schema::type
  {
    public:
    // id
    //
    typedef ::xml_schema::idref id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    instrument (const id_type&);

    instrument (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    instrument (const instrument& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual instrument*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    instrument&
    operator= (const instrument& x);

    virtual 
    ~instrument ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
  };

  class listen: public ::xml_schema::type
  {
    public:
    // assess
    //
    typedef ::musicxml::assess assess_type;
    typedef ::xsd::cxx::tree::sequence< assess_type > assess_sequence;
    typedef assess_sequence::iterator assess_iterator;
    typedef assess_sequence::const_iterator assess_const_iterator;
    typedef ::xsd::cxx::tree::traits< assess_type, char > assess_traits;

    const assess_sequence&
    assess () const;

    assess_sequence&
    assess ();

    void
    assess (const assess_sequence& s);

    // wait
    //
    typedef ::musicxml::wait wait_type;
    typedef ::xsd::cxx::tree::sequence< wait_type > wait_sequence;
    typedef wait_sequence::iterator wait_iterator;
    typedef wait_sequence::const_iterator wait_const_iterator;
    typedef ::xsd::cxx::tree::traits< wait_type, char > wait_traits;

    const wait_sequence&
    wait () const;

    wait_sequence&
    wait ();

    void
    wait (const wait_sequence& s);

    // other-listen
    //
    typedef ::musicxml::other_listening other_listen_type;
    typedef ::xsd::cxx::tree::sequence< other_listen_type > other_listen_sequence;
    typedef other_listen_sequence::iterator other_listen_iterator;
    typedef other_listen_sequence::const_iterator other_listen_const_iterator;
    typedef ::xsd::cxx::tree::traits< other_listen_type, char > other_listen_traits;

    const other_listen_sequence&
    other_listen () const;

    other_listen_sequence&
    other_listen ();

    void
    other_listen (const other_listen_sequence& s);

    // Constructors.
    //
    listen ();

    listen (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    listen (const listen& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual listen*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    listen&
    operator= (const listen& x);

    virtual 
    ~listen ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    assess_sequence assess_;
    wait_sequence wait_;
    other_listen_sequence other_listen_;
  };

  class lyric: public ::xml_schema::type
  {
    public:
    // syllabic
    //
    typedef ::musicxml::syllabic syllabic_type;
    typedef ::xsd::cxx::tree::sequence< syllabic_type > syllabic_sequence;
    typedef syllabic_sequence::iterator syllabic_iterator;
    typedef syllabic_sequence::const_iterator syllabic_const_iterator;
    typedef ::xsd::cxx::tree::traits< syllabic_type, char > syllabic_traits;

    const syllabic_sequence&
    syllabic () const;

    syllabic_sequence&
    syllabic ();

    void
    syllabic (const syllabic_sequence& s);

    // text
    //
    typedef ::musicxml::text_element_data text_type;
    typedef ::xsd::cxx::tree::sequence< text_type > text_sequence;
    typedef text_sequence::iterator text_iterator;
    typedef text_sequence::const_iterator text_const_iterator;
    typedef ::xsd::cxx::tree::traits< text_type, char > text_traits;

    const text_sequence&
    text () const;

    text_sequence&
    text ();

    void
    text (const text_sequence& s);

    // elision
    //
    typedef ::musicxml::elision elision_type;
    typedef ::xsd::cxx::tree::sequence< elision_type > elision_sequence;
    typedef elision_sequence::iterator elision_iterator;
    typedef elision_sequence::const_iterator elision_const_iterator;
    typedef ::xsd::cxx::tree::traits< elision_type, char > elision_traits;

    const elision_sequence&
    elision () const;

    elision_sequence&
    elision ();

    void
    elision (const elision_sequence& s);

    // extend
    //
    typedef ::musicxml::extend extend_type;
    typedef ::xsd::cxx::tree::optional< extend_type > extend_optional;
    typedef ::xsd::cxx::tree::traits< extend_type, char > extend_traits;

    const extend_optional&
    extend () const;

    extend_optional&
    extend ();

    void
    extend (const extend_type& x);

    void
    extend (const extend_optional& x);

    void
    extend (::std::unique_ptr< extend_type > p);

    // laughing
    //
    typedef ::musicxml::empty laughing_type;
    typedef ::xsd::cxx::tree::optional< laughing_type > laughing_optional;
    typedef ::xsd::cxx::tree::traits< laughing_type, char > laughing_traits;

    const laughing_optional&
    laughing () const;

    laughing_optional&
    laughing ();

    void
    laughing (const laughing_type& x);

    void
    laughing (const laughing_optional& x);

    void
    laughing (::std::unique_ptr< laughing_type > p);

    // humming
    //
    typedef ::musicxml::empty humming_type;
    typedef ::xsd::cxx::tree::optional< humming_type > humming_optional;
    typedef ::xsd::cxx::tree::traits< humming_type, char > humming_traits;

    const humming_optional&
    humming () const;

    humming_optional&
    humming ();

    void
    humming (const humming_type& x);

    void
    humming (const humming_optional& x);

    void
    humming (::std::unique_ptr< humming_type > p);

    // end-line
    //
    typedef ::musicxml::empty end_line_type;
    typedef ::xsd::cxx::tree::optional< end_line_type > end_line_optional;
    typedef ::xsd::cxx::tree::traits< end_line_type, char > end_line_traits;

    const end_line_optional&
    end_line () const;

    end_line_optional&
    end_line ();

    void
    end_line (const end_line_type& x);

    void
    end_line (const end_line_optional& x);

    void
    end_line (::std::unique_ptr< end_line_type > p);

    // end-paragraph
    //
    typedef ::musicxml::empty end_paragraph_type;
    typedef ::xsd::cxx::tree::optional< end_paragraph_type > end_paragraph_optional;
    typedef ::xsd::cxx::tree::traits< end_paragraph_type, char > end_paragraph_traits;

    const end_paragraph_optional&
    end_paragraph () const;

    end_paragraph_optional&
    end_paragraph ();

    void
    end_paragraph (const end_paragraph_type& x);

    void
    end_paragraph (const end_paragraph_optional& x);

    void
    end_paragraph (::std::unique_ptr< end_paragraph_type > p);

    // footnote
    //
    typedef ::musicxml::formatted_text footnote_type;
    typedef ::xsd::cxx::tree::optional< footnote_type > footnote_optional;
    typedef ::xsd::cxx::tree::traits< footnote_type, char > footnote_traits;

    const footnote_optional&
    footnote () const;

    footnote_optional&
    footnote ();

    void
    footnote (const footnote_type& x);

    void
    footnote (const footnote_optional& x);

    void
    footnote (::std::unique_ptr< footnote_type > p);

    // level
    //
    typedef ::musicxml::level level_type;
    typedef ::xsd::cxx::tree::optional< level_type > level_optional;
    typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

    const level_optional&
    level () const;

    level_optional&
    level ();

    void
    level (const level_type& x);

    void
    level (const level_optional& x);

    void
    level (::std::unique_ptr< level_type > p);

    // number
    //
    typedef ::xml_schema::nmtoken number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // name
    //
    typedef ::xml_schema::token name_type;
    typedef ::xsd::cxx::tree::optional< name_type > name_optional;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_optional&
    name () const;

    name_optional&
    name ();

    void
    name (const name_type& x);

    void
    name (const name_optional& x);

    void
    name (::std::unique_ptr< name_type > p);

    // justify
    //
    typedef ::musicxml::left_center_right justify_type;
    typedef ::xsd::cxx::tree::optional< justify_type > justify_optional;
    typedef ::xsd::cxx::tree::traits< justify_type, char > justify_traits;

    const justify_optional&
    justify () const;

    justify_optional&
    justify ();

    void
    justify (const justify_type& x);

    void
    justify (const justify_optional& x);

    void
    justify (::std::unique_ptr< justify_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // time-only
    //
    typedef ::musicxml::time_only time_only_type;
    typedef ::xsd::cxx::tree::optional< time_only_type > time_only_optional;
    typedef ::xsd::cxx::tree::traits< time_only_type, char > time_only_traits;

    const time_only_optional&
    time_only () const;

    time_only_optional&
    time_only ();

    void
    time_only (const time_only_type& x);

    void
    time_only (const time_only_optional& x);

    void
    time_only (::std::unique_ptr< time_only_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    lyric ();

    lyric (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    lyric (const lyric& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual lyric*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    lyric&
    operator= (const lyric& x);

    virtual 
    ~lyric ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    syllabic_sequence syllabic_;
    text_sequence text_;
    elision_sequence elision_;
    extend_optional extend_;
    laughing_optional laughing_;
    humming_optional humming_;
    end_line_optional end_line_;
    end_paragraph_optional end_paragraph_;
    footnote_optional footnote_;
    level_optional level_;
    number_optional number_;
    name_optional name_;
    justify_optional justify_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    placement_optional placement_;
    color_optional color_;
    print_object_optional print_object_;
    time_only_optional time_only_;
    id_optional id_;
  };

  class mordent: public ::musicxml::empty_trill_sound
  {
    public:
    // long
    //
    typedef ::musicxml::yes_no long_type;
    typedef ::xsd::cxx::tree::optional< long_type > long_optional;
    typedef ::xsd::cxx::tree::traits< long_type, char > long_traits;

    const long_optional&
    long_ () const;

    long_optional&
    long_ ();

    void
    long_ (const long_type& x);

    void
    long_ (const long_optional& x);

    void
    long_ (::std::unique_ptr< long_type > p);

    // approach
    //
    typedef ::musicxml::above_below approach_type;
    typedef ::xsd::cxx::tree::optional< approach_type > approach_optional;
    typedef ::xsd::cxx::tree::traits< approach_type, char > approach_traits;

    const approach_optional&
    approach () const;

    approach_optional&
    approach ();

    void
    approach (const approach_type& x);

    void
    approach (const approach_optional& x);

    void
    approach (::std::unique_ptr< approach_type > p);

    // departure
    //
    typedef ::musicxml::above_below departure_type;
    typedef ::xsd::cxx::tree::optional< departure_type > departure_optional;
    typedef ::xsd::cxx::tree::traits< departure_type, char > departure_traits;

    const departure_optional&
    departure () const;

    departure_optional&
    departure ();

    void
    departure (const departure_type& x);

    void
    departure (const departure_optional& x);

    void
    departure (::std::unique_ptr< departure_type > p);

    // Constructors.
    //
    mordent ();

    mordent (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    mordent (const mordent& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual mordent*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    mordent&
    operator= (const mordent& x);

    virtual 
    ~mordent ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    long_optional long__;
    approach_optional approach_;
    departure_optional departure_;
  };

  class non_arpeggiate: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::top_bottom type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // number
    //
    typedef ::musicxml::number_level number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    non_arpeggiate (const type_type&);

    non_arpeggiate (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    non_arpeggiate (const non_arpeggiate& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual non_arpeggiate*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    non_arpeggiate&
    operator= (const non_arpeggiate& x);

    virtual 
    ~non_arpeggiate ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    number_optional number_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    placement_optional placement_;
    color_optional color_;
    id_optional id_;
  };

  class notations: public ::xml_schema::type
  {
    public:
    // footnote
    //
    typedef ::musicxml::formatted_text footnote_type;
    typedef ::xsd::cxx::tree::optional< footnote_type > footnote_optional;
    typedef ::xsd::cxx::tree::traits< footnote_type, char > footnote_traits;

    const footnote_optional&
    footnote () const;

    footnote_optional&
    footnote ();

    void
    footnote (const footnote_type& x);

    void
    footnote (const footnote_optional& x);

    void
    footnote (::std::unique_ptr< footnote_type > p);

    // level
    //
    typedef ::musicxml::level level_type;
    typedef ::xsd::cxx::tree::optional< level_type > level_optional;
    typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

    const level_optional&
    level () const;

    level_optional&
    level ();

    void
    level (const level_type& x);

    void
    level (const level_optional& x);

    void
    level (::std::unique_ptr< level_type > p);

    // tied
    //
    typedef ::musicxml::tied tied_type;
    typedef ::xsd::cxx::tree::sequence< tied_type > tied_sequence;
    typedef tied_sequence::iterator tied_iterator;
    typedef tied_sequence::const_iterator tied_const_iterator;
    typedef ::xsd::cxx::tree::traits< tied_type, char > tied_traits;

    const tied_sequence&
    tied () const;

    tied_sequence&
    tied ();

    void
    tied (const tied_sequence& s);

    // slur
    //
    typedef ::musicxml::slur slur_type;
    typedef ::xsd::cxx::tree::sequence< slur_type > slur_sequence;
    typedef slur_sequence::iterator slur_iterator;
    typedef slur_sequence::const_iterator slur_const_iterator;
    typedef ::xsd::cxx::tree::traits< slur_type, char > slur_traits;

    const slur_sequence&
    slur () const;

    slur_sequence&
    slur ();

    void
    slur (const slur_sequence& s);

    // tuplet
    //
    typedef ::musicxml::tuplet tuplet_type;
    typedef ::xsd::cxx::tree::sequence< tuplet_type > tuplet_sequence;
    typedef tuplet_sequence::iterator tuplet_iterator;
    typedef tuplet_sequence::const_iterator tuplet_const_iterator;
    typedef ::xsd::cxx::tree::traits< tuplet_type, char > tuplet_traits;

    const tuplet_sequence&
    tuplet () const;

    tuplet_sequence&
    tuplet ();

    void
    tuplet (const tuplet_sequence& s);

    // glissando
    //
    typedef ::musicxml::glissando glissando_type;
    typedef ::xsd::cxx::tree::sequence< glissando_type > glissando_sequence;
    typedef glissando_sequence::iterator glissando_iterator;
    typedef glissando_sequence::const_iterator glissando_const_iterator;
    typedef ::xsd::cxx::tree::traits< glissando_type, char > glissando_traits;

    const glissando_sequence&
    glissando () const;

    glissando_sequence&
    glissando ();

    void
    glissando (const glissando_sequence& s);

    // slide
    //
    typedef ::musicxml::slide slide_type;
    typedef ::xsd::cxx::tree::sequence< slide_type > slide_sequence;
    typedef slide_sequence::iterator slide_iterator;
    typedef slide_sequence::const_iterator slide_const_iterator;
    typedef ::xsd::cxx::tree::traits< slide_type, char > slide_traits;

    const slide_sequence&
    slide () const;

    slide_sequence&
    slide ();

    void
    slide (const slide_sequence& s);

    // ornaments
    //
    typedef ::musicxml::ornaments ornaments_type;
    typedef ::xsd::cxx::tree::sequence< ornaments_type > ornaments_sequence;
    typedef ornaments_sequence::iterator ornaments_iterator;
    typedef ornaments_sequence::const_iterator ornaments_const_iterator;
    typedef ::xsd::cxx::tree::traits< ornaments_type, char > ornaments_traits;

    const ornaments_sequence&
    ornaments () const;

    ornaments_sequence&
    ornaments ();

    void
    ornaments (const ornaments_sequence& s);

    // technical
    //
    typedef ::musicxml::technical technical_type;
    typedef ::xsd::cxx::tree::sequence< technical_type > technical_sequence;
    typedef technical_sequence::iterator technical_iterator;
    typedef technical_sequence::const_iterator technical_const_iterator;
    typedef ::xsd::cxx::tree::traits< technical_type, char > technical_traits;

    const technical_sequence&
    technical () const;

    technical_sequence&
    technical ();

    void
    technical (const technical_sequence& s);

    // articulations
    //
    typedef ::musicxml::articulations articulations_type;
    typedef ::xsd::cxx::tree::sequence< articulations_type > articulations_sequence;
    typedef articulations_sequence::iterator articulations_iterator;
    typedef articulations_sequence::const_iterator articulations_const_iterator;
    typedef ::xsd::cxx::tree::traits< articulations_type, char > articulations_traits;

    const articulations_sequence&
    articulations () const;

    articulations_sequence&
    articulations ();

    void
    articulations (const articulations_sequence& s);

    // dynamics
    //
    typedef ::musicxml::dynamics dynamics_type;
    typedef ::xsd::cxx::tree::sequence< dynamics_type > dynamics_sequence;
    typedef dynamics_sequence::iterator dynamics_iterator;
    typedef dynamics_sequence::const_iterator dynamics_const_iterator;
    typedef ::xsd::cxx::tree::traits< dynamics_type, char > dynamics_traits;

    const dynamics_sequence&
    dynamics () const;

    dynamics_sequence&
    dynamics ();

    void
    dynamics (const dynamics_sequence& s);

    // fermata
    //
    typedef ::musicxml::fermata fermata_type;
    typedef ::xsd::cxx::tree::sequence< fermata_type > fermata_sequence;
    typedef fermata_sequence::iterator fermata_iterator;
    typedef fermata_sequence::const_iterator fermata_const_iterator;
    typedef ::xsd::cxx::tree::traits< fermata_type, char > fermata_traits;

    const fermata_sequence&
    fermata () const;

    fermata_sequence&
    fermata ();

    void
    fermata (const fermata_sequence& s);

    // arpeggiate
    //
    typedef ::musicxml::arpeggiate arpeggiate_type;
    typedef ::xsd::cxx::tree::sequence< arpeggiate_type > arpeggiate_sequence;
    typedef arpeggiate_sequence::iterator arpeggiate_iterator;
    typedef arpeggiate_sequence::const_iterator arpeggiate_const_iterator;
    typedef ::xsd::cxx::tree::traits< arpeggiate_type, char > arpeggiate_traits;

    const arpeggiate_sequence&
    arpeggiate () const;

    arpeggiate_sequence&
    arpeggiate ();

    void
    arpeggiate (const arpeggiate_sequence& s);

    // non-arpeggiate
    //
    typedef ::musicxml::non_arpeggiate non_arpeggiate_type;
    typedef ::xsd::cxx::tree::sequence< non_arpeggiate_type > non_arpeggiate_sequence;
    typedef non_arpeggiate_sequence::iterator non_arpeggiate_iterator;
    typedef non_arpeggiate_sequence::const_iterator non_arpeggiate_const_iterator;
    typedef ::xsd::cxx::tree::traits< non_arpeggiate_type, char > non_arpeggiate_traits;

    const non_arpeggiate_sequence&
    non_arpeggiate () const;

    non_arpeggiate_sequence&
    non_arpeggiate ();

    void
    non_arpeggiate (const non_arpeggiate_sequence& s);

    // accidental-mark
    //
    typedef ::musicxml::accidental_mark accidental_mark_type;
    typedef ::xsd::cxx::tree::sequence< accidental_mark_type > accidental_mark_sequence;
    typedef accidental_mark_sequence::iterator accidental_mark_iterator;
    typedef accidental_mark_sequence::const_iterator accidental_mark_const_iterator;
    typedef ::xsd::cxx::tree::traits< accidental_mark_type, char > accidental_mark_traits;

    const accidental_mark_sequence&
    accidental_mark () const;

    accidental_mark_sequence&
    accidental_mark ();

    void
    accidental_mark (const accidental_mark_sequence& s);

    // other-notation
    //
    typedef ::musicxml::other_notation other_notation_type;
    typedef ::xsd::cxx::tree::sequence< other_notation_type > other_notation_sequence;
    typedef other_notation_sequence::iterator other_notation_iterator;
    typedef other_notation_sequence::const_iterator other_notation_const_iterator;
    typedef ::xsd::cxx::tree::traits< other_notation_type, char > other_notation_traits;

    const other_notation_sequence&
    other_notation () const;

    other_notation_sequence&
    other_notation ();

    void
    other_notation (const other_notation_sequence& s);

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    notations ();

    notations (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    notations (const notations& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual notations*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    notations&
    operator= (const notations& x);

    virtual 
    ~notations ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    footnote_optional footnote_;
    level_optional level_;
    tied_sequence tied_;
    slur_sequence slur_;
    tuplet_sequence tuplet_;
    glissando_sequence glissando_;
    slide_sequence slide_;
    ornaments_sequence ornaments_;
    technical_sequence technical_;
    articulations_sequence articulations_;
    dynamics_sequence dynamics_;
    fermata_sequence fermata_;
    arpeggiate_sequence arpeggiate_;
    non_arpeggiate_sequence non_arpeggiate_;
    accidental_mark_sequence accidental_mark_;
    other_notation_sequence other_notation_;
    print_object_optional print_object_;
    id_optional id_;
  };

  class note: public ::xml_schema::type
  {
    public:
    // grace
    //
    typedef ::musicxml::grace grace_type;
    typedef ::xsd::cxx::tree::optional< grace_type > grace_optional;
    typedef ::xsd::cxx::tree::traits< grace_type, char > grace_traits;

    const grace_optional&
    grace () const;

    grace_optional&
    grace ();

    void
    grace (const grace_type& x);

    void
    grace (const grace_optional& x);

    void
    grace (::std::unique_ptr< grace_type > p);

    // chord
    //
    typedef ::musicxml::empty chord_type;
    typedef ::xsd::cxx::tree::optional< chord_type > chord_optional;
    typedef ::xsd::cxx::tree::traits< chord_type, char > chord_traits;

    const chord_optional&
    chord () const;

    chord_optional&
    chord ();

    void
    chord (const chord_type& x);

    void
    chord (const chord_optional& x);

    void
    chord (::std::unique_ptr< chord_type > p);

    // pitch
    //
    typedef ::musicxml::pitch pitch_type;
    typedef ::xsd::cxx::tree::optional< pitch_type > pitch_optional;
    typedef ::xsd::cxx::tree::traits< pitch_type, char > pitch_traits;

    const pitch_optional&
    pitch () const;

    pitch_optional&
    pitch ();

    void
    pitch (const pitch_type& x);

    void
    pitch (const pitch_optional& x);

    void
    pitch (::std::unique_ptr< pitch_type > p);

    // unpitched
    //
    typedef ::musicxml::unpitched unpitched_type;
    typedef ::xsd::cxx::tree::optional< unpitched_type > unpitched_optional;
    typedef ::xsd::cxx::tree::traits< unpitched_type, char > unpitched_traits;

    const unpitched_optional&
    unpitched () const;

    unpitched_optional&
    unpitched ();

    void
    unpitched (const unpitched_type& x);

    void
    unpitched (const unpitched_optional& x);

    void
    unpitched (::std::unique_ptr< unpitched_type > p);

    // rest
    //
    typedef ::musicxml::rest rest_type;
    typedef ::xsd::cxx::tree::optional< rest_type > rest_optional;
    typedef ::xsd::cxx::tree::traits< rest_type, char > rest_traits;

    const rest_optional&
    rest () const;

    rest_optional&
    rest ();

    void
    rest (const rest_type& x);

    void
    rest (const rest_optional& x);

    void
    rest (::std::unique_ptr< rest_type > p);

    // tie
    //
    typedef ::musicxml::tie tie_type;
    typedef ::xsd::cxx::tree::sequence< tie_type > tie_sequence;
    typedef tie_sequence::iterator tie_iterator;
    typedef tie_sequence::const_iterator tie_const_iterator;
    typedef ::xsd::cxx::tree::traits< tie_type, char > tie_traits;

    const tie_sequence&
    tie () const;

    tie_sequence&
    tie ();

    void
    tie (const tie_sequence& s);

    // cue
    //
    typedef ::musicxml::empty cue_type;
    typedef ::xsd::cxx::tree::optional< cue_type > cue_optional;
    typedef ::xsd::cxx::tree::traits< cue_type, char > cue_traits;

    const cue_optional&
    cue () const;

    cue_optional&
    cue ();

    void
    cue (const cue_type& x);

    void
    cue (const cue_optional& x);

    void
    cue (::std::unique_ptr< cue_type > p);

    // duration
    //
    typedef ::musicxml::positive_divisions duration_type;
    typedef ::xsd::cxx::tree::optional< duration_type > duration_optional;
    typedef ::xsd::cxx::tree::traits< duration_type, char > duration_traits;

    const duration_optional&
    duration () const;

    duration_optional&
    duration ();

    void
    duration (const duration_type& x);

    void
    duration (const duration_optional& x);

    void
    duration (::std::unique_ptr< duration_type > p);

    // instrument
    //
    typedef ::musicxml::instrument instrument_type;
    typedef ::xsd::cxx::tree::sequence< instrument_type > instrument_sequence;
    typedef instrument_sequence::iterator instrument_iterator;
    typedef instrument_sequence::const_iterator instrument_const_iterator;
    typedef ::xsd::cxx::tree::traits< instrument_type, char > instrument_traits;

    const instrument_sequence&
    instrument () const;

    instrument_sequence&
    instrument ();

    void
    instrument (const instrument_sequence& s);

    // footnote
    //
    typedef ::musicxml::formatted_text footnote_type;
    typedef ::xsd::cxx::tree::optional< footnote_type > footnote_optional;
    typedef ::xsd::cxx::tree::traits< footnote_type, char > footnote_traits;

    const footnote_optional&
    footnote () const;

    footnote_optional&
    footnote ();

    void
    footnote (const footnote_type& x);

    void
    footnote (const footnote_optional& x);

    void
    footnote (::std::unique_ptr< footnote_type > p);

    // level
    //
    typedef ::musicxml::level level_type;
    typedef ::xsd::cxx::tree::optional< level_type > level_optional;
    typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

    const level_optional&
    level () const;

    level_optional&
    level ();

    void
    level (const level_type& x);

    void
    level (const level_optional& x);

    void
    level (::std::unique_ptr< level_type > p);

    // voice
    //
    typedef ::xml_schema::string voice_type;
    typedef ::xsd::cxx::tree::optional< voice_type > voice_optional;
    typedef ::xsd::cxx::tree::traits< voice_type, char > voice_traits;

    const voice_optional&
    voice () const;

    voice_optional&
    voice ();

    void
    voice (const voice_type& x);

    void
    voice (const voice_optional& x);

    void
    voice (::std::unique_ptr< voice_type > p);

    // type
    //
    typedef ::musicxml::note_type type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    void
    type (::std::unique_ptr< type_type > p);

    // dot
    //
    typedef ::musicxml::empty_placement dot_type;
    typedef ::xsd::cxx::tree::sequence< dot_type > dot_sequence;
    typedef dot_sequence::iterator dot_iterator;
    typedef dot_sequence::const_iterator dot_const_iterator;
    typedef ::xsd::cxx::tree::traits< dot_type, char > dot_traits;

    const dot_sequence&
    dot () const;

    dot_sequence&
    dot ();

    void
    dot (const dot_sequence& s);

    // accidental
    //
    typedef ::musicxml::accidental accidental_type;
    typedef ::xsd::cxx::tree::optional< accidental_type > accidental_optional;
    typedef ::xsd::cxx::tree::traits< accidental_type, char > accidental_traits;

    const accidental_optional&
    accidental () const;

    accidental_optional&
    accidental ();

    void
    accidental (const accidental_type& x);

    void
    accidental (const accidental_optional& x);

    void
    accidental (::std::unique_ptr< accidental_type > p);

    // time-modification
    //
    typedef ::musicxml::time_modification time_modification_type;
    typedef ::xsd::cxx::tree::optional< time_modification_type > time_modification_optional;
    typedef ::xsd::cxx::tree::traits< time_modification_type, char > time_modification_traits;

    const time_modification_optional&
    time_modification () const;

    time_modification_optional&
    time_modification ();

    void
    time_modification (const time_modification_type& x);

    void
    time_modification (const time_modification_optional& x);

    void
    time_modification (::std::unique_ptr< time_modification_type > p);

    // stem
    //
    typedef ::musicxml::stem stem_type;
    typedef ::xsd::cxx::tree::optional< stem_type > stem_optional;
    typedef ::xsd::cxx::tree::traits< stem_type, char > stem_traits;

    const stem_optional&
    stem () const;

    stem_optional&
    stem ();

    void
    stem (const stem_type& x);

    void
    stem (const stem_optional& x);

    void
    stem (::std::unique_ptr< stem_type > p);

    // notehead
    //
    typedef ::musicxml::notehead notehead_type;
    typedef ::xsd::cxx::tree::optional< notehead_type > notehead_optional;
    typedef ::xsd::cxx::tree::traits< notehead_type, char > notehead_traits;

    const notehead_optional&
    notehead () const;

    notehead_optional&
    notehead ();

    void
    notehead (const notehead_type& x);

    void
    notehead (const notehead_optional& x);

    void
    notehead (::std::unique_ptr< notehead_type > p);

    // notehead-text
    //
    typedef ::musicxml::notehead_text notehead_text_type;
    typedef ::xsd::cxx::tree::optional< notehead_text_type > notehead_text_optional;
    typedef ::xsd::cxx::tree::traits< notehead_text_type, char > notehead_text_traits;

    const notehead_text_optional&
    notehead_text () const;

    notehead_text_optional&
    notehead_text ();

    void
    notehead_text (const notehead_text_type& x);

    void
    notehead_text (const notehead_text_optional& x);

    void
    notehead_text (::std::unique_ptr< notehead_text_type > p);

    // staff
    //
    typedef ::xml_schema::positive_integer staff_type;
    typedef ::xsd::cxx::tree::optional< staff_type > staff_optional;
    typedef ::xsd::cxx::tree::traits< staff_type, char > staff_traits;

    const staff_optional&
    staff () const;

    staff_optional&
    staff ();

    void
    staff (const staff_type& x);

    void
    staff (const staff_optional& x);

    // beam
    //
    typedef ::musicxml::beam beam_type;
    typedef ::xsd::cxx::tree::sequence< beam_type > beam_sequence;
    typedef beam_sequence::iterator beam_iterator;
    typedef beam_sequence::const_iterator beam_const_iterator;
    typedef ::xsd::cxx::tree::traits< beam_type, char > beam_traits;

    const beam_sequence&
    beam () const;

    beam_sequence&
    beam ();

    void
    beam (const beam_sequence& s);

    // notations
    //
    typedef ::musicxml::notations notations_type;
    typedef ::xsd::cxx::tree::sequence< notations_type > notations_sequence;
    typedef notations_sequence::iterator notations_iterator;
    typedef notations_sequence::const_iterator notations_const_iterator;
    typedef ::xsd::cxx::tree::traits< notations_type, char > notations_traits;

    const notations_sequence&
    notations () const;

    notations_sequence&
    notations ();

    void
    notations (const notations_sequence& s);

    // lyric
    //
    typedef ::musicxml::lyric lyric_type;
    typedef ::xsd::cxx::tree::sequence< lyric_type > lyric_sequence;
    typedef lyric_sequence::iterator lyric_iterator;
    typedef lyric_sequence::const_iterator lyric_const_iterator;
    typedef ::xsd::cxx::tree::traits< lyric_type, char > lyric_traits;

    const lyric_sequence&
    lyric () const;

    lyric_sequence&
    lyric ();

    void
    lyric (const lyric_sequence& s);

    // play
    //
    typedef ::musicxml::play play_type;
    typedef ::xsd::cxx::tree::optional< play_type > play_optional;
    typedef ::xsd::cxx::tree::traits< play_type, char > play_traits;

    const play_optional&
    play () const;

    play_optional&
    play ();

    void
    play (const play_type& x);

    void
    play (const play_optional& x);

    void
    play (::std::unique_ptr< play_type > p);

    // listen
    //
    typedef ::musicxml::listen listen_type;
    typedef ::xsd::cxx::tree::optional< listen_type > listen_optional;
    typedef ::xsd::cxx::tree::traits< listen_type, char > listen_traits;

    const listen_optional&
    listen () const;

    listen_optional&
    listen ();

    void
    listen (const listen_type& x);

    void
    listen (const listen_optional& x);

    void
    listen (::std::unique_ptr< listen_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // print-dot
    //
    typedef ::musicxml::yes_no print_dot_type;
    typedef ::xsd::cxx::tree::optional< print_dot_type > print_dot_optional;
    typedef ::xsd::cxx::tree::traits< print_dot_type, char > print_dot_traits;

    const print_dot_optional&
    print_dot () const;

    print_dot_optional&
    print_dot ();

    void
    print_dot (const print_dot_type& x);

    void
    print_dot (const print_dot_optional& x);

    void
    print_dot (::std::unique_ptr< print_dot_type > p);

    // print-spacing
    //
    typedef ::musicxml::yes_no print_spacing_type;
    typedef ::xsd::cxx::tree::optional< print_spacing_type > print_spacing_optional;
    typedef ::xsd::cxx::tree::traits< print_spacing_type, char > print_spacing_traits;

    const print_spacing_optional&
    print_spacing () const;

    print_spacing_optional&
    print_spacing ();

    void
    print_spacing (const print_spacing_type& x);

    void
    print_spacing (const print_spacing_optional& x);

    void
    print_spacing (::std::unique_ptr< print_spacing_type > p);

    // print-lyric
    //
    typedef ::musicxml::yes_no print_lyric_type;
    typedef ::xsd::cxx::tree::optional< print_lyric_type > print_lyric_optional;
    typedef ::xsd::cxx::tree::traits< print_lyric_type, char > print_lyric_traits;

    const print_lyric_optional&
    print_lyric () const;

    print_lyric_optional&
    print_lyric ();

    void
    print_lyric (const print_lyric_type& x);

    void
    print_lyric (const print_lyric_optional& x);

    void
    print_lyric (::std::unique_ptr< print_lyric_type > p);

    // print-leger
    //
    typedef ::musicxml::yes_no print_leger_type;
    typedef ::xsd::cxx::tree::optional< print_leger_type > print_leger_optional;
    typedef ::xsd::cxx::tree::traits< print_leger_type, char > print_leger_traits;

    const print_leger_optional&
    print_leger () const;

    print_leger_optional&
    print_leger ();

    void
    print_leger (const print_leger_type& x);

    void
    print_leger (const print_leger_optional& x);

    void
    print_leger (::std::unique_ptr< print_leger_type > p);

    // dynamics
    //
    typedef ::musicxml::non_negative_decimal dynamics_type;
    typedef ::xsd::cxx::tree::optional< dynamics_type > dynamics_optional;
    typedef ::xsd::cxx::tree::traits< dynamics_type, char > dynamics_traits;

    const dynamics_optional&
    dynamics () const;

    dynamics_optional&
    dynamics ();

    void
    dynamics (const dynamics_type& x);

    void
    dynamics (const dynamics_optional& x);

    void
    dynamics (::std::unique_ptr< dynamics_type > p);

    // end-dynamics
    //
    typedef ::musicxml::non_negative_decimal end_dynamics_type;
    typedef ::xsd::cxx::tree::optional< end_dynamics_type > end_dynamics_optional;
    typedef ::xsd::cxx::tree::traits< end_dynamics_type, char > end_dynamics_traits;

    const end_dynamics_optional&
    end_dynamics () const;

    end_dynamics_optional&
    end_dynamics ();

    void
    end_dynamics (const end_dynamics_type& x);

    void
    end_dynamics (const end_dynamics_optional& x);

    void
    end_dynamics (::std::unique_ptr< end_dynamics_type > p);

    // attack
    //
    typedef ::musicxml::divisions attack_type;
    typedef ::xsd::cxx::tree::optional< attack_type > attack_optional;
    typedef ::xsd::cxx::tree::traits< attack_type, char > attack_traits;

    const attack_optional&
    attack () const;

    attack_optional&
    attack ();

    void
    attack (const attack_type& x);

    void
    attack (const attack_optional& x);

    void
    attack (::std::unique_ptr< attack_type > p);

    // release
    //
    typedef ::musicxml::divisions release_type;
    typedef ::xsd::cxx::tree::optional< release_type > release_optional;
    typedef ::xsd::cxx::tree::traits< release_type, char > release_traits;

    const release_optional&
    release () const;

    release_optional&
    release ();

    void
    release (const release_type& x);

    void
    release (const release_optional& x);

    void
    release (::std::unique_ptr< release_type > p);

    // time-only
    //
    typedef ::musicxml::time_only time_only_type;
    typedef ::xsd::cxx::tree::optional< time_only_type > time_only_optional;
    typedef ::xsd::cxx::tree::traits< time_only_type, char > time_only_traits;

    const time_only_optional&
    time_only () const;

    time_only_optional&
    time_only ();

    void
    time_only (const time_only_type& x);

    void
    time_only (const time_only_optional& x);

    void
    time_only (::std::unique_ptr< time_only_type > p);

    // pizzicato
    //
    typedef ::musicxml::yes_no pizzicato_type;
    typedef ::xsd::cxx::tree::optional< pizzicato_type > pizzicato_optional;
    typedef ::xsd::cxx::tree::traits< pizzicato_type, char > pizzicato_traits;

    const pizzicato_optional&
    pizzicato () const;

    pizzicato_optional&
    pizzicato ();

    void
    pizzicato (const pizzicato_type& x);

    void
    pizzicato (const pizzicato_optional& x);

    void
    pizzicato (::std::unique_ptr< pizzicato_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    note ();

    note (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    note (const note& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual note*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    note&
    operator= (const note& x);

    virtual 
    ~note ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    grace_optional grace_;
    chord_optional chord_;
    pitch_optional pitch_;
    unpitched_optional unpitched_;
    rest_optional rest_;
    tie_sequence tie_;
    cue_optional cue_;
    duration_optional duration_;
    instrument_sequence instrument_;
    footnote_optional footnote_;
    level_optional level_;
    voice_optional voice_;
    type_optional type_;
    dot_sequence dot_;
    accidental_optional accidental_;
    time_modification_optional time_modification_;
    stem_optional stem_;
    notehead_optional notehead_;
    notehead_text_optional notehead_text_;
    staff_optional staff_;
    beam_sequence beam_;
    notations_sequence notations_;
    lyric_sequence lyric_;
    play_optional play_;
    listen_optional listen_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    print_object_optional print_object_;
    print_dot_optional print_dot_;
    print_spacing_optional print_spacing_;
    print_lyric_optional print_lyric_;
    print_leger_optional print_leger_;
    dynamics_optional dynamics_;
    end_dynamics_optional end_dynamics_;
    attack_optional attack_;
    release_optional release_;
    time_only_optional time_only_;
    pizzicato_optional pizzicato_;
    id_optional id_;
  };

  class note_type: public ::musicxml::note_type_value
  {
    public:
    // size
    //
    typedef ::musicxml::symbol_size size_type;
    typedef ::xsd::cxx::tree::optional< size_type > size_optional;
    typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

    const size_optional&
    size () const;

    size_optional&
    size ();

    void
    size (const size_type& x);

    void
    size (const size_optional& x);

    void
    size (::std::unique_ptr< size_type > p);

    // Constructors.
    //
    note_type (::musicxml::note_type_value::value);

    note_type (const char*);

    note_type (const ::std::string&);

    note_type (const ::musicxml::note_type_value&);

    note_type (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    note_type (const note_type& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual note_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    note_type&
    operator= (const note_type& x);

    virtual 
    ~note_type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    size_optional size_;
  };

  class notehead: public ::musicxml::notehead_value
  {
    public:
    // filled
    //
    typedef ::musicxml::yes_no filled_type;
    typedef ::xsd::cxx::tree::optional< filled_type > filled_optional;
    typedef ::xsd::cxx::tree::traits< filled_type, char > filled_traits;

    const filled_optional&
    filled () const;

    filled_optional&
    filled ();

    void
    filled (const filled_type& x);

    void
    filled (const filled_optional& x);

    void
    filled (::std::unique_ptr< filled_type > p);

    // parentheses
    //
    typedef ::musicxml::yes_no parentheses_type;
    typedef ::xsd::cxx::tree::optional< parentheses_type > parentheses_optional;
    typedef ::xsd::cxx::tree::traits< parentheses_type, char > parentheses_traits;

    const parentheses_optional&
    parentheses () const;

    parentheses_optional&
    parentheses ();

    void
    parentheses (const parentheses_type& x);

    void
    parentheses (const parentheses_optional& x);

    void
    parentheses (::std::unique_ptr< parentheses_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // smufl
    //
    typedef ::musicxml::smufl_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    notehead (::musicxml::notehead_value::value);

    notehead (const char*);

    notehead (const ::std::string&);

    notehead (const ::musicxml::notehead_value&);

    notehead (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    notehead (const notehead& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual notehead*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    notehead&
    operator= (const notehead& x);

    virtual 
    ~notehead ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    filled_optional filled_;
    parentheses_optional parentheses_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    smufl_optional smufl_;
  };

  class notehead_text: public ::xml_schema::type
  {
    public:
    // display-text
    //
    typedef ::musicxml::formatted_text display_text_type;
    typedef ::xsd::cxx::tree::sequence< display_text_type > display_text_sequence;
    typedef display_text_sequence::iterator display_text_iterator;
    typedef display_text_sequence::const_iterator display_text_const_iterator;
    typedef ::xsd::cxx::tree::traits< display_text_type, char > display_text_traits;

    const display_text_sequence&
    display_text () const;

    display_text_sequence&
    display_text ();

    void
    display_text (const display_text_sequence& s);

    // accidental-text
    //
    typedef ::musicxml::accidental_text accidental_text_type;
    typedef ::xsd::cxx::tree::sequence< accidental_text_type > accidental_text_sequence;
    typedef accidental_text_sequence::iterator accidental_text_iterator;
    typedef accidental_text_sequence::const_iterator accidental_text_const_iterator;
    typedef ::xsd::cxx::tree::traits< accidental_text_type, char > accidental_text_traits;

    const accidental_text_sequence&
    accidental_text () const;

    accidental_text_sequence&
    accidental_text ();

    void
    accidental_text (const accidental_text_sequence& s);

    // Constructors.
    //
    notehead_text ();

    notehead_text (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    notehead_text (const notehead_text& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual notehead_text*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    notehead_text&
    operator= (const notehead_text& x);

    virtual 
    ~notehead_text ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    display_text_sequence display_text_;
    accidental_text_sequence accidental_text_;
  };

  class ornaments: public ::xml_schema::type
  {
    public:
    // trill-mark
    //
    typedef ::musicxml::empty_trill_sound trill_mark_type;
    typedef ::xsd::cxx::tree::sequence< trill_mark_type > trill_mark_sequence;
    typedef trill_mark_sequence::iterator trill_mark_iterator;
    typedef trill_mark_sequence::const_iterator trill_mark_const_iterator;
    typedef ::xsd::cxx::tree::traits< trill_mark_type, char > trill_mark_traits;

    const trill_mark_sequence&
    trill_mark () const;

    trill_mark_sequence&
    trill_mark ();

    void
    trill_mark (const trill_mark_sequence& s);

    // turn
    //
    typedef ::musicxml::horizontal_turn turn_type;
    typedef ::xsd::cxx::tree::sequence< turn_type > turn_sequence;
    typedef turn_sequence::iterator turn_iterator;
    typedef turn_sequence::const_iterator turn_const_iterator;
    typedef ::xsd::cxx::tree::traits< turn_type, char > turn_traits;

    const turn_sequence&
    turn () const;

    turn_sequence&
    turn ();

    void
    turn (const turn_sequence& s);

    // delayed-turn
    //
    typedef ::musicxml::horizontal_turn delayed_turn_type;
    typedef ::xsd::cxx::tree::sequence< delayed_turn_type > delayed_turn_sequence;
    typedef delayed_turn_sequence::iterator delayed_turn_iterator;
    typedef delayed_turn_sequence::const_iterator delayed_turn_const_iterator;
    typedef ::xsd::cxx::tree::traits< delayed_turn_type, char > delayed_turn_traits;

    const delayed_turn_sequence&
    delayed_turn () const;

    delayed_turn_sequence&
    delayed_turn ();

    void
    delayed_turn (const delayed_turn_sequence& s);

    // inverted-turn
    //
    typedef ::musicxml::horizontal_turn inverted_turn_type;
    typedef ::xsd::cxx::tree::sequence< inverted_turn_type > inverted_turn_sequence;
    typedef inverted_turn_sequence::iterator inverted_turn_iterator;
    typedef inverted_turn_sequence::const_iterator inverted_turn_const_iterator;
    typedef ::xsd::cxx::tree::traits< inverted_turn_type, char > inverted_turn_traits;

    const inverted_turn_sequence&
    inverted_turn () const;

    inverted_turn_sequence&
    inverted_turn ();

    void
    inverted_turn (const inverted_turn_sequence& s);

    // delayed-inverted-turn
    //
    typedef ::musicxml::horizontal_turn delayed_inverted_turn_type;
    typedef ::xsd::cxx::tree::sequence< delayed_inverted_turn_type > delayed_inverted_turn_sequence;
    typedef delayed_inverted_turn_sequence::iterator delayed_inverted_turn_iterator;
    typedef delayed_inverted_turn_sequence::const_iterator delayed_inverted_turn_const_iterator;
    typedef ::xsd::cxx::tree::traits< delayed_inverted_turn_type, char > delayed_inverted_turn_traits;

    const delayed_inverted_turn_sequence&
    delayed_inverted_turn () const;

    delayed_inverted_turn_sequence&
    delayed_inverted_turn ();

    void
    delayed_inverted_turn (const delayed_inverted_turn_sequence& s);

    // vertical-turn
    //
    typedef ::musicxml::empty_trill_sound vertical_turn_type;
    typedef ::xsd::cxx::tree::sequence< vertical_turn_type > vertical_turn_sequence;
    typedef vertical_turn_sequence::iterator vertical_turn_iterator;
    typedef vertical_turn_sequence::const_iterator vertical_turn_const_iterator;
    typedef ::xsd::cxx::tree::traits< vertical_turn_type, char > vertical_turn_traits;

    const vertical_turn_sequence&
    vertical_turn () const;

    vertical_turn_sequence&
    vertical_turn ();

    void
    vertical_turn (const vertical_turn_sequence& s);

    // inverted-vertical-turn
    //
    typedef ::musicxml::empty_trill_sound inverted_vertical_turn_type;
    typedef ::xsd::cxx::tree::sequence< inverted_vertical_turn_type > inverted_vertical_turn_sequence;
    typedef inverted_vertical_turn_sequence::iterator inverted_vertical_turn_iterator;
    typedef inverted_vertical_turn_sequence::const_iterator inverted_vertical_turn_const_iterator;
    typedef ::xsd::cxx::tree::traits< inverted_vertical_turn_type, char > inverted_vertical_turn_traits;

    const inverted_vertical_turn_sequence&
    inverted_vertical_turn () const;

    inverted_vertical_turn_sequence&
    inverted_vertical_turn ();

    void
    inverted_vertical_turn (const inverted_vertical_turn_sequence& s);

    // shake
    //
    typedef ::musicxml::empty_trill_sound shake_type;
    typedef ::xsd::cxx::tree::sequence< shake_type > shake_sequence;
    typedef shake_sequence::iterator shake_iterator;
    typedef shake_sequence::const_iterator shake_const_iterator;
    typedef ::xsd::cxx::tree::traits< shake_type, char > shake_traits;

    const shake_sequence&
    shake () const;

    shake_sequence&
    shake ();

    void
    shake (const shake_sequence& s);

    // wavy-line
    //
    typedef ::musicxml::wavy_line wavy_line_type;
    typedef ::xsd::cxx::tree::sequence< wavy_line_type > wavy_line_sequence;
    typedef wavy_line_sequence::iterator wavy_line_iterator;
    typedef wavy_line_sequence::const_iterator wavy_line_const_iterator;
    typedef ::xsd::cxx::tree::traits< wavy_line_type, char > wavy_line_traits;

    const wavy_line_sequence&
    wavy_line () const;

    wavy_line_sequence&
    wavy_line ();

    void
    wavy_line (const wavy_line_sequence& s);

    // mordent
    //
    typedef ::musicxml::mordent mordent_type;
    typedef ::xsd::cxx::tree::sequence< mordent_type > mordent_sequence;
    typedef mordent_sequence::iterator mordent_iterator;
    typedef mordent_sequence::const_iterator mordent_const_iterator;
    typedef ::xsd::cxx::tree::traits< mordent_type, char > mordent_traits;

    const mordent_sequence&
    mordent () const;

    mordent_sequence&
    mordent ();

    void
    mordent (const mordent_sequence& s);

    // inverted-mordent
    //
    typedef ::musicxml::mordent inverted_mordent_type;
    typedef ::xsd::cxx::tree::sequence< inverted_mordent_type > inverted_mordent_sequence;
    typedef inverted_mordent_sequence::iterator inverted_mordent_iterator;
    typedef inverted_mordent_sequence::const_iterator inverted_mordent_const_iterator;
    typedef ::xsd::cxx::tree::traits< inverted_mordent_type, char > inverted_mordent_traits;

    const inverted_mordent_sequence&
    inverted_mordent () const;

    inverted_mordent_sequence&
    inverted_mordent ();

    void
    inverted_mordent (const inverted_mordent_sequence& s);

    // schleifer
    //
    typedef ::musicxml::empty_placement schleifer_type;
    typedef ::xsd::cxx::tree::sequence< schleifer_type > schleifer_sequence;
    typedef schleifer_sequence::iterator schleifer_iterator;
    typedef schleifer_sequence::const_iterator schleifer_const_iterator;
    typedef ::xsd::cxx::tree::traits< schleifer_type, char > schleifer_traits;

    const schleifer_sequence&
    schleifer () const;

    schleifer_sequence&
    schleifer ();

    void
    schleifer (const schleifer_sequence& s);

    // tremolo
    //
    typedef ::musicxml::tremolo tremolo_type;
    typedef ::xsd::cxx::tree::sequence< tremolo_type > tremolo_sequence;
    typedef tremolo_sequence::iterator tremolo_iterator;
    typedef tremolo_sequence::const_iterator tremolo_const_iterator;
    typedef ::xsd::cxx::tree::traits< tremolo_type, char > tremolo_traits;

    const tremolo_sequence&
    tremolo () const;

    tremolo_sequence&
    tremolo ();

    void
    tremolo (const tremolo_sequence& s);

    // haydn
    //
    typedef ::musicxml::empty_trill_sound haydn_type;
    typedef ::xsd::cxx::tree::sequence< haydn_type > haydn_sequence;
    typedef haydn_sequence::iterator haydn_iterator;
    typedef haydn_sequence::const_iterator haydn_const_iterator;
    typedef ::xsd::cxx::tree::traits< haydn_type, char > haydn_traits;

    const haydn_sequence&
    haydn () const;

    haydn_sequence&
    haydn ();

    void
    haydn (const haydn_sequence& s);

    // other-ornament
    //
    typedef ::musicxml::other_placement_text other_ornament_type;
    typedef ::xsd::cxx::tree::sequence< other_ornament_type > other_ornament_sequence;
    typedef other_ornament_sequence::iterator other_ornament_iterator;
    typedef other_ornament_sequence::const_iterator other_ornament_const_iterator;
    typedef ::xsd::cxx::tree::traits< other_ornament_type, char > other_ornament_traits;

    const other_ornament_sequence&
    other_ornament () const;

    other_ornament_sequence&
    other_ornament ();

    void
    other_ornament (const other_ornament_sequence& s);

    // accidental-mark
    //
    typedef ::musicxml::accidental_mark accidental_mark_type;
    typedef ::xsd::cxx::tree::sequence< accidental_mark_type > accidental_mark_sequence;
    typedef accidental_mark_sequence::iterator accidental_mark_iterator;
    typedef accidental_mark_sequence::const_iterator accidental_mark_const_iterator;
    typedef ::xsd::cxx::tree::traits< accidental_mark_type, char > accidental_mark_traits;

    const accidental_mark_sequence&
    accidental_mark () const;

    accidental_mark_sequence&
    accidental_mark ();

    void
    accidental_mark (const accidental_mark_sequence& s);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    ornaments ();

    ornaments (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    ornaments (const ornaments& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual ornaments*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ornaments&
    operator= (const ornaments& x);

    virtual 
    ~ornaments ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    trill_mark_sequence trill_mark_;
    turn_sequence turn_;
    delayed_turn_sequence delayed_turn_;
    inverted_turn_sequence inverted_turn_;
    delayed_inverted_turn_sequence delayed_inverted_turn_;
    vertical_turn_sequence vertical_turn_;
    inverted_vertical_turn_sequence inverted_vertical_turn_;
    shake_sequence shake_;
    wavy_line_sequence wavy_line_;
    mordent_sequence mordent_;
    inverted_mordent_sequence inverted_mordent_;
    schleifer_sequence schleifer_;
    tremolo_sequence tremolo_;
    haydn_sequence haydn_;
    other_ornament_sequence other_ornament_;
    accidental_mark_sequence accidental_mark_;
    id_optional id_;
  };

  class other_notation: public ::xml_schema::string
  {
    public:
    // type
    //
    typedef ::musicxml::start_stop_single type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // number
    //
    typedef ::musicxml::number_level number_type;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_type&
    number () const;

    number_type&
    number ();

    void
    number (const number_type& x);

    void
    number (::std::unique_ptr< number_type > p);

    static number_type
    number_default_value ();

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // smufl
    //
    typedef ::musicxml::smufl_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    other_notation (const type_type&);

    other_notation (const char*,
                    const type_type&);

    other_notation (const ::std::string&,
                    const type_type&);

    other_notation (const ::xml_schema::string&,
                    const type_type&);

    other_notation (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    other_notation (const other_notation& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual other_notation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    other_notation&
    operator= (const other_notation& x);

    virtual 
    ~other_notation ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    ::xsd::cxx::tree::one< number_type > number_;
    print_object_optional print_object_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
    smufl_optional smufl_;
    id_optional id_;
  };

  class other_placement_text: public ::xml_schema::string
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // smufl
    //
    typedef ::musicxml::smufl_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    other_placement_text ();

    other_placement_text (const char*);

    other_placement_text (const ::std::string&);

    other_placement_text (const ::xml_schema::string&);

    other_placement_text (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    other_placement_text (const other_placement_text& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual other_placement_text*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    other_placement_text&
    operator= (const other_placement_text& x);

    virtual 
    ~other_placement_text ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
    smufl_optional smufl_;
  };

  class other_text: public ::xml_schema::string
  {
    public:
    // smufl
    //
    typedef ::musicxml::smufl_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    other_text ();

    other_text (const char*);

    other_text (const ::std::string&);

    other_text (const ::xml_schema::string&);

    other_text (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    other_text (const other_text& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual other_text*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    other_text&
    operator= (const other_text& x);

    virtual 
    ~other_text ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    smufl_optional smufl_;
  };

  class pitch: public ::xml_schema::type
  {
    public:
    // step
    //
    typedef ::musicxml::step step_type;
    typedef ::xsd::cxx::tree::traits< step_type, char > step_traits;

    const step_type&
    step () const;

    step_type&
    step ();

    void
    step (const step_type& x);

    void
    step (::std::unique_ptr< step_type > p);

    // alter
    //
    typedef ::musicxml::semitones alter_type;
    typedef ::xsd::cxx::tree::optional< alter_type > alter_optional;
    typedef ::xsd::cxx::tree::traits< alter_type, char > alter_traits;

    const alter_optional&
    alter () const;

    alter_optional&
    alter ();

    void
    alter (const alter_type& x);

    void
    alter (const alter_optional& x);

    void
    alter (::std::unique_ptr< alter_type > p);

    // octave
    //
    typedef ::musicxml::octave octave_type;
    typedef ::xsd::cxx::tree::traits< octave_type, char > octave_traits;

    const octave_type&
    octave () const;

    octave_type&
    octave ();

    void
    octave (const octave_type& x);

    void
    octave (::std::unique_ptr< octave_type > p);

    // Constructors.
    //
    pitch (const step_type&,
           const octave_type&);

    pitch (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    pitch (const pitch& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual pitch*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    pitch&
    operator= (const pitch& x);

    virtual 
    ~pitch ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< step_type > step_;
    alter_optional alter_;
    ::xsd::cxx::tree::one< octave_type > octave_;
  };

  class placement_text: public ::xml_schema::string
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // Constructors.
    //
    placement_text ();

    placement_text (const char*);

    placement_text (const ::std::string&);

    placement_text (const ::xml_schema::string&);

    placement_text (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    placement_text (const placement_text& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual placement_text*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    placement_text&
    operator= (const placement_text& x);

    virtual 
    ~placement_text ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
  };

  class release: public ::musicxml::empty
  {
    public:
    // offset
    //
    typedef ::musicxml::divisions offset_type;
    typedef ::xsd::cxx::tree::optional< offset_type > offset_optional;
    typedef ::xsd::cxx::tree::traits< offset_type, char > offset_traits;

    const offset_optional&
    offset () const;

    offset_optional&
    offset ();

    void
    offset (const offset_type& x);

    void
    offset (const offset_optional& x);

    void
    offset (::std::unique_ptr< offset_type > p);

    // Constructors.
    //
    release ();

    release (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    release (const release& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual release*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    release&
    operator= (const release& x);

    virtual 
    ~release ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    offset_optional offset_;
  };

  class rest: public ::xml_schema::type
  {
    public:
    // display-step
    //
    typedef ::musicxml::step display_step_type;
    typedef ::xsd::cxx::tree::optional< display_step_type > display_step_optional;
    typedef ::xsd::cxx::tree::traits< display_step_type, char > display_step_traits;

    const display_step_optional&
    display_step () const;

    display_step_optional&
    display_step ();

    void
    display_step (const display_step_type& x);

    void
    display_step (const display_step_optional& x);

    void
    display_step (::std::unique_ptr< display_step_type > p);

    // display-octave
    //
    typedef ::musicxml::octave display_octave_type;
    typedef ::xsd::cxx::tree::optional< display_octave_type > display_octave_optional;
    typedef ::xsd::cxx::tree::traits< display_octave_type, char > display_octave_traits;

    const display_octave_optional&
    display_octave () const;

    display_octave_optional&
    display_octave ();

    void
    display_octave (const display_octave_type& x);

    void
    display_octave (const display_octave_optional& x);

    void
    display_octave (::std::unique_ptr< display_octave_type > p);

    // measure
    //
    typedef ::musicxml::yes_no measure_type;
    typedef ::xsd::cxx::tree::optional< measure_type > measure_optional;
    typedef ::xsd::cxx::tree::traits< measure_type, char > measure_traits;

    const measure_optional&
    measure () const;

    measure_optional&
    measure ();

    void
    measure (const measure_type& x);

    void
    measure (const measure_optional& x);

    void
    measure (::std::unique_ptr< measure_type > p);

    // Constructors.
    //
    rest ();

    rest (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    rest (const rest& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual rest*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    rest&
    operator= (const rest& x);

    virtual 
    ~rest ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    display_step_optional display_step_;
    display_octave_optional display_octave_;
    measure_optional measure_;
  };

  class slide: public ::xml_schema::string
  {
    public:
    // type
    //
    typedef ::musicxml::start_stop type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // number
    //
    typedef ::musicxml::number_level number_type;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_type&
    number () const;

    number_type&
    number ();

    void
    number (const number_type& x);

    void
    number (::std::unique_ptr< number_type > p);

    static number_type
    number_default_value ();

    // line-type
    //
    typedef ::musicxml::line_type line_type_type;
    typedef ::xsd::cxx::tree::optional< line_type_type > line_type_optional;
    typedef ::xsd::cxx::tree::traits< line_type_type, char > line_type_traits;

    const line_type_optional&
    line_type () const;

    line_type_optional&
    line_type ();

    void
    line_type (const line_type_type& x);

    void
    line_type (const line_type_optional& x);

    void
    line_type (::std::unique_ptr< line_type_type > p);

    // dash-length
    //
    typedef ::musicxml::tenths dash_length_type;
    typedef ::xsd::cxx::tree::optional< dash_length_type > dash_length_optional;
    typedef ::xsd::cxx::tree::traits< dash_length_type, char > dash_length_traits;

    const dash_length_optional&
    dash_length () const;

    dash_length_optional&
    dash_length ();

    void
    dash_length (const dash_length_type& x);

    void
    dash_length (const dash_length_optional& x);

    void
    dash_length (::std::unique_ptr< dash_length_type > p);

    // space-length
    //
    typedef ::musicxml::tenths space_length_type;
    typedef ::xsd::cxx::tree::optional< space_length_type > space_length_optional;
    typedef ::xsd::cxx::tree::traits< space_length_type, char > space_length_traits;

    const space_length_optional&
    space_length () const;

    space_length_optional&
    space_length ();

    void
    space_length (const space_length_type& x);

    void
    space_length (const space_length_optional& x);

    void
    space_length (::std::unique_ptr< space_length_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // accelerate
    //
    typedef ::musicxml::yes_no accelerate_type;
    typedef ::xsd::cxx::tree::optional< accelerate_type > accelerate_optional;
    typedef ::xsd::cxx::tree::traits< accelerate_type, char > accelerate_traits;

    const accelerate_optional&
    accelerate () const;

    accelerate_optional&
    accelerate ();

    void
    accelerate (const accelerate_type& x);

    void
    accelerate (const accelerate_optional& x);

    void
    accelerate (::std::unique_ptr< accelerate_type > p);

    // beats
    //
    typedef ::musicxml::trill_beats beats_type;
    typedef ::xsd::cxx::tree::optional< beats_type > beats_optional;
    typedef ::xsd::cxx::tree::traits< beats_type, char > beats_traits;

    const beats_optional&
    beats () const;

    beats_optional&
    beats ();

    void
    beats (const beats_type& x);

    void
    beats (const beats_optional& x);

    void
    beats (::std::unique_ptr< beats_type > p);

    // first-beat
    //
    typedef ::musicxml::percent first_beat_type;
    typedef ::xsd::cxx::tree::optional< first_beat_type > first_beat_optional;
    typedef ::xsd::cxx::tree::traits< first_beat_type, char > first_beat_traits;

    const first_beat_optional&
    first_beat () const;

    first_beat_optional&
    first_beat ();

    void
    first_beat (const first_beat_type& x);

    void
    first_beat (const first_beat_optional& x);

    void
    first_beat (::std::unique_ptr< first_beat_type > p);

    // last-beat
    //
    typedef ::musicxml::percent last_beat_type;
    typedef ::xsd::cxx::tree::optional< last_beat_type > last_beat_optional;
    typedef ::xsd::cxx::tree::traits< last_beat_type, char > last_beat_traits;

    const last_beat_optional&
    last_beat () const;

    last_beat_optional&
    last_beat ();

    void
    last_beat (const last_beat_type& x);

    void
    last_beat (const last_beat_optional& x);

    void
    last_beat (::std::unique_ptr< last_beat_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    slide (const type_type&);

    slide (const char*,
           const type_type&);

    slide (const ::std::string&,
           const type_type&);

    slide (const ::xml_schema::string&,
           const type_type&);

    slide (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    slide (const slide& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual slide*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    slide&
    operator= (const slide& x);

    virtual 
    ~slide ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    ::xsd::cxx::tree::one< number_type > number_;
    line_type_optional line_type_;
    dash_length_optional dash_length_;
    space_length_optional space_length_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    accelerate_optional accelerate_;
    beats_optional beats_;
    first_beat_optional first_beat_;
    last_beat_optional last_beat_;
    id_optional id_;
  };

  class slur: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::start_stop_continue type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // number
    //
    typedef ::musicxml::number_level number_type;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_type&
    number () const;

    number_type&
    number ();

    void
    number (const number_type& x);

    void
    number (::std::unique_ptr< number_type > p);

    static number_type
    number_default_value ();

    // line-type
    //
    typedef ::musicxml::line_type line_type_type;
    typedef ::xsd::cxx::tree::optional< line_type_type > line_type_optional;
    typedef ::xsd::cxx::tree::traits< line_type_type, char > line_type_traits;

    const line_type_optional&
    line_type () const;

    line_type_optional&
    line_type ();

    void
    line_type (const line_type_type& x);

    void
    line_type (const line_type_optional& x);

    void
    line_type (::std::unique_ptr< line_type_type > p);

    // dash-length
    //
    typedef ::musicxml::tenths dash_length_type;
    typedef ::xsd::cxx::tree::optional< dash_length_type > dash_length_optional;
    typedef ::xsd::cxx::tree::traits< dash_length_type, char > dash_length_traits;

    const dash_length_optional&
    dash_length () const;

    dash_length_optional&
    dash_length ();

    void
    dash_length (const dash_length_type& x);

    void
    dash_length (const dash_length_optional& x);

    void
    dash_length (::std::unique_ptr< dash_length_type > p);

    // space-length
    //
    typedef ::musicxml::tenths space_length_type;
    typedef ::xsd::cxx::tree::optional< space_length_type > space_length_optional;
    typedef ::xsd::cxx::tree::traits< space_length_type, char > space_length_traits;

    const space_length_optional&
    space_length () const;

    space_length_optional&
    space_length ();

    void
    space_length (const space_length_type& x);

    void
    space_length (const space_length_optional& x);

    void
    space_length (::std::unique_ptr< space_length_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // orientation
    //
    typedef ::musicxml::over_under orientation_type;
    typedef ::xsd::cxx::tree::optional< orientation_type > orientation_optional;
    typedef ::xsd::cxx::tree::traits< orientation_type, char > orientation_traits;

    const orientation_optional&
    orientation () const;

    orientation_optional&
    orientation ();

    void
    orientation (const orientation_type& x);

    void
    orientation (const orientation_optional& x);

    void
    orientation (::std::unique_ptr< orientation_type > p);

    // bezier-x
    //
    typedef ::musicxml::tenths bezier_x_type;
    typedef ::xsd::cxx::tree::optional< bezier_x_type > bezier_x_optional;
    typedef ::xsd::cxx::tree::traits< bezier_x_type, char > bezier_x_traits;

    const bezier_x_optional&
    bezier_x () const;

    bezier_x_optional&
    bezier_x ();

    void
    bezier_x (const bezier_x_type& x);

    void
    bezier_x (const bezier_x_optional& x);

    void
    bezier_x (::std::unique_ptr< bezier_x_type > p);

    // bezier-y
    //
    typedef ::musicxml::tenths bezier_y_type;
    typedef ::xsd::cxx::tree::optional< bezier_y_type > bezier_y_optional;
    typedef ::xsd::cxx::tree::traits< bezier_y_type, char > bezier_y_traits;

    const bezier_y_optional&
    bezier_y () const;

    bezier_y_optional&
    bezier_y ();

    void
    bezier_y (const bezier_y_type& x);

    void
    bezier_y (const bezier_y_optional& x);

    void
    bezier_y (::std::unique_ptr< bezier_y_type > p);

    // bezier-x2
    //
    typedef ::musicxml::tenths bezier_x2_type;
    typedef ::xsd::cxx::tree::optional< bezier_x2_type > bezier_x2_optional;
    typedef ::xsd::cxx::tree::traits< bezier_x2_type, char > bezier_x2_traits;

    const bezier_x2_optional&
    bezier_x2 () const;

    bezier_x2_optional&
    bezier_x2 ();

    void
    bezier_x2 (const bezier_x2_type& x);

    void
    bezier_x2 (const bezier_x2_optional& x);

    void
    bezier_x2 (::std::unique_ptr< bezier_x2_type > p);

    // bezier-y2
    //
    typedef ::musicxml::tenths bezier_y2_type;
    typedef ::xsd::cxx::tree::optional< bezier_y2_type > bezier_y2_optional;
    typedef ::xsd::cxx::tree::traits< bezier_y2_type, char > bezier_y2_traits;

    const bezier_y2_optional&
    bezier_y2 () const;

    bezier_y2_optional&
    bezier_y2 ();

    void
    bezier_y2 (const bezier_y2_type& x);

    void
    bezier_y2 (const bezier_y2_optional& x);

    void
    bezier_y2 (::std::unique_ptr< bezier_y2_type > p);

    // bezier-offset
    //
    typedef ::musicxml::divisions bezier_offset_type;
    typedef ::xsd::cxx::tree::optional< bezier_offset_type > bezier_offset_optional;
    typedef ::xsd::cxx::tree::traits< bezier_offset_type, char > bezier_offset_traits;

    const bezier_offset_optional&
    bezier_offset () const;

    bezier_offset_optional&
    bezier_offset ();

    void
    bezier_offset (const bezier_offset_type& x);

    void
    bezier_offset (const bezier_offset_optional& x);

    void
    bezier_offset (::std::unique_ptr< bezier_offset_type > p);

    // bezier-offset2
    //
    typedef ::musicxml::divisions bezier_offset2_type;
    typedef ::xsd::cxx::tree::optional< bezier_offset2_type > bezier_offset2_optional;
    typedef ::xsd::cxx::tree::traits< bezier_offset2_type, char > bezier_offset2_traits;

    const bezier_offset2_optional&
    bezier_offset2 () const;

    bezier_offset2_optional&
    bezier_offset2 ();

    void
    bezier_offset2 (const bezier_offset2_type& x);

    void
    bezier_offset2 (const bezier_offset2_optional& x);

    void
    bezier_offset2 (::std::unique_ptr< bezier_offset2_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    slur (const type_type&);

    slur (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    slur (const slur& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual slur*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    slur&
    operator= (const slur& x);

    virtual 
    ~slur ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    ::xsd::cxx::tree::one< number_type > number_;
    line_type_optional line_type_;
    dash_length_optional dash_length_;
    space_length_optional space_length_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    placement_optional placement_;
    orientation_optional orientation_;
    bezier_x_optional bezier_x_;
    bezier_y_optional bezier_y_;
    bezier_x2_optional bezier_x2_;
    bezier_y2_optional bezier_y2_;
    bezier_offset_optional bezier_offset_;
    bezier_offset2_optional bezier_offset2_;
    color_optional color_;
    id_optional id_;
  };

  class stem: public ::musicxml::stem_value
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    stem (::musicxml::stem_value::value);

    stem (const char*);

    stem (const ::std::string&);

    stem (const ::musicxml::stem_value&);

    stem (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    stem (const stem& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual stem*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    stem&
    operator= (const stem& x);

    virtual 
    ~stem ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    color_optional color_;
  };

  class strong_accent: public ::musicxml::empty_placement
  {
    public:
    // type
    //
    typedef ::musicxml::up_down type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    static const type_type&
    type_default_value ();

    // Constructors.
    //
    strong_accent ();

    strong_accent (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    strong_accent (const strong_accent& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual strong_accent*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    strong_accent&
    operator= (const strong_accent& x);

    virtual 
    ~strong_accent ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    static const type_type type_default_value_;
  };

  class style_text: public ::xml_schema::string
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    style_text ();

    style_text (const char*);

    style_text (const ::std::string&);

    style_text (const ::xml_schema::string&);

    style_text (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    style_text (const style_text& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual style_text*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    style_text&
    operator= (const style_text& x);

    virtual 
    ~style_text ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
  };

  class tap: public ::xml_schema::string
  {
    public:
    // hand
    //
    typedef ::musicxml::tap_hand hand_type;
    typedef ::xsd::cxx::tree::optional< hand_type > hand_optional;
    typedef ::xsd::cxx::tree::traits< hand_type, char > hand_traits;

    const hand_optional&
    hand () const;

    hand_optional&
    hand ();

    void
    hand (const hand_type& x);

    void
    hand (const hand_optional& x);

    void
    hand (::std::unique_ptr< hand_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // Constructors.
    //
    tap ();

    tap (const char*);

    tap (const ::std::string&);

    tap (const ::xml_schema::string&);

    tap (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    tap (const tap& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual tap*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tap&
    operator= (const tap& x);

    virtual 
    ~tap ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    hand_optional hand_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
  };

  class technical: public ::xml_schema::type
  {
    public:
    // up-bow
    //
    typedef ::musicxml::empty_placement up_bow_type;
    typedef ::xsd::cxx::tree::sequence< up_bow_type > up_bow_sequence;
    typedef up_bow_sequence::iterator up_bow_iterator;
    typedef up_bow_sequence::const_iterator up_bow_const_iterator;
    typedef ::xsd::cxx::tree::traits< up_bow_type, char > up_bow_traits;

    const up_bow_sequence&
    up_bow () const;

    up_bow_sequence&
    up_bow ();

    void
    up_bow (const up_bow_sequence& s);

    // down-bow
    //
    typedef ::musicxml::empty_placement down_bow_type;
    typedef ::xsd::cxx::tree::sequence< down_bow_type > down_bow_sequence;
    typedef down_bow_sequence::iterator down_bow_iterator;
    typedef down_bow_sequence::const_iterator down_bow_const_iterator;
    typedef ::xsd::cxx::tree::traits< down_bow_type, char > down_bow_traits;

    const down_bow_sequence&
    down_bow () const;

    down_bow_sequence&
    down_bow ();

    void
    down_bow (const down_bow_sequence& s);

    // harmonic
    //
    typedef ::musicxml::harmonic harmonic_type;
    typedef ::xsd::cxx::tree::sequence< harmonic_type > harmonic_sequence;
    typedef harmonic_sequence::iterator harmonic_iterator;
    typedef harmonic_sequence::const_iterator harmonic_const_iterator;
    typedef ::xsd::cxx::tree::traits< harmonic_type, char > harmonic_traits;

    const harmonic_sequence&
    harmonic () const;

    harmonic_sequence&
    harmonic ();

    void
    harmonic (const harmonic_sequence& s);

    // open-string
    //
    typedef ::musicxml::empty_placement open_string_type;
    typedef ::xsd::cxx::tree::sequence< open_string_type > open_string_sequence;
    typedef open_string_sequence::iterator open_string_iterator;
    typedef open_string_sequence::const_iterator open_string_const_iterator;
    typedef ::xsd::cxx::tree::traits< open_string_type, char > open_string_traits;

    const open_string_sequence&
    open_string () const;

    open_string_sequence&
    open_string ();

    void
    open_string (const open_string_sequence& s);

    // thumb-position
    //
    typedef ::musicxml::empty_placement thumb_position_type;
    typedef ::xsd::cxx::tree::sequence< thumb_position_type > thumb_position_sequence;
    typedef thumb_position_sequence::iterator thumb_position_iterator;
    typedef thumb_position_sequence::const_iterator thumb_position_const_iterator;
    typedef ::xsd::cxx::tree::traits< thumb_position_type, char > thumb_position_traits;

    const thumb_position_sequence&
    thumb_position () const;

    thumb_position_sequence&
    thumb_position ();

    void
    thumb_position (const thumb_position_sequence& s);

    // fingering
    //
    typedef ::musicxml::fingering fingering_type;
    typedef ::xsd::cxx::tree::sequence< fingering_type > fingering_sequence;
    typedef fingering_sequence::iterator fingering_iterator;
    typedef fingering_sequence::const_iterator fingering_const_iterator;
    typedef ::xsd::cxx::tree::traits< fingering_type, char > fingering_traits;

    const fingering_sequence&
    fingering () const;

    fingering_sequence&
    fingering ();

    void
    fingering (const fingering_sequence& s);

    // pluck
    //
    typedef ::musicxml::placement_text pluck_type;
    typedef ::xsd::cxx::tree::sequence< pluck_type > pluck_sequence;
    typedef pluck_sequence::iterator pluck_iterator;
    typedef pluck_sequence::const_iterator pluck_const_iterator;
    typedef ::xsd::cxx::tree::traits< pluck_type, char > pluck_traits;

    const pluck_sequence&
    pluck () const;

    pluck_sequence&
    pluck ();

    void
    pluck (const pluck_sequence& s);

    // double-tongue
    //
    typedef ::musicxml::empty_placement double_tongue_type;
    typedef ::xsd::cxx::tree::sequence< double_tongue_type > double_tongue_sequence;
    typedef double_tongue_sequence::iterator double_tongue_iterator;
    typedef double_tongue_sequence::const_iterator double_tongue_const_iterator;
    typedef ::xsd::cxx::tree::traits< double_tongue_type, char > double_tongue_traits;

    const double_tongue_sequence&
    double_tongue () const;

    double_tongue_sequence&
    double_tongue ();

    void
    double_tongue (const double_tongue_sequence& s);

    // triple-tongue
    //
    typedef ::musicxml::empty_placement triple_tongue_type;
    typedef ::xsd::cxx::tree::sequence< triple_tongue_type > triple_tongue_sequence;
    typedef triple_tongue_sequence::iterator triple_tongue_iterator;
    typedef triple_tongue_sequence::const_iterator triple_tongue_const_iterator;
    typedef ::xsd::cxx::tree::traits< triple_tongue_type, char > triple_tongue_traits;

    const triple_tongue_sequence&
    triple_tongue () const;

    triple_tongue_sequence&
    triple_tongue ();

    void
    triple_tongue (const triple_tongue_sequence& s);

    // stopped
    //
    typedef ::musicxml::empty_placement_smufl stopped_type;
    typedef ::xsd::cxx::tree::sequence< stopped_type > stopped_sequence;
    typedef stopped_sequence::iterator stopped_iterator;
    typedef stopped_sequence::const_iterator stopped_const_iterator;
    typedef ::xsd::cxx::tree::traits< stopped_type, char > stopped_traits;

    const stopped_sequence&
    stopped () const;

    stopped_sequence&
    stopped ();

    void
    stopped (const stopped_sequence& s);

    // snap-pizzicato
    //
    typedef ::musicxml::empty_placement snap_pizzicato_type;
    typedef ::xsd::cxx::tree::sequence< snap_pizzicato_type > snap_pizzicato_sequence;
    typedef snap_pizzicato_sequence::iterator snap_pizzicato_iterator;
    typedef snap_pizzicato_sequence::const_iterator snap_pizzicato_const_iterator;
    typedef ::xsd::cxx::tree::traits< snap_pizzicato_type, char > snap_pizzicato_traits;

    const snap_pizzicato_sequence&
    snap_pizzicato () const;

    snap_pizzicato_sequence&
    snap_pizzicato ();

    void
    snap_pizzicato (const snap_pizzicato_sequence& s);

    // fret
    //
    typedef ::musicxml::fret fret_type;
    typedef ::xsd::cxx::tree::sequence< fret_type > fret_sequence;
    typedef fret_sequence::iterator fret_iterator;
    typedef fret_sequence::const_iterator fret_const_iterator;
    typedef ::xsd::cxx::tree::traits< fret_type, char > fret_traits;

    const fret_sequence&
    fret () const;

    fret_sequence&
    fret ();

    void
    fret (const fret_sequence& s);

    // string
    //
    typedef ::musicxml::string string_type;
    typedef ::xsd::cxx::tree::sequence< string_type > string_sequence;
    typedef string_sequence::iterator string_iterator;
    typedef string_sequence::const_iterator string_const_iterator;
    typedef ::xsd::cxx::tree::traits< string_type, char > string_traits;

    const string_sequence&
    string () const;

    string_sequence&
    string ();

    void
    string (const string_sequence& s);

    // hammer-on
    //
    typedef ::musicxml::hammer_on_pull_off hammer_on_type;
    typedef ::xsd::cxx::tree::sequence< hammer_on_type > hammer_on_sequence;
    typedef hammer_on_sequence::iterator hammer_on_iterator;
    typedef hammer_on_sequence::const_iterator hammer_on_const_iterator;
    typedef ::xsd::cxx::tree::traits< hammer_on_type, char > hammer_on_traits;

    const hammer_on_sequence&
    hammer_on () const;

    hammer_on_sequence&
    hammer_on ();

    void
    hammer_on (const hammer_on_sequence& s);

    // pull-off
    //
    typedef ::musicxml::hammer_on_pull_off pull_off_type;
    typedef ::xsd::cxx::tree::sequence< pull_off_type > pull_off_sequence;
    typedef pull_off_sequence::iterator pull_off_iterator;
    typedef pull_off_sequence::const_iterator pull_off_const_iterator;
    typedef ::xsd::cxx::tree::traits< pull_off_type, char > pull_off_traits;

    const pull_off_sequence&
    pull_off () const;

    pull_off_sequence&
    pull_off ();

    void
    pull_off (const pull_off_sequence& s);

    // bend
    //
    typedef ::musicxml::bend bend_type;
    typedef ::xsd::cxx::tree::sequence< bend_type > bend_sequence;
    typedef bend_sequence::iterator bend_iterator;
    typedef bend_sequence::const_iterator bend_const_iterator;
    typedef ::xsd::cxx::tree::traits< bend_type, char > bend_traits;

    const bend_sequence&
    bend () const;

    bend_sequence&
    bend ();

    void
    bend (const bend_sequence& s);

    // tap
    //
    typedef ::musicxml::tap tap_type;
    typedef ::xsd::cxx::tree::sequence< tap_type > tap_sequence;
    typedef tap_sequence::iterator tap_iterator;
    typedef tap_sequence::const_iterator tap_const_iterator;
    typedef ::xsd::cxx::tree::traits< tap_type, char > tap_traits;

    const tap_sequence&
    tap () const;

    tap_sequence&
    tap ();

    void
    tap (const tap_sequence& s);

    // heel
    //
    typedef ::musicxml::heel_toe heel_type;
    typedef ::xsd::cxx::tree::sequence< heel_type > heel_sequence;
    typedef heel_sequence::iterator heel_iterator;
    typedef heel_sequence::const_iterator heel_const_iterator;
    typedef ::xsd::cxx::tree::traits< heel_type, char > heel_traits;

    const heel_sequence&
    heel () const;

    heel_sequence&
    heel ();

    void
    heel (const heel_sequence& s);

    // toe
    //
    typedef ::musicxml::heel_toe toe_type;
    typedef ::xsd::cxx::tree::sequence< toe_type > toe_sequence;
    typedef toe_sequence::iterator toe_iterator;
    typedef toe_sequence::const_iterator toe_const_iterator;
    typedef ::xsd::cxx::tree::traits< toe_type, char > toe_traits;

    const toe_sequence&
    toe () const;

    toe_sequence&
    toe ();

    void
    toe (const toe_sequence& s);

    // fingernails
    //
    typedef ::musicxml::empty_placement fingernails_type;
    typedef ::xsd::cxx::tree::sequence< fingernails_type > fingernails_sequence;
    typedef fingernails_sequence::iterator fingernails_iterator;
    typedef fingernails_sequence::const_iterator fingernails_const_iterator;
    typedef ::xsd::cxx::tree::traits< fingernails_type, char > fingernails_traits;

    const fingernails_sequence&
    fingernails () const;

    fingernails_sequence&
    fingernails ();

    void
    fingernails (const fingernails_sequence& s);

    // hole
    //
    typedef ::musicxml::hole hole_type;
    typedef ::xsd::cxx::tree::sequence< hole_type > hole_sequence;
    typedef hole_sequence::iterator hole_iterator;
    typedef hole_sequence::const_iterator hole_const_iterator;
    typedef ::xsd::cxx::tree::traits< hole_type, char > hole_traits;

    const hole_sequence&
    hole () const;

    hole_sequence&
    hole ();

    void
    hole (const hole_sequence& s);

    // arrow
    //
    typedef ::musicxml::arrow arrow_type;
    typedef ::xsd::cxx::tree::sequence< arrow_type > arrow_sequence;
    typedef arrow_sequence::iterator arrow_iterator;
    typedef arrow_sequence::const_iterator arrow_const_iterator;
    typedef ::xsd::cxx::tree::traits< arrow_type, char > arrow_traits;

    const arrow_sequence&
    arrow () const;

    arrow_sequence&
    arrow ();

    void
    arrow (const arrow_sequence& s);

    // handbell
    //
    typedef ::musicxml::handbell handbell_type;
    typedef ::xsd::cxx::tree::sequence< handbell_type > handbell_sequence;
    typedef handbell_sequence::iterator handbell_iterator;
    typedef handbell_sequence::const_iterator handbell_const_iterator;
    typedef ::xsd::cxx::tree::traits< handbell_type, char > handbell_traits;

    const handbell_sequence&
    handbell () const;

    handbell_sequence&
    handbell ();

    void
    handbell (const handbell_sequence& s);

    // brass-bend
    //
    typedef ::musicxml::empty_placement brass_bend_type;
    typedef ::xsd::cxx::tree::sequence< brass_bend_type > brass_bend_sequence;
    typedef brass_bend_sequence::iterator brass_bend_iterator;
    typedef brass_bend_sequence::const_iterator brass_bend_const_iterator;
    typedef ::xsd::cxx::tree::traits< brass_bend_type, char > brass_bend_traits;

    const brass_bend_sequence&
    brass_bend () const;

    brass_bend_sequence&
    brass_bend ();

    void
    brass_bend (const brass_bend_sequence& s);

    // flip
    //
    typedef ::musicxml::empty_placement flip_type;
    typedef ::xsd::cxx::tree::sequence< flip_type > flip_sequence;
    typedef flip_sequence::iterator flip_iterator;
    typedef flip_sequence::const_iterator flip_const_iterator;
    typedef ::xsd::cxx::tree::traits< flip_type, char > flip_traits;

    const flip_sequence&
    flip () const;

    flip_sequence&
    flip ();

    void
    flip (const flip_sequence& s);

    // smear
    //
    typedef ::musicxml::empty_placement smear_type;
    typedef ::xsd::cxx::tree::sequence< smear_type > smear_sequence;
    typedef smear_sequence::iterator smear_iterator;
    typedef smear_sequence::const_iterator smear_const_iterator;
    typedef ::xsd::cxx::tree::traits< smear_type, char > smear_traits;

    const smear_sequence&
    smear () const;

    smear_sequence&
    smear ();

    void
    smear (const smear_sequence& s);

    // open
    //
    typedef ::musicxml::empty_placement_smufl open_type;
    typedef ::xsd::cxx::tree::sequence< open_type > open_sequence;
    typedef open_sequence::iterator open_iterator;
    typedef open_sequence::const_iterator open_const_iterator;
    typedef ::xsd::cxx::tree::traits< open_type, char > open_traits;

    const open_sequence&
    open () const;

    open_sequence&
    open ();

    void
    open (const open_sequence& s);

    // half-muted
    //
    typedef ::musicxml::empty_placement_smufl half_muted_type;
    typedef ::xsd::cxx::tree::sequence< half_muted_type > half_muted_sequence;
    typedef half_muted_sequence::iterator half_muted_iterator;
    typedef half_muted_sequence::const_iterator half_muted_const_iterator;
    typedef ::xsd::cxx::tree::traits< half_muted_type, char > half_muted_traits;

    const half_muted_sequence&
    half_muted () const;

    half_muted_sequence&
    half_muted ();

    void
    half_muted (const half_muted_sequence& s);

    // harmon-mute
    //
    typedef ::musicxml::harmon_mute harmon_mute_type;
    typedef ::xsd::cxx::tree::sequence< harmon_mute_type > harmon_mute_sequence;
    typedef harmon_mute_sequence::iterator harmon_mute_iterator;
    typedef harmon_mute_sequence::const_iterator harmon_mute_const_iterator;
    typedef ::xsd::cxx::tree::traits< harmon_mute_type, char > harmon_mute_traits;

    const harmon_mute_sequence&
    harmon_mute () const;

    harmon_mute_sequence&
    harmon_mute ();

    void
    harmon_mute (const harmon_mute_sequence& s);

    // golpe
    //
    typedef ::musicxml::empty_placement golpe_type;
    typedef ::xsd::cxx::tree::sequence< golpe_type > golpe_sequence;
    typedef golpe_sequence::iterator golpe_iterator;
    typedef golpe_sequence::const_iterator golpe_const_iterator;
    typedef ::xsd::cxx::tree::traits< golpe_type, char > golpe_traits;

    const golpe_sequence&
    golpe () const;

    golpe_sequence&
    golpe ();

    void
    golpe (const golpe_sequence& s);

    // other-technical
    //
    typedef ::musicxml::other_placement_text other_technical_type;
    typedef ::xsd::cxx::tree::sequence< other_technical_type > other_technical_sequence;
    typedef other_technical_sequence::iterator other_technical_iterator;
    typedef other_technical_sequence::const_iterator other_technical_const_iterator;
    typedef ::xsd::cxx::tree::traits< other_technical_type, char > other_technical_traits;

    const other_technical_sequence&
    other_technical () const;

    other_technical_sequence&
    other_technical ();

    void
    other_technical (const other_technical_sequence& s);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    technical ();

    technical (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    technical (const technical& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual technical*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    technical&
    operator= (const technical& x);

    virtual 
    ~technical ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    up_bow_sequence up_bow_;
    down_bow_sequence down_bow_;
    harmonic_sequence harmonic_;
    open_string_sequence open_string_;
    thumb_position_sequence thumb_position_;
    fingering_sequence fingering_;
    pluck_sequence pluck_;
    double_tongue_sequence double_tongue_;
    triple_tongue_sequence triple_tongue_;
    stopped_sequence stopped_;
    snap_pizzicato_sequence snap_pizzicato_;
    fret_sequence fret_;
    string_sequence string_;
    hammer_on_sequence hammer_on_;
    pull_off_sequence pull_off_;
    bend_sequence bend_;
    tap_sequence tap_;
    heel_sequence heel_;
    toe_sequence toe_;
    fingernails_sequence fingernails_;
    hole_sequence hole_;
    arrow_sequence arrow_;
    handbell_sequence handbell_;
    brass_bend_sequence brass_bend_;
    flip_sequence flip_;
    smear_sequence smear_;
    open_sequence open_;
    half_muted_sequence half_muted_;
    harmon_mute_sequence harmon_mute_;
    golpe_sequence golpe_;
    other_technical_sequence other_technical_;
    id_optional id_;
  };

  class text_element_data: public ::xml_schema::string
  {
    public:
    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // underline
    //
    typedef ::musicxml::number_of_lines underline_type;
    typedef ::xsd::cxx::tree::optional< underline_type > underline_optional;
    typedef ::xsd::cxx::tree::traits< underline_type, char > underline_traits;

    const underline_optional&
    underline () const;

    underline_optional&
    underline ();

    void
    underline (const underline_type& x);

    void
    underline (const underline_optional& x);

    void
    underline (::std::unique_ptr< underline_type > p);

    // overline
    //
    typedef ::musicxml::number_of_lines overline_type;
    typedef ::xsd::cxx::tree::optional< overline_type > overline_optional;
    typedef ::xsd::cxx::tree::traits< overline_type, char > overline_traits;

    const overline_optional&
    overline () const;

    overline_optional&
    overline ();

    void
    overline (const overline_type& x);

    void
    overline (const overline_optional& x);

    void
    overline (::std::unique_ptr< overline_type > p);

    // line-through
    //
    typedef ::musicxml::number_of_lines line_through_type;
    typedef ::xsd::cxx::tree::optional< line_through_type > line_through_optional;
    typedef ::xsd::cxx::tree::traits< line_through_type, char > line_through_traits;

    const line_through_optional&
    line_through () const;

    line_through_optional&
    line_through ();

    void
    line_through (const line_through_type& x);

    void
    line_through (const line_through_optional& x);

    void
    line_through (::std::unique_ptr< line_through_type > p);

    // rotation
    //
    typedef ::musicxml::rotation_degrees rotation_type;
    typedef ::xsd::cxx::tree::optional< rotation_type > rotation_optional;
    typedef ::xsd::cxx::tree::traits< rotation_type, char > rotation_traits;

    const rotation_optional&
    rotation () const;

    rotation_optional&
    rotation ();

    void
    rotation (const rotation_type& x);

    void
    rotation (const rotation_optional& x);

    void
    rotation (::std::unique_ptr< rotation_type > p);

    // letter-spacing
    //
    typedef ::musicxml::number_or_normal letter_spacing_type;
    typedef ::xsd::cxx::tree::optional< letter_spacing_type > letter_spacing_optional;
    typedef ::xsd::cxx::tree::traits< letter_spacing_type, char > letter_spacing_traits;

    const letter_spacing_optional&
    letter_spacing () const;

    letter_spacing_optional&
    letter_spacing ();

    void
    letter_spacing (const letter_spacing_type& x);

    void
    letter_spacing (const letter_spacing_optional& x);

    void
    letter_spacing (::std::unique_ptr< letter_spacing_type > p);

    // lang
    //
    typedef ::namespace_::lang lang_type;
    typedef ::xsd::cxx::tree::optional< lang_type > lang_optional;
    typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

    const lang_optional&
    lang () const;

    lang_optional&
    lang ();

    void
    lang (const lang_type& x);

    void
    lang (const lang_optional& x);

    void
    lang (::std::unique_ptr< lang_type > p);

    // dir
    //
    typedef ::musicxml::text_direction dir_type;
    typedef ::xsd::cxx::tree::optional< dir_type > dir_optional;
    typedef ::xsd::cxx::tree::traits< dir_type, char > dir_traits;

    const dir_optional&
    dir () const;

    dir_optional&
    dir ();

    void
    dir (const dir_type& x);

    void
    dir (const dir_optional& x);

    void
    dir (::std::unique_ptr< dir_type > p);

    // Constructors.
    //
    text_element_data ();

    text_element_data (const char*);

    text_element_data (const ::std::string&);

    text_element_data (const ::xml_schema::string&);

    text_element_data (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    text_element_data (const text_element_data& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual text_element_data*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    text_element_data&
    operator= (const text_element_data& x);

    virtual 
    ~text_element_data ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    underline_optional underline_;
    overline_optional overline_;
    line_through_optional line_through_;
    rotation_optional rotation_;
    letter_spacing_optional letter_spacing_;
    lang_optional lang_;
    dir_optional dir_;
  };

  class tie: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::start_stop type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // time-only
    //
    typedef ::musicxml::time_only time_only_type;
    typedef ::xsd::cxx::tree::optional< time_only_type > time_only_optional;
    typedef ::xsd::cxx::tree::traits< time_only_type, char > time_only_traits;

    const time_only_optional&
    time_only () const;

    time_only_optional&
    time_only ();

    void
    time_only (const time_only_type& x);

    void
    time_only (const time_only_optional& x);

    void
    time_only (::std::unique_ptr< time_only_type > p);

    // Constructors.
    //
    tie (const type_type&);

    tie (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    tie (const tie& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual tie*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tie&
    operator= (const tie& x);

    virtual 
    ~tie ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    time_only_optional time_only_;
  };

  class tied: public ::xml_schema::type
  {
    public:
    // type
    //
    typedef ::musicxml::tied_type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // number
    //
    typedef ::musicxml::number_level number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // line-type
    //
    typedef ::musicxml::line_type line_type_type;
    typedef ::xsd::cxx::tree::optional< line_type_type > line_type_optional;
    typedef ::xsd::cxx::tree::traits< line_type_type, char > line_type_traits;

    const line_type_optional&
    line_type () const;

    line_type_optional&
    line_type ();

    void
    line_type (const line_type_type& x);

    void
    line_type (const line_type_optional& x);

    void
    line_type (::std::unique_ptr< line_type_type > p);

    // dash-length
    //
    typedef ::musicxml::tenths dash_length_type;
    typedef ::xsd::cxx::tree::optional< dash_length_type > dash_length_optional;
    typedef ::xsd::cxx::tree::traits< dash_length_type, char > dash_length_traits;

    const dash_length_optional&
    dash_length () const;

    dash_length_optional&
    dash_length ();

    void
    dash_length (const dash_length_type& x);

    void
    dash_length (const dash_length_optional& x);

    void
    dash_length (::std::unique_ptr< dash_length_type > p);

    // space-length
    //
    typedef ::musicxml::tenths space_length_type;
    typedef ::xsd::cxx::tree::optional< space_length_type > space_length_optional;
    typedef ::xsd::cxx::tree::traits< space_length_type, char > space_length_traits;

    const space_length_optional&
    space_length () const;

    space_length_optional&
    space_length ();

    void
    space_length (const space_length_type& x);

    void
    space_length (const space_length_optional& x);

    void
    space_length (::std::unique_ptr< space_length_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // orientation
    //
    typedef ::musicxml::over_under orientation_type;
    typedef ::xsd::cxx::tree::optional< orientation_type > orientation_optional;
    typedef ::xsd::cxx::tree::traits< orientation_type, char > orientation_traits;

    const orientation_optional&
    orientation () const;

    orientation_optional&
    orientation ();

    void
    orientation (const orientation_type& x);

    void
    orientation (const orientation_optional& x);

    void
    orientation (::std::unique_ptr< orientation_type > p);

    // bezier-x
    //
    typedef ::musicxml::tenths bezier_x_type;
    typedef ::xsd::cxx::tree::optional< bezier_x_type > bezier_x_optional;
    typedef ::xsd::cxx::tree::traits< bezier_x_type, char > bezier_x_traits;

    const bezier_x_optional&
    bezier_x () const;

    bezier_x_optional&
    bezier_x ();

    void
    bezier_x (const bezier_x_type& x);

    void
    bezier_x (const bezier_x_optional& x);

    void
    bezier_x (::std::unique_ptr< bezier_x_type > p);

    // bezier-y
    //
    typedef ::musicxml::tenths bezier_y_type;
    typedef ::xsd::cxx::tree::optional< bezier_y_type > bezier_y_optional;
    typedef ::xsd::cxx::tree::traits< bezier_y_type, char > bezier_y_traits;

    const bezier_y_optional&
    bezier_y () const;

    bezier_y_optional&
    bezier_y ();

    void
    bezier_y (const bezier_y_type& x);

    void
    bezier_y (const bezier_y_optional& x);

    void
    bezier_y (::std::unique_ptr< bezier_y_type > p);

    // bezier-x2
    //
    typedef ::musicxml::tenths bezier_x2_type;
    typedef ::xsd::cxx::tree::optional< bezier_x2_type > bezier_x2_optional;
    typedef ::xsd::cxx::tree::traits< bezier_x2_type, char > bezier_x2_traits;

    const bezier_x2_optional&
    bezier_x2 () const;

    bezier_x2_optional&
    bezier_x2 ();

    void
    bezier_x2 (const bezier_x2_type& x);

    void
    bezier_x2 (const bezier_x2_optional& x);

    void
    bezier_x2 (::std::unique_ptr< bezier_x2_type > p);

    // bezier-y2
    //
    typedef ::musicxml::tenths bezier_y2_type;
    typedef ::xsd::cxx::tree::optional< bezier_y2_type > bezier_y2_optional;
    typedef ::xsd::cxx::tree::traits< bezier_y2_type, char > bezier_y2_traits;

    const bezier_y2_optional&
    bezier_y2 () const;

    bezier_y2_optional&
    bezier_y2 ();

    void
    bezier_y2 (const bezier_y2_type& x);

    void
    bezier_y2 (const bezier_y2_optional& x);

    void
    bezier_y2 (::std::unique_ptr< bezier_y2_type > p);

    // bezier-offset
    //
    typedef ::musicxml::divisions bezier_offset_type;
    typedef ::xsd::cxx::tree::optional< bezier_offset_type > bezier_offset_optional;
    typedef ::xsd::cxx::tree::traits< bezier_offset_type, char > bezier_offset_traits;

    const bezier_offset_optional&
    bezier_offset () const;

    bezier_offset_optional&
    bezier_offset ();

    void
    bezier_offset (const bezier_offset_type& x);

    void
    bezier_offset (const bezier_offset_optional& x);

    void
    bezier_offset (::std::unique_ptr< bezier_offset_type > p);

    // bezier-offset2
    //
    typedef ::musicxml::divisions bezier_offset2_type;
    typedef ::xsd::cxx::tree::optional< bezier_offset2_type > bezier_offset2_optional;
    typedef ::xsd::cxx::tree::traits< bezier_offset2_type, char > bezier_offset2_traits;

    const bezier_offset2_optional&
    bezier_offset2 () const;

    bezier_offset2_optional&
    bezier_offset2 ();

    void
    bezier_offset2 (const bezier_offset2_type& x);

    void
    bezier_offset2 (const bezier_offset2_optional& x);

    void
    bezier_offset2 (::std::unique_ptr< bezier_offset2_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    tied (const type_type&);

    tied (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    tied (const tied& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual tied*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tied&
    operator= (const tied& x);

    virtual 
    ~tied ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    number_optional number_;
    line_type_optional line_type_;
    dash_length_optional dash_length_;
    space_length_optional space_length_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    placement_optional placement_;
    orientation_optional orientation_;
    bezier_x_optional bezier_x_;
    bezier_y_optional bezier_y_;
    bezier_x2_optional bezier_x2_;
    bezier_y2_optional bezier_y2_;
    bezier_offset_optional bezier_offset_;
    bezier_offset2_optional bezier_offset2_;
    color_optional color_;
    id_optional id_;
  };

  class tremolo: public ::musicxml::tremolo_marks
  {
    public:
    // type
    //
    typedef ::musicxml::tremolo_type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    static const type_type&
    type_default_value ();

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // smufl
    //
    typedef ::musicxml::smufl_glyph_name smufl_type;
    typedef ::xsd::cxx::tree::optional< smufl_type > smufl_optional;
    typedef ::xsd::cxx::tree::traits< smufl_type, char > smufl_traits;

    const smufl_optional&
    smufl () const;

    smufl_optional&
    smufl ();

    void
    smufl (const smufl_type& x);

    void
    smufl (const smufl_optional& x);

    void
    smufl (::std::unique_ptr< smufl_type > p);

    // Constructors.
    //
    tremolo (const ::xml_schema::integer&);

    tremolo (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    tremolo (const tremolo& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual tremolo*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tremolo&
    operator= (const tremolo& x);

    virtual 
    ~tremolo ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< type_type > type_;
    static const type_type type_default_value_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    placement_optional placement_;
    smufl_optional smufl_;
  };

  class tuplet: public ::xml_schema::type
  {
    public:
    // tuplet-actual
    //
    typedef ::musicxml::tuplet_portion tuplet_actual_type;
    typedef ::xsd::cxx::tree::optional< tuplet_actual_type > tuplet_actual_optional;
    typedef ::xsd::cxx::tree::traits< tuplet_actual_type, char > tuplet_actual_traits;

    const tuplet_actual_optional&
    tuplet_actual () const;

    tuplet_actual_optional&
    tuplet_actual ();

    void
    tuplet_actual (const tuplet_actual_type& x);

    void
    tuplet_actual (const tuplet_actual_optional& x);

    void
    tuplet_actual (::std::unique_ptr< tuplet_actual_type > p);

    // tuplet-normal
    //
    typedef ::musicxml::tuplet_portion tuplet_normal_type;
    typedef ::xsd::cxx::tree::optional< tuplet_normal_type > tuplet_normal_optional;
    typedef ::xsd::cxx::tree::traits< tuplet_normal_type, char > tuplet_normal_traits;

    const tuplet_normal_optional&
    tuplet_normal () const;

    tuplet_normal_optional&
    tuplet_normal ();

    void
    tuplet_normal (const tuplet_normal_type& x);

    void
    tuplet_normal (const tuplet_normal_optional& x);

    void
    tuplet_normal (::std::unique_ptr< tuplet_normal_type > p);

    // type
    //
    typedef ::musicxml::start_stop type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // number
    //
    typedef ::musicxml::number_level number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // bracket
    //
    typedef ::musicxml::yes_no bracket_type;
    typedef ::xsd::cxx::tree::optional< bracket_type > bracket_optional;
    typedef ::xsd::cxx::tree::traits< bracket_type, char > bracket_traits;

    const bracket_optional&
    bracket () const;

    bracket_optional&
    bracket ();

    void
    bracket (const bracket_type& x);

    void
    bracket (const bracket_optional& x);

    void
    bracket (::std::unique_ptr< bracket_type > p);

    // show-number
    //
    typedef ::musicxml::show_tuplet show_number_type;
    typedef ::xsd::cxx::tree::optional< show_number_type > show_number_optional;
    typedef ::xsd::cxx::tree::traits< show_number_type, char > show_number_traits;

    const show_number_optional&
    show_number () const;

    show_number_optional&
    show_number ();

    void
    show_number (const show_number_type& x);

    void
    show_number (const show_number_optional& x);

    void
    show_number (::std::unique_ptr< show_number_type > p);

    // show-type
    //
    typedef ::musicxml::show_tuplet show_type_type;
    typedef ::xsd::cxx::tree::optional< show_type_type > show_type_optional;
    typedef ::xsd::cxx::tree::traits< show_type_type, char > show_type_traits;

    const show_type_optional&
    show_type () const;

    show_type_optional&
    show_type ();

    void
    show_type (const show_type_type& x);

    void
    show_type (const show_type_optional& x);

    void
    show_type (::std::unique_ptr< show_type_type > p);

    // line-shape
    //
    typedef ::musicxml::line_shape line_shape_type;
    typedef ::xsd::cxx::tree::optional< line_shape_type > line_shape_optional;
    typedef ::xsd::cxx::tree::traits< line_shape_type, char > line_shape_traits;

    const line_shape_optional&
    line_shape () const;

    line_shape_optional&
    line_shape ();

    void
    line_shape (const line_shape_type& x);

    void
    line_shape (const line_shape_optional& x);

    void
    line_shape (::std::unique_ptr< line_shape_type > p);

    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // placement
    //
    typedef ::musicxml::above_below placement_type;
    typedef ::xsd::cxx::tree::optional< placement_type > placement_optional;
    typedef ::xsd::cxx::tree::traits< placement_type, char > placement_traits;

    const placement_optional&
    placement () const;

    placement_optional&
    placement ();

    void
    placement (const placement_type& x);

    void
    placement (const placement_optional& x);

    void
    placement (::std::unique_ptr< placement_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    tuplet (const type_type&);

    tuplet (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    tuplet (const tuplet& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual tuplet*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tuplet&
    operator= (const tuplet& x);

    virtual 
    ~tuplet ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    tuplet_actual_optional tuplet_actual_;
    tuplet_normal_optional tuplet_normal_;
    ::xsd::cxx::tree::one< type_type > type_;
    number_optional number_;
    bracket_optional bracket_;
    show_number_optional show_number_;
    show_type_optional show_type_;
    line_shape_optional line_shape_;
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    placement_optional placement_;
    id_optional id_;
  };

  class tuplet_dot: public ::xml_schema::type
  {
    public:
    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    tuplet_dot ();

    tuplet_dot (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    tuplet_dot (const tuplet_dot& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual tuplet_dot*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tuplet_dot&
    operator= (const tuplet_dot& x);

    virtual 
    ~tuplet_dot ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
  };

  class tuplet_number: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type >
  {
    public:
    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    tuplet_number (const ::xml_schema::non_negative_integer&);

    tuplet_number (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    tuplet_number (const tuplet_number& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual tuplet_number*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tuplet_number&
    operator= (const tuplet_number& x);

    virtual 
    ~tuplet_number ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
  };

  class tuplet_portion: public ::xml_schema::type
  {
    public:
    // tuplet-number
    //
    typedef ::musicxml::tuplet_number tuplet_number_type;
    typedef ::xsd::cxx::tree::optional< tuplet_number_type > tuplet_number_optional;
    typedef ::xsd::cxx::tree::traits< tuplet_number_type, char > tuplet_number_traits;

    const tuplet_number_optional&
    tuplet_number () const;

    tuplet_number_optional&
    tuplet_number ();

    void
    tuplet_number (const tuplet_number_type& x);

    void
    tuplet_number (const tuplet_number_optional& x);

    void
    tuplet_number (::std::unique_ptr< tuplet_number_type > p);

    // tuplet-type
    //
    typedef ::musicxml::tuplet_type tuplet_type_type;
    typedef ::xsd::cxx::tree::optional< tuplet_type_type > tuplet_type_optional;
    typedef ::xsd::cxx::tree::traits< tuplet_type_type, char > tuplet_type_traits;

    const tuplet_type_optional&
    tuplet_type () const;

    tuplet_type_optional&
    tuplet_type ();

    void
    tuplet_type (const tuplet_type_type& x);

    void
    tuplet_type (const tuplet_type_optional& x);

    void
    tuplet_type (::std::unique_ptr< tuplet_type_type > p);

    // tuplet-dot
    //
    typedef ::musicxml::tuplet_dot tuplet_dot_type;
    typedef ::xsd::cxx::tree::sequence< tuplet_dot_type > tuplet_dot_sequence;
    typedef tuplet_dot_sequence::iterator tuplet_dot_iterator;
    typedef tuplet_dot_sequence::const_iterator tuplet_dot_const_iterator;
    typedef ::xsd::cxx::tree::traits< tuplet_dot_type, char > tuplet_dot_traits;

    const tuplet_dot_sequence&
    tuplet_dot () const;

    tuplet_dot_sequence&
    tuplet_dot ();

    void
    tuplet_dot (const tuplet_dot_sequence& s);

    // Constructors.
    //
    tuplet_portion ();

    tuplet_portion (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    tuplet_portion (const tuplet_portion& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual tuplet_portion*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tuplet_portion&
    operator= (const tuplet_portion& x);

    virtual 
    ~tuplet_portion ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    tuplet_number_optional tuplet_number_;
    tuplet_type_optional tuplet_type_;
    tuplet_dot_sequence tuplet_dot_;
  };

  class tuplet_type: public ::musicxml::note_type_value
  {
    public:
    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    tuplet_type (::musicxml::note_type_value::value);

    tuplet_type (const char*);

    tuplet_type (const ::std::string&);

    tuplet_type (const ::musicxml::note_type_value&);

    tuplet_type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    tuplet_type (const tuplet_type& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual tuplet_type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tuplet_type&
    operator= (const tuplet_type& x);

    virtual 
    ~tuplet_type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
  };

  class unpitched: public ::xml_schema::type
  {
    public:
    // display-step
    //
    typedef ::musicxml::step display_step_type;
    typedef ::xsd::cxx::tree::optional< display_step_type > display_step_optional;
    typedef ::xsd::cxx::tree::traits< display_step_type, char > display_step_traits;

    const display_step_optional&
    display_step () const;

    display_step_optional&
    display_step ();

    void
    display_step (const display_step_type& x);

    void
    display_step (const display_step_optional& x);

    void
    display_step (::std::unique_ptr< display_step_type > p);

    // display-octave
    //
    typedef ::musicxml::octave display_octave_type;
    typedef ::xsd::cxx::tree::optional< display_octave_type > display_octave_optional;
    typedef ::xsd::cxx::tree::traits< display_octave_type, char > display_octave_traits;

    const display_octave_optional&
    display_octave () const;

    display_octave_optional&
    display_octave ();

    void
    display_octave (const display_octave_type& x);

    void
    display_octave (const display_octave_optional& x);

    void
    display_octave (::std::unique_ptr< display_octave_type > p);

    // Constructors.
    //
    unpitched ();

    unpitched (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    unpitched (const unpitched& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual unpitched*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    unpitched&
    operator= (const unpitched& x);

    virtual 
    ~unpitched ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    display_step_optional display_step_;
    display_octave_optional display_octave_;
  };

  class wait: public ::xml_schema::type
  {
    public:
    // player
    //
    typedef ::xml_schema::idref player_type;
    typedef ::xsd::cxx::tree::optional< player_type > player_optional;
    typedef ::xsd::cxx::tree::traits< player_type, char > player_traits;

    const player_optional&
    player () const;

    player_optional&
    player ();

    void
    player (const player_type& x);

    void
    player (const player_optional& x);

    void
    player (::std::unique_ptr< player_type > p);

    // time-only
    //
    typedef ::musicxml::time_only time_only_type;
    typedef ::xsd::cxx::tree::optional< time_only_type > time_only_optional;
    typedef ::xsd::cxx::tree::traits< time_only_type, char > time_only_traits;

    const time_only_optional&
    time_only () const;

    time_only_optional&
    time_only ();

    void
    time_only (const time_only_type& x);

    void
    time_only (const time_only_optional& x);

    void
    time_only (::std::unique_ptr< time_only_type > p);

    // Constructors.
    //
    wait ();

    wait (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    wait (const wait& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual wait*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    wait&
    operator= (const wait& x);

    virtual 
    ~wait ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    player_optional player_;
    time_only_optional time_only_;
  };

  class credit: public ::xml_schema::type
  {
    public:
    // credit-type
    //
    typedef ::xml_schema::string credit_type_type;
    typedef ::xsd::cxx::tree::sequence< credit_type_type > credit_type_sequence;
    typedef credit_type_sequence::iterator credit_type_iterator;
    typedef credit_type_sequence::const_iterator credit_type_const_iterator;
    typedef ::xsd::cxx::tree::traits< credit_type_type, char > credit_type_traits;

    const credit_type_sequence&
    credit_type () const;

    credit_type_sequence&
    credit_type ();

    void
    credit_type (const credit_type_sequence& s);

    // link
    //
    typedef ::musicxml::link link_type;
    typedef ::xsd::cxx::tree::sequence< link_type > link_sequence;
    typedef link_sequence::iterator link_iterator;
    typedef link_sequence::const_iterator link_const_iterator;
    typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

    const link_sequence&
    link () const;

    link_sequence&
    link ();

    void
    link (const link_sequence& s);

    // bookmark
    //
    typedef ::musicxml::bookmark bookmark_type;
    typedef ::xsd::cxx::tree::sequence< bookmark_type > bookmark_sequence;
    typedef bookmark_sequence::iterator bookmark_iterator;
    typedef bookmark_sequence::const_iterator bookmark_const_iterator;
    typedef ::xsd::cxx::tree::traits< bookmark_type, char > bookmark_traits;

    const bookmark_sequence&
    bookmark () const;

    bookmark_sequence&
    bookmark ();

    void
    bookmark (const bookmark_sequence& s);

    // credit-image
    //
    typedef ::musicxml::image credit_image_type;
    typedef ::xsd::cxx::tree::optional< credit_image_type > credit_image_optional;
    typedef ::xsd::cxx::tree::traits< credit_image_type, char > credit_image_traits;

    const credit_image_optional&
    credit_image () const;

    credit_image_optional&
    credit_image ();

    void
    credit_image (const credit_image_type& x);

    void
    credit_image (const credit_image_optional& x);

    void
    credit_image (::std::unique_ptr< credit_image_type > p);

    // credit-words
    //
    typedef ::musicxml::formatted_text_id credit_words_type;
    typedef ::xsd::cxx::tree::sequence< credit_words_type > credit_words_sequence;
    typedef credit_words_sequence::iterator credit_words_iterator;
    typedef credit_words_sequence::const_iterator credit_words_const_iterator;
    typedef ::xsd::cxx::tree::traits< credit_words_type, char > credit_words_traits;

    const credit_words_sequence&
    credit_words () const;

    credit_words_sequence&
    credit_words ();

    void
    credit_words (const credit_words_sequence& s);

    // credit-symbol
    //
    typedef ::musicxml::formatted_symbol_id credit_symbol_type;
    typedef ::xsd::cxx::tree::sequence< credit_symbol_type > credit_symbol_sequence;
    typedef credit_symbol_sequence::iterator credit_symbol_iterator;
    typedef credit_symbol_sequence::const_iterator credit_symbol_const_iterator;
    typedef ::xsd::cxx::tree::traits< credit_symbol_type, char > credit_symbol_traits;

    const credit_symbol_sequence&
    credit_symbol () const;

    credit_symbol_sequence&
    credit_symbol ();

    void
    credit_symbol (const credit_symbol_sequence& s);

    // page
    //
    typedef ::xml_schema::positive_integer page_type;
    typedef ::xsd::cxx::tree::optional< page_type > page_optional;
    typedef ::xsd::cxx::tree::traits< page_type, char > page_traits;

    const page_optional&
    page () const;

    page_optional&
    page ();

    void
    page (const page_type& x);

    void
    page (const page_optional& x);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    credit ();

    credit (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    credit (const credit& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual credit*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    credit&
    operator= (const credit& x);

    virtual 
    ~credit ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    credit_type_sequence credit_type_;
    link_sequence link_;
    bookmark_sequence bookmark_;
    credit_image_optional credit_image_;
    credit_words_sequence credit_words_;
    credit_symbol_sequence credit_symbol_;
    page_optional page_;
    id_optional id_;
  };

  class defaults: public ::xml_schema::type
  {
    public:
    // scaling
    //
    typedef ::musicxml::scaling scaling_type;
    typedef ::xsd::cxx::tree::optional< scaling_type > scaling_optional;
    typedef ::xsd::cxx::tree::traits< scaling_type, char > scaling_traits;

    const scaling_optional&
    scaling () const;

    scaling_optional&
    scaling ();

    void
    scaling (const scaling_type& x);

    void
    scaling (const scaling_optional& x);

    void
    scaling (::std::unique_ptr< scaling_type > p);

    // concert-score
    //
    typedef ::musicxml::empty concert_score_type;
    typedef ::xsd::cxx::tree::optional< concert_score_type > concert_score_optional;
    typedef ::xsd::cxx::tree::traits< concert_score_type, char > concert_score_traits;

    const concert_score_optional&
    concert_score () const;

    concert_score_optional&
    concert_score ();

    void
    concert_score (const concert_score_type& x);

    void
    concert_score (const concert_score_optional& x);

    void
    concert_score (::std::unique_ptr< concert_score_type > p);

    // page-layout
    //
    typedef ::musicxml::page_layout page_layout_type;
    typedef ::xsd::cxx::tree::optional< page_layout_type > page_layout_optional;
    typedef ::xsd::cxx::tree::traits< page_layout_type, char > page_layout_traits;

    const page_layout_optional&
    page_layout () const;

    page_layout_optional&
    page_layout ();

    void
    page_layout (const page_layout_type& x);

    void
    page_layout (const page_layout_optional& x);

    void
    page_layout (::std::unique_ptr< page_layout_type > p);

    // system-layout
    //
    typedef ::musicxml::system_layout system_layout_type;
    typedef ::xsd::cxx::tree::optional< system_layout_type > system_layout_optional;
    typedef ::xsd::cxx::tree::traits< system_layout_type, char > system_layout_traits;

    const system_layout_optional&
    system_layout () const;

    system_layout_optional&
    system_layout ();

    void
    system_layout (const system_layout_type& x);

    void
    system_layout (const system_layout_optional& x);

    void
    system_layout (::std::unique_ptr< system_layout_type > p);

    // staff-layout
    //
    typedef ::musicxml::staff_layout staff_layout_type;
    typedef ::xsd::cxx::tree::sequence< staff_layout_type > staff_layout_sequence;
    typedef staff_layout_sequence::iterator staff_layout_iterator;
    typedef staff_layout_sequence::const_iterator staff_layout_const_iterator;
    typedef ::xsd::cxx::tree::traits< staff_layout_type, char > staff_layout_traits;

    const staff_layout_sequence&
    staff_layout () const;

    staff_layout_sequence&
    staff_layout ();

    void
    staff_layout (const staff_layout_sequence& s);

    // appearance
    //
    typedef ::musicxml::appearance appearance_type;
    typedef ::xsd::cxx::tree::optional< appearance_type > appearance_optional;
    typedef ::xsd::cxx::tree::traits< appearance_type, char > appearance_traits;

    const appearance_optional&
    appearance () const;

    appearance_optional&
    appearance ();

    void
    appearance (const appearance_type& x);

    void
    appearance (const appearance_optional& x);

    void
    appearance (::std::unique_ptr< appearance_type > p);

    // music-font
    //
    typedef ::musicxml::empty_font music_font_type;
    typedef ::xsd::cxx::tree::optional< music_font_type > music_font_optional;
    typedef ::xsd::cxx::tree::traits< music_font_type, char > music_font_traits;

    const music_font_optional&
    music_font () const;

    music_font_optional&
    music_font ();

    void
    music_font (const music_font_type& x);

    void
    music_font (const music_font_optional& x);

    void
    music_font (::std::unique_ptr< music_font_type > p);

    // word-font
    //
    typedef ::musicxml::empty_font word_font_type;
    typedef ::xsd::cxx::tree::optional< word_font_type > word_font_optional;
    typedef ::xsd::cxx::tree::traits< word_font_type, char > word_font_traits;

    const word_font_optional&
    word_font () const;

    word_font_optional&
    word_font ();

    void
    word_font (const word_font_type& x);

    void
    word_font (const word_font_optional& x);

    void
    word_font (::std::unique_ptr< word_font_type > p);

    // lyric-font
    //
    typedef ::musicxml::lyric_font lyric_font_type;
    typedef ::xsd::cxx::tree::sequence< lyric_font_type > lyric_font_sequence;
    typedef lyric_font_sequence::iterator lyric_font_iterator;
    typedef lyric_font_sequence::const_iterator lyric_font_const_iterator;
    typedef ::xsd::cxx::tree::traits< lyric_font_type, char > lyric_font_traits;

    const lyric_font_sequence&
    lyric_font () const;

    lyric_font_sequence&
    lyric_font ();

    void
    lyric_font (const lyric_font_sequence& s);

    // lyric-language
    //
    typedef ::musicxml::lyric_language lyric_language_type;
    typedef ::xsd::cxx::tree::sequence< lyric_language_type > lyric_language_sequence;
    typedef lyric_language_sequence::iterator lyric_language_iterator;
    typedef lyric_language_sequence::const_iterator lyric_language_const_iterator;
    typedef ::xsd::cxx::tree::traits< lyric_language_type, char > lyric_language_traits;

    const lyric_language_sequence&
    lyric_language () const;

    lyric_language_sequence&
    lyric_language ();

    void
    lyric_language (const lyric_language_sequence& s);

    // Constructors.
    //
    defaults ();

    defaults (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    defaults (const defaults& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual defaults*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    defaults&
    operator= (const defaults& x);

    virtual 
    ~defaults ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    scaling_optional scaling_;
    concert_score_optional concert_score_;
    page_layout_optional page_layout_;
    system_layout_optional system_layout_;
    staff_layout_sequence staff_layout_;
    appearance_optional appearance_;
    music_font_optional music_font_;
    word_font_optional word_font_;
    lyric_font_sequence lyric_font_;
    lyric_language_sequence lyric_language_;
  };

  class empty_font: public ::xml_schema::type
  {
    public:
    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // Constructors.
    //
    empty_font ();

    empty_font (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    empty_font (const empty_font& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual empty_font*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    empty_font&
    operator= (const empty_font& x);

    virtual 
    ~empty_font ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
  };

  class group_barline: public ::musicxml::group_barline_value
  {
    public:
    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    group_barline (::musicxml::group_barline_value::value);

    group_barline (const char*);

    group_barline (const ::std::string&);

    group_barline (const ::musicxml::group_barline_value&);

    group_barline (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    group_barline (const group_barline& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual group_barline*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    group_barline&
    operator= (const group_barline& x);

    virtual 
    ~group_barline ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    color_optional color_;
  };

  class group_name: public ::xml_schema::string
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // justify
    //
    typedef ::musicxml::left_center_right justify_type;
    typedef ::xsd::cxx::tree::optional< justify_type > justify_optional;
    typedef ::xsd::cxx::tree::traits< justify_type, char > justify_traits;

    const justify_optional&
    justify () const;

    justify_optional&
    justify ();

    void
    justify (const justify_type& x);

    void
    justify (const justify_optional& x);

    void
    justify (::std::unique_ptr< justify_type > p);

    // Constructors.
    //
    group_name ();

    group_name (const char*);

    group_name (const ::std::string&);

    group_name (const ::xml_schema::string&);

    group_name (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    group_name (const group_name& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual group_name*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    group_name&
    operator= (const group_name& x);

    virtual 
    ~group_name ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    justify_optional justify_;
  };

  class group_symbol: public ::musicxml::group_symbol_value
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // Constructors.
    //
    group_symbol (::musicxml::group_symbol_value::value);

    group_symbol (const char*);

    group_symbol (const ::std::string&);

    group_symbol (const ::musicxml::group_symbol_value&);

    group_symbol (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    group_symbol (const group_symbol& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual group_symbol*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    group_symbol&
    operator= (const group_symbol& x);

    virtual 
    ~group_symbol ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    color_optional color_;
  };

  class instrument_link: public ::xml_schema::type
  {
    public:
    // id
    //
    typedef ::xml_schema::idref id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    instrument_link (const id_type&);

    instrument_link (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    instrument_link (const instrument_link& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual instrument_link*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    instrument_link&
    operator= (const instrument_link& x);

    virtual 
    ~instrument_link ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
  };

  class lyric_font: public ::xml_schema::type
  {
    public:
    // number
    //
    typedef ::xml_schema::nmtoken number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // name
    //
    typedef ::xml_schema::token name_type;
    typedef ::xsd::cxx::tree::optional< name_type > name_optional;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_optional&
    name () const;

    name_optional&
    name ();

    void
    name (const name_type& x);

    void
    name (const name_optional& x);

    void
    name (::std::unique_ptr< name_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // Constructors.
    //
    lyric_font ();

    lyric_font (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    lyric_font (const lyric_font& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual lyric_font*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    lyric_font&
    operator= (const lyric_font& x);

    virtual 
    ~lyric_font ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    number_optional number_;
    name_optional name_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
  };

  class lyric_language: public ::xml_schema::type
  {
    public:
    // number
    //
    typedef ::xml_schema::nmtoken number_type;
    typedef ::xsd::cxx::tree::optional< number_type > number_optional;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_optional&
    number () const;

    number_optional&
    number ();

    void
    number (const number_type& x);

    void
    number (const number_optional& x);

    void
    number (::std::unique_ptr< number_type > p);

    // name
    //
    typedef ::xml_schema::token name_type;
    typedef ::xsd::cxx::tree::optional< name_type > name_optional;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_optional&
    name () const;

    name_optional&
    name ();

    void
    name (const name_type& x);

    void
    name (const name_optional& x);

    void
    name (::std::unique_ptr< name_type > p);

    // lang
    //
    typedef ::namespace_::lang lang_type;
    typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

    const lang_type&
    lang () const;

    lang_type&
    lang ();

    void
    lang (const lang_type& x);

    void
    lang (::std::unique_ptr< lang_type > p);

    // Constructors.
    //
    lyric_language (const lang_type&);

    lyric_language (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    lyric_language (const lyric_language& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual lyric_language*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    lyric_language&
    operator= (const lyric_language& x);

    virtual 
    ~lyric_language ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    number_optional number_;
    name_optional name_;
    ::xsd::cxx::tree::one< lang_type > lang_;
  };

  class opus: public ::xml_schema::type
  {
    public:
    // href
    //
    typedef ::xml_schema::uri href_type;
    typedef ::xsd::cxx::tree::traits< href_type, char > href_traits;

    const href_type&
    href () const;

    href_type&
    href ();

    void
    href (const href_type& x);

    void
    href (::std::unique_ptr< href_type > p);

    // type
    //
    typedef ::xlink::type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    static const type_type&
    type_default_value ();

    // role
    //
    typedef ::xml_schema::token role_type;
    typedef ::xsd::cxx::tree::optional< role_type > role_optional;
    typedef ::xsd::cxx::tree::traits< role_type, char > role_traits;

    const role_optional&
    role () const;

    role_optional&
    role ();

    void
    role (const role_type& x);

    void
    role (const role_optional& x);

    void
    role (::std::unique_ptr< role_type > p);

    // title
    //
    typedef ::xml_schema::token title_type;
    typedef ::xsd::cxx::tree::optional< title_type > title_optional;
    typedef ::xsd::cxx::tree::traits< title_type, char > title_traits;

    const title_optional&
    title () const;

    title_optional&
    title ();

    void
    title (const title_type& x);

    void
    title (const title_optional& x);

    void
    title (::std::unique_ptr< title_type > p);

    // show
    //
    typedef ::xlink::show show_type;
    typedef ::xsd::cxx::tree::traits< show_type, char > show_traits;

    const show_type&
    show () const;

    show_type&
    show ();

    void
    show (const show_type& x);

    void
    show (::std::unique_ptr< show_type > p);

    static const show_type&
    show_default_value ();

    // actuate
    //
    typedef ::xlink::actuate actuate_type;
    typedef ::xsd::cxx::tree::traits< actuate_type, char > actuate_traits;

    const actuate_type&
    actuate () const;

    actuate_type&
    actuate ();

    void
    actuate (const actuate_type& x);

    void
    actuate (::std::unique_ptr< actuate_type > p);

    static const actuate_type&
    actuate_default_value ();

    // Constructors.
    //
    opus (const href_type&);

    opus (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    opus (const opus& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual opus*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    opus&
    operator= (const opus& x);

    virtual 
    ~opus ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< href_type > href_;
    ::xsd::cxx::tree::one< type_type > type_;
    static const type_type type_default_value_;
    role_optional role_;
    title_optional title_;
    ::xsd::cxx::tree::one< show_type > show_;
    static const show_type show_default_value_;
    ::xsd::cxx::tree::one< actuate_type > actuate_;
    static const actuate_type actuate_default_value_;
  };

  class part_group: public ::xml_schema::type
  {
    public:
    // group-name
    //
    typedef ::musicxml::group_name group_name_type;
    typedef ::xsd::cxx::tree::optional< group_name_type > group_name_optional;
    typedef ::xsd::cxx::tree::traits< group_name_type, char > group_name_traits;

    const group_name_optional&
    group_name () const;

    group_name_optional&
    group_name ();

    void
    group_name (const group_name_type& x);

    void
    group_name (const group_name_optional& x);

    void
    group_name (::std::unique_ptr< group_name_type > p);

    // group-name-display
    //
    typedef ::musicxml::name_display group_name_display_type;
    typedef ::xsd::cxx::tree::optional< group_name_display_type > group_name_display_optional;
    typedef ::xsd::cxx::tree::traits< group_name_display_type, char > group_name_display_traits;

    const group_name_display_optional&
    group_name_display () const;

    group_name_display_optional&
    group_name_display ();

    void
    group_name_display (const group_name_display_type& x);

    void
    group_name_display (const group_name_display_optional& x);

    void
    group_name_display (::std::unique_ptr< group_name_display_type > p);

    // group-abbreviation
    //
    typedef ::musicxml::group_name group_abbreviation_type;
    typedef ::xsd::cxx::tree::optional< group_abbreviation_type > group_abbreviation_optional;
    typedef ::xsd::cxx::tree::traits< group_abbreviation_type, char > group_abbreviation_traits;

    const group_abbreviation_optional&
    group_abbreviation () const;

    group_abbreviation_optional&
    group_abbreviation ();

    void
    group_abbreviation (const group_abbreviation_type& x);

    void
    group_abbreviation (const group_abbreviation_optional& x);

    void
    group_abbreviation (::std::unique_ptr< group_abbreviation_type > p);

    // group-abbreviation-display
    //
    typedef ::musicxml::name_display group_abbreviation_display_type;
    typedef ::xsd::cxx::tree::optional< group_abbreviation_display_type > group_abbreviation_display_optional;
    typedef ::xsd::cxx::tree::traits< group_abbreviation_display_type, char > group_abbreviation_display_traits;

    const group_abbreviation_display_optional&
    group_abbreviation_display () const;

    group_abbreviation_display_optional&
    group_abbreviation_display ();

    void
    group_abbreviation_display (const group_abbreviation_display_type& x);

    void
    group_abbreviation_display (const group_abbreviation_display_optional& x);

    void
    group_abbreviation_display (::std::unique_ptr< group_abbreviation_display_type > p);

    // group-symbol
    //
    typedef ::musicxml::group_symbol group_symbol_type;
    typedef ::xsd::cxx::tree::optional< group_symbol_type > group_symbol_optional;
    typedef ::xsd::cxx::tree::traits< group_symbol_type, char > group_symbol_traits;

    const group_symbol_optional&
    group_symbol () const;

    group_symbol_optional&
    group_symbol ();

    void
    group_symbol (const group_symbol_type& x);

    void
    group_symbol (const group_symbol_optional& x);

    void
    group_symbol (::std::unique_ptr< group_symbol_type > p);

    // group-barline
    //
    typedef ::musicxml::group_barline group_barline_type;
    typedef ::xsd::cxx::tree::optional< group_barline_type > group_barline_optional;
    typedef ::xsd::cxx::tree::traits< group_barline_type, char > group_barline_traits;

    const group_barline_optional&
    group_barline () const;

    group_barline_optional&
    group_barline ();

    void
    group_barline (const group_barline_type& x);

    void
    group_barline (const group_barline_optional& x);

    void
    group_barline (::std::unique_ptr< group_barline_type > p);

    // group-time
    //
    typedef ::musicxml::empty group_time_type;
    typedef ::xsd::cxx::tree::optional< group_time_type > group_time_optional;
    typedef ::xsd::cxx::tree::traits< group_time_type, char > group_time_traits;

    const group_time_optional&
    group_time () const;

    group_time_optional&
    group_time ();

    void
    group_time (const group_time_type& x);

    void
    group_time (const group_time_optional& x);

    void
    group_time (::std::unique_ptr< group_time_type > p);

    // footnote
    //
    typedef ::musicxml::formatted_text footnote_type;
    typedef ::xsd::cxx::tree::optional< footnote_type > footnote_optional;
    typedef ::xsd::cxx::tree::traits< footnote_type, char > footnote_traits;

    const footnote_optional&
    footnote () const;

    footnote_optional&
    footnote ();

    void
    footnote (const footnote_type& x);

    void
    footnote (const footnote_optional& x);

    void
    footnote (::std::unique_ptr< footnote_type > p);

    // level
    //
    typedef ::musicxml::level level_type;
    typedef ::xsd::cxx::tree::optional< level_type > level_optional;
    typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

    const level_optional&
    level () const;

    level_optional&
    level ();

    void
    level (const level_type& x);

    void
    level (const level_optional& x);

    void
    level (::std::unique_ptr< level_type > p);

    // type
    //
    typedef ::musicxml::start_stop type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // number
    //
    typedef ::xml_schema::token number_type;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_type&
    number () const;

    number_type&
    number ();

    void
    number (const number_type& x);

    void
    number (::std::unique_ptr< number_type > p);

    static const number_type&
    number_default_value ();

    // Constructors.
    //
    part_group (const type_type&);

    part_group (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    part_group (const part_group& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual part_group*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    part_group&
    operator= (const part_group& x);

    virtual 
    ~part_group ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    group_name_optional group_name_;
    group_name_display_optional group_name_display_;
    group_abbreviation_optional group_abbreviation_;
    group_abbreviation_display_optional group_abbreviation_display_;
    group_symbol_optional group_symbol_;
    group_barline_optional group_barline_;
    group_time_optional group_time_;
    footnote_optional footnote_;
    level_optional level_;
    ::xsd::cxx::tree::one< type_type > type_;
    ::xsd::cxx::tree::one< number_type > number_;
    static const number_type number_default_value_;
  };

  class part_link: public ::xml_schema::type
  {
    public:
    // instrument-link
    //
    typedef ::musicxml::instrument_link instrument_link_type;
    typedef ::xsd::cxx::tree::sequence< instrument_link_type > instrument_link_sequence;
    typedef instrument_link_sequence::iterator instrument_link_iterator;
    typedef instrument_link_sequence::const_iterator instrument_link_const_iterator;
    typedef ::xsd::cxx::tree::traits< instrument_link_type, char > instrument_link_traits;

    const instrument_link_sequence&
    instrument_link () const;

    instrument_link_sequence&
    instrument_link ();

    void
    instrument_link (const instrument_link_sequence& s);

    // group-link
    //
    typedef ::xml_schema::string group_link_type;
    typedef ::xsd::cxx::tree::sequence< group_link_type > group_link_sequence;
    typedef group_link_sequence::iterator group_link_iterator;
    typedef group_link_sequence::const_iterator group_link_const_iterator;
    typedef ::xsd::cxx::tree::traits< group_link_type, char > group_link_traits;

    const group_link_sequence&
    group_link () const;

    group_link_sequence&
    group_link ();

    void
    group_link (const group_link_sequence& s);

    // href
    //
    typedef ::xml_schema::uri href_type;
    typedef ::xsd::cxx::tree::traits< href_type, char > href_traits;

    const href_type&
    href () const;

    href_type&
    href ();

    void
    href (const href_type& x);

    void
    href (::std::unique_ptr< href_type > p);

    // type
    //
    typedef ::xlink::type type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    static const type_type&
    type_default_value ();

    // role
    //
    typedef ::xml_schema::token role_type;
    typedef ::xsd::cxx::tree::optional< role_type > role_optional;
    typedef ::xsd::cxx::tree::traits< role_type, char > role_traits;

    const role_optional&
    role () const;

    role_optional&
    role ();

    void
    role (const role_type& x);

    void
    role (const role_optional& x);

    void
    role (::std::unique_ptr< role_type > p);

    // title
    //
    typedef ::xml_schema::token title_type;
    typedef ::xsd::cxx::tree::optional< title_type > title_optional;
    typedef ::xsd::cxx::tree::traits< title_type, char > title_traits;

    const title_optional&
    title () const;

    title_optional&
    title ();

    void
    title (const title_type& x);

    void
    title (const title_optional& x);

    void
    title (::std::unique_ptr< title_type > p);

    // show
    //
    typedef ::xlink::show show_type;
    typedef ::xsd::cxx::tree::traits< show_type, char > show_traits;

    const show_type&
    show () const;

    show_type&
    show ();

    void
    show (const show_type& x);

    void
    show (::std::unique_ptr< show_type > p);

    static const show_type&
    show_default_value ();

    // actuate
    //
    typedef ::xlink::actuate actuate_type;
    typedef ::xsd::cxx::tree::traits< actuate_type, char > actuate_traits;

    const actuate_type&
    actuate () const;

    actuate_type&
    actuate ();

    void
    actuate (const actuate_type& x);

    void
    actuate (::std::unique_ptr< actuate_type > p);

    static const actuate_type&
    actuate_default_value ();

    // Constructors.
    //
    part_link (const href_type&);

    part_link (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    part_link (const part_link& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual part_link*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    part_link&
    operator= (const part_link& x);

    virtual 
    ~part_link ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    instrument_link_sequence instrument_link_;
    group_link_sequence group_link_;
    ::xsd::cxx::tree::one< href_type > href_;
    ::xsd::cxx::tree::one< type_type > type_;
    static const type_type type_default_value_;
    role_optional role_;
    title_optional title_;
    ::xsd::cxx::tree::one< show_type > show_;
    static const show_type show_default_value_;
    ::xsd::cxx::tree::one< actuate_type > actuate_;
    static const actuate_type actuate_default_value_;
  };

  class part_list: public ::xml_schema::type
  {
    public:
    // part-group
    //
    typedef ::musicxml::part_group part_group_type;
    typedef ::xsd::cxx::tree::sequence< part_group_type > part_group_sequence;
    typedef part_group_sequence::iterator part_group_iterator;
    typedef part_group_sequence::const_iterator part_group_const_iterator;
    typedef ::xsd::cxx::tree::traits< part_group_type, char > part_group_traits;

    static const ::std::size_t part_group_id = 1UL;

    const part_group_sequence&
    part_group () const;

    part_group_sequence&
    part_group ();

    void
    part_group (const part_group_sequence& s);

    // score-part
    //
    typedef ::musicxml::score_part score_part_type;
    typedef ::xsd::cxx::tree::sequence< score_part_type > score_part_sequence;
    typedef score_part_sequence::iterator score_part_iterator;
    typedef score_part_sequence::const_iterator score_part_const_iterator;
    typedef ::xsd::cxx::tree::traits< score_part_type, char > score_part_traits;

    static const ::std::size_t score_part_id = 2UL;

    const score_part_sequence&
    score_part () const;

    score_part_sequence&
    score_part ();

    void
    score_part (const score_part_sequence& s);

    // content_order
    //
    typedef ::xml_schema::content_order content_order_type;
    typedef ::std::vector< content_order_type > content_order_sequence;
    typedef content_order_sequence::iterator content_order_iterator;
    typedef content_order_sequence::const_iterator content_order_const_iterator;

    const content_order_sequence&
    content_order () const;

    content_order_sequence&
    content_order ();

    void
    content_order (const content_order_sequence& s);

    // Constructors.
    //
    part_list ();

    part_list (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    part_list (const part_list& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual part_list*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    part_list&
    operator= (const part_list& x);

    virtual 
    ~part_list ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    content_order_sequence content_order_;

    part_group_sequence part_group_;
    score_part_sequence score_part_;
  };

  class part_name: public ::xml_schema::string
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // print-object
    //
    typedef ::musicxml::yes_no print_object_type;
    typedef ::xsd::cxx::tree::optional< print_object_type > print_object_optional;
    typedef ::xsd::cxx::tree::traits< print_object_type, char > print_object_traits;

    const print_object_optional&
    print_object () const;

    print_object_optional&
    print_object ();

    void
    print_object (const print_object_type& x);

    void
    print_object (const print_object_optional& x);

    void
    print_object (::std::unique_ptr< print_object_type > p);

    // justify
    //
    typedef ::musicxml::left_center_right justify_type;
    typedef ::xsd::cxx::tree::optional< justify_type > justify_optional;
    typedef ::xsd::cxx::tree::traits< justify_type, char > justify_traits;

    const justify_optional&
    justify () const;

    justify_optional&
    justify ();

    void
    justify (const justify_type& x);

    void
    justify (const justify_optional& x);

    void
    justify (::std::unique_ptr< justify_type > p);

    // Constructors.
    //
    part_name ();

    part_name (const char*);

    part_name (const ::std::string&);

    part_name (const ::xml_schema::string&);

    part_name (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    part_name (const part_name& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual part_name*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    part_name&
    operator= (const part_name& x);

    virtual 
    ~part_name ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    print_object_optional print_object_;
    justify_optional justify_;
  };

  class player: public ::xml_schema::type
  {
    public:
    // player-name
    //
    typedef ::xml_schema::string player_name_type;
    typedef ::xsd::cxx::tree::traits< player_name_type, char > player_name_traits;

    const player_name_type&
    player_name () const;

    player_name_type&
    player_name ();

    void
    player_name (const player_name_type& x);

    void
    player_name (::std::unique_ptr< player_name_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    player (const player_name_type&,
            const id_type&);

    player (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    player (const player& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual player*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    player&
    operator= (const player& x);

    virtual 
    ~player ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< player_name_type > player_name_;
    ::xsd::cxx::tree::one< id_type > id_;
  };

  class score_instrument: public ::xml_schema::type
  {
    public:
    // instrument-name
    //
    typedef ::xml_schema::string instrument_name_type;
    typedef ::xsd::cxx::tree::traits< instrument_name_type, char > instrument_name_traits;

    const instrument_name_type&
    instrument_name () const;

    instrument_name_type&
    instrument_name ();

    void
    instrument_name (const instrument_name_type& x);

    void
    instrument_name (::std::unique_ptr< instrument_name_type > p);

    // instrument-abbreviation
    //
    typedef ::xml_schema::string instrument_abbreviation_type;
    typedef ::xsd::cxx::tree::optional< instrument_abbreviation_type > instrument_abbreviation_optional;
    typedef ::xsd::cxx::tree::traits< instrument_abbreviation_type, char > instrument_abbreviation_traits;

    const instrument_abbreviation_optional&
    instrument_abbreviation () const;

    instrument_abbreviation_optional&
    instrument_abbreviation ();

    void
    instrument_abbreviation (const instrument_abbreviation_type& x);

    void
    instrument_abbreviation (const instrument_abbreviation_optional& x);

    void
    instrument_abbreviation (::std::unique_ptr< instrument_abbreviation_type > p);

    // instrument-sound
    //
    typedef ::xml_schema::string instrument_sound_type;
    typedef ::xsd::cxx::tree::optional< instrument_sound_type > instrument_sound_optional;
    typedef ::xsd::cxx::tree::traits< instrument_sound_type, char > instrument_sound_traits;

    const instrument_sound_optional&
    instrument_sound () const;

    instrument_sound_optional&
    instrument_sound ();

    void
    instrument_sound (const instrument_sound_type& x);

    void
    instrument_sound (const instrument_sound_optional& x);

    void
    instrument_sound (::std::unique_ptr< instrument_sound_type > p);

    // solo
    //
    typedef ::musicxml::empty solo_type;
    typedef ::xsd::cxx::tree::optional< solo_type > solo_optional;
    typedef ::xsd::cxx::tree::traits< solo_type, char > solo_traits;

    const solo_optional&
    solo () const;

    solo_optional&
    solo ();

    void
    solo (const solo_type& x);

    void
    solo (const solo_optional& x);

    void
    solo (::std::unique_ptr< solo_type > p);

    // ensemble
    //
    typedef ::musicxml::positive_integer_or_empty ensemble_type;
    typedef ::xsd::cxx::tree::optional< ensemble_type > ensemble_optional;
    typedef ::xsd::cxx::tree::traits< ensemble_type, char > ensemble_traits;

    const ensemble_optional&
    ensemble () const;

    ensemble_optional&
    ensemble ();

    void
    ensemble (const ensemble_type& x);

    void
    ensemble (const ensemble_optional& x);

    void
    ensemble (::std::unique_ptr< ensemble_type > p);

    // virtual-instrument
    //
    typedef ::musicxml::virtual_instrument virtual_instrument_type;
    typedef ::xsd::cxx::tree::optional< virtual_instrument_type > virtual_instrument_optional;
    typedef ::xsd::cxx::tree::traits< virtual_instrument_type, char > virtual_instrument_traits;

    const virtual_instrument_optional&
    virtual_instrument () const;

    virtual_instrument_optional&
    virtual_instrument ();

    void
    virtual_instrument (const virtual_instrument_type& x);

    void
    virtual_instrument (const virtual_instrument_optional& x);

    void
    virtual_instrument (::std::unique_ptr< virtual_instrument_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    score_instrument (const instrument_name_type&,
                      const id_type&);

    score_instrument (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    score_instrument (const score_instrument& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual score_instrument*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    score_instrument&
    operator= (const score_instrument& x);

    virtual 
    ~score_instrument ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< instrument_name_type > instrument_name_;
    instrument_abbreviation_optional instrument_abbreviation_;
    instrument_sound_optional instrument_sound_;
    solo_optional solo_;
    ensemble_optional ensemble_;
    virtual_instrument_optional virtual_instrument_;
    ::xsd::cxx::tree::one< id_type > id_;
  };

  class score_part: public ::xml_schema::type
  {
    public:
    // identification
    //
    typedef ::musicxml::identification identification_type;
    typedef ::xsd::cxx::tree::optional< identification_type > identification_optional;
    typedef ::xsd::cxx::tree::traits< identification_type, char > identification_traits;

    const identification_optional&
    identification () const;

    identification_optional&
    identification ();

    void
    identification (const identification_type& x);

    void
    identification (const identification_optional& x);

    void
    identification (::std::unique_ptr< identification_type > p);

    // part-link
    //
    typedef ::musicxml::part_link part_link_type;
    typedef ::xsd::cxx::tree::sequence< part_link_type > part_link_sequence;
    typedef part_link_sequence::iterator part_link_iterator;
    typedef part_link_sequence::const_iterator part_link_const_iterator;
    typedef ::xsd::cxx::tree::traits< part_link_type, char > part_link_traits;

    const part_link_sequence&
    part_link () const;

    part_link_sequence&
    part_link ();

    void
    part_link (const part_link_sequence& s);

    // part-name
    //
    typedef ::musicxml::part_name part_name_type;
    typedef ::xsd::cxx::tree::traits< part_name_type, char > part_name_traits;

    const part_name_type&
    part_name () const;

    part_name_type&
    part_name ();

    void
    part_name (const part_name_type& x);

    void
    part_name (::std::unique_ptr< part_name_type > p);

    // part-name-display
    //
    typedef ::musicxml::name_display part_name_display_type;
    typedef ::xsd::cxx::tree::optional< part_name_display_type > part_name_display_optional;
    typedef ::xsd::cxx::tree::traits< part_name_display_type, char > part_name_display_traits;

    const part_name_display_optional&
    part_name_display () const;

    part_name_display_optional&
    part_name_display ();

    void
    part_name_display (const part_name_display_type& x);

    void
    part_name_display (const part_name_display_optional& x);

    void
    part_name_display (::std::unique_ptr< part_name_display_type > p);

    // part-abbreviation
    //
    typedef ::musicxml::part_name part_abbreviation_type;
    typedef ::xsd::cxx::tree::optional< part_abbreviation_type > part_abbreviation_optional;
    typedef ::xsd::cxx::tree::traits< part_abbreviation_type, char > part_abbreviation_traits;

    const part_abbreviation_optional&
    part_abbreviation () const;

    part_abbreviation_optional&
    part_abbreviation ();

    void
    part_abbreviation (const part_abbreviation_type& x);

    void
    part_abbreviation (const part_abbreviation_optional& x);

    void
    part_abbreviation (::std::unique_ptr< part_abbreviation_type > p);

    // part-abbreviation-display
    //
    typedef ::musicxml::name_display part_abbreviation_display_type;
    typedef ::xsd::cxx::tree::optional< part_abbreviation_display_type > part_abbreviation_display_optional;
    typedef ::xsd::cxx::tree::traits< part_abbreviation_display_type, char > part_abbreviation_display_traits;

    const part_abbreviation_display_optional&
    part_abbreviation_display () const;

    part_abbreviation_display_optional&
    part_abbreviation_display ();

    void
    part_abbreviation_display (const part_abbreviation_display_type& x);

    void
    part_abbreviation_display (const part_abbreviation_display_optional& x);

    void
    part_abbreviation_display (::std::unique_ptr< part_abbreviation_display_type > p);

    // group
    //
    typedef ::xml_schema::string group_type;
    typedef ::xsd::cxx::tree::sequence< group_type > group_sequence;
    typedef group_sequence::iterator group_iterator;
    typedef group_sequence::const_iterator group_const_iterator;
    typedef ::xsd::cxx::tree::traits< group_type, char > group_traits;

    const group_sequence&
    group () const;

    group_sequence&
    group ();

    void
    group (const group_sequence& s);

    // score-instrument
    //
    typedef ::musicxml::score_instrument score_instrument_type;
    typedef ::xsd::cxx::tree::sequence< score_instrument_type > score_instrument_sequence;
    typedef score_instrument_sequence::iterator score_instrument_iterator;
    typedef score_instrument_sequence::const_iterator score_instrument_const_iterator;
    typedef ::xsd::cxx::tree::traits< score_instrument_type, char > score_instrument_traits;

    const score_instrument_sequence&
    score_instrument () const;

    score_instrument_sequence&
    score_instrument ();

    void
    score_instrument (const score_instrument_sequence& s);

    // player
    //
    typedef ::musicxml::player player_type;
    typedef ::xsd::cxx::tree::sequence< player_type > player_sequence;
    typedef player_sequence::iterator player_iterator;
    typedef player_sequence::const_iterator player_const_iterator;
    typedef ::xsd::cxx::tree::traits< player_type, char > player_traits;

    const player_sequence&
    player () const;

    player_sequence&
    player ();

    void
    player (const player_sequence& s);

    // midi-device
    //
    typedef ::musicxml::midi_device midi_device_type;
    typedef ::xsd::cxx::tree::sequence< midi_device_type > midi_device_sequence;
    typedef midi_device_sequence::iterator midi_device_iterator;
    typedef midi_device_sequence::const_iterator midi_device_const_iterator;
    typedef ::xsd::cxx::tree::traits< midi_device_type, char > midi_device_traits;

    const midi_device_sequence&
    midi_device () const;

    midi_device_sequence&
    midi_device ();

    void
    midi_device (const midi_device_sequence& s);

    // midi-instrument
    //
    typedef ::musicxml::midi_instrument midi_instrument_type;
    typedef ::xsd::cxx::tree::sequence< midi_instrument_type > midi_instrument_sequence;
    typedef midi_instrument_sequence::iterator midi_instrument_iterator;
    typedef midi_instrument_sequence::const_iterator midi_instrument_const_iterator;
    typedef ::xsd::cxx::tree::traits< midi_instrument_type, char > midi_instrument_traits;

    const midi_instrument_sequence&
    midi_instrument () const;

    midi_instrument_sequence&
    midi_instrument ();

    void
    midi_instrument (const midi_instrument_sequence& s);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    score_part (const part_name_type&,
                const id_type&);

    score_part (::std::unique_ptr< part_name_type >,
                const id_type&);

    score_part (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    score_part (const score_part& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual score_part*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    score_part&
    operator= (const score_part& x);

    virtual 
    ~score_part ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    identification_optional identification_;
    part_link_sequence part_link_;
    ::xsd::cxx::tree::one< part_name_type > part_name_;
    part_name_display_optional part_name_display_;
    part_abbreviation_optional part_abbreviation_;
    part_abbreviation_display_optional part_abbreviation_display_;
    group_sequence group_;
    score_instrument_sequence score_instrument_;
    player_sequence player_;
    midi_device_sequence midi_device_;
    midi_instrument_sequence midi_instrument_;
    ::xsd::cxx::tree::one< id_type > id_;
  };

  class virtual_instrument: public ::xml_schema::type
  {
    public:
    // virtual-library
    //
    typedef ::xml_schema::string virtual_library_type;
    typedef ::xsd::cxx::tree::optional< virtual_library_type > virtual_library_optional;
    typedef ::xsd::cxx::tree::traits< virtual_library_type, char > virtual_library_traits;

    const virtual_library_optional&
    virtual_library () const;

    virtual_library_optional&
    virtual_library ();

    void
    virtual_library (const virtual_library_type& x);

    void
    virtual_library (const virtual_library_optional& x);

    void
    virtual_library (::std::unique_ptr< virtual_library_type > p);

    // virtual-name
    //
    typedef ::xml_schema::string virtual_name_type;
    typedef ::xsd::cxx::tree::optional< virtual_name_type > virtual_name_optional;
    typedef ::xsd::cxx::tree::traits< virtual_name_type, char > virtual_name_traits;

    const virtual_name_optional&
    virtual_name () const;

    virtual_name_optional&
    virtual_name ();

    void
    virtual_name (const virtual_name_type& x);

    void
    virtual_name (const virtual_name_optional& x);

    void
    virtual_name (::std::unique_ptr< virtual_name_type > p);

    // Constructors.
    //
    virtual_instrument ();

    virtual_instrument (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual_instrument (const virtual_instrument& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual virtual_instrument*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual_instrument&
    operator= (const virtual_instrument& x);

    virtual 
    ~virtual_instrument ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    virtual_library_optional virtual_library_;
    virtual_name_optional virtual_name_;
  };

  class work: public ::xml_schema::type
  {
    public:
    // work-number
    //
    typedef ::xml_schema::string work_number_type;
    typedef ::xsd::cxx::tree::optional< work_number_type > work_number_optional;
    typedef ::xsd::cxx::tree::traits< work_number_type, char > work_number_traits;

    const work_number_optional&
    work_number () const;

    work_number_optional&
    work_number ();

    void
    work_number (const work_number_type& x);

    void
    work_number (const work_number_optional& x);

    void
    work_number (::std::unique_ptr< work_number_type > p);

    // work-title
    //
    typedef ::xml_schema::string work_title_type;
    typedef ::xsd::cxx::tree::optional< work_title_type > work_title_optional;
    typedef ::xsd::cxx::tree::traits< work_title_type, char > work_title_traits;

    const work_title_optional&
    work_title () const;

    work_title_optional&
    work_title ();

    void
    work_title (const work_title_type& x);

    void
    work_title (const work_title_optional& x);

    void
    work_title (::std::unique_ptr< work_title_type > p);

    // opus
    //
    typedef ::musicxml::opus opus_type;
    typedef ::xsd::cxx::tree::optional< opus_type > opus_optional;
    typedef ::xsd::cxx::tree::traits< opus_type, char > opus_traits;

    const opus_optional&
    opus () const;

    opus_optional&
    opus ();

    void
    opus (const opus_type& x);

    void
    opus (const opus_optional& x);

    void
    opus (::std::unique_ptr< opus_type > p);

    // Constructors.
    //
    work ();

    work (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    work (const work& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual work*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    work&
    operator= (const work& x);

    virtual 
    ~work ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    work_number_optional work_number_;
    work_title_optional work_title_;
    opus_optional opus_;
  };

  class number_or_normal_member: public ::xml_schema::token
  {
    public:
    enum value
    {
      normal
    };

    number_or_normal_member (value v);

    number_or_normal_member (const char* v);

    number_or_normal_member (const ::std::string& v);

    number_or_normal_member (const ::xml_schema::token& v);

    number_or_normal_member (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    number_or_normal_member (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    number_or_normal_member (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    number_or_normal_member (const number_or_normal_member& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual number_or_normal_member*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    number_or_normal_member&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_number_or_normal_member_convert ();
    }

    protected:
    value
    _xsd_number_or_normal_member_convert () const;

    public:
    static const char* const _xsd_number_or_normal_member_literals_[1];
    static const value _xsd_number_or_normal_member_indexes_[1];
  };

  class positive_integer_or_empty_member: public ::xml_schema::string
  {
    public:
    enum value
    {
      empty
    };

    positive_integer_or_empty_member (value v);

    positive_integer_or_empty_member (const char* v);

    positive_integer_or_empty_member (const ::std::string& v);

    positive_integer_or_empty_member (const ::xml_schema::string& v);

    positive_integer_or_empty_member (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    positive_integer_or_empty_member (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    positive_integer_or_empty_member (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    positive_integer_or_empty_member (const positive_integer_or_empty_member& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    virtual positive_integer_or_empty_member*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    positive_integer_or_empty_member&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_positive_integer_or_empty_member_convert ();
    }

    protected:
    value
    _xsd_positive_integer_or_empty_member_convert () const;

    public:
    static const char* const _xsd_positive_integer_or_empty_member_literals_[1];
    static const value _xsd_positive_integer_or_empty_member_indexes_[1];
  };

  class directive: public ::xml_schema::string
  {
    public:
    // default-x
    //
    typedef ::musicxml::tenths default_x_type;
    typedef ::xsd::cxx::tree::optional< default_x_type > default_x_optional;
    typedef ::xsd::cxx::tree::traits< default_x_type, char > default_x_traits;

    const default_x_optional&
    default_x () const;

    default_x_optional&
    default_x ();

    void
    default_x (const default_x_type& x);

    void
    default_x (const default_x_optional& x);

    void
    default_x (::std::unique_ptr< default_x_type > p);

    // default-y
    //
    typedef ::musicxml::tenths default_y_type;
    typedef ::xsd::cxx::tree::optional< default_y_type > default_y_optional;
    typedef ::xsd::cxx::tree::traits< default_y_type, char > default_y_traits;

    const default_y_optional&
    default_y () const;

    default_y_optional&
    default_y ();

    void
    default_y (const default_y_type& x);

    void
    default_y (const default_y_optional& x);

    void
    default_y (::std::unique_ptr< default_y_type > p);

    // relative-x
    //
    typedef ::musicxml::tenths relative_x_type;
    typedef ::xsd::cxx::tree::optional< relative_x_type > relative_x_optional;
    typedef ::xsd::cxx::tree::traits< relative_x_type, char > relative_x_traits;

    const relative_x_optional&
    relative_x () const;

    relative_x_optional&
    relative_x ();

    void
    relative_x (const relative_x_type& x);

    void
    relative_x (const relative_x_optional& x);

    void
    relative_x (::std::unique_ptr< relative_x_type > p);

    // relative-y
    //
    typedef ::musicxml::tenths relative_y_type;
    typedef ::xsd::cxx::tree::optional< relative_y_type > relative_y_optional;
    typedef ::xsd::cxx::tree::traits< relative_y_type, char > relative_y_traits;

    const relative_y_optional&
    relative_y () const;

    relative_y_optional&
    relative_y ();

    void
    relative_y (const relative_y_type& x);

    void
    relative_y (const relative_y_optional& x);

    void
    relative_y (::std::unique_ptr< relative_y_type > p);

    // font-family
    //
    typedef ::musicxml::font_family font_family_type;
    typedef ::xsd::cxx::tree::optional< font_family_type > font_family_optional;
    typedef ::xsd::cxx::tree::traits< font_family_type, char > font_family_traits;

    const font_family_optional&
    font_family () const;

    font_family_optional&
    font_family ();

    void
    font_family (const font_family_type& x);

    void
    font_family (const font_family_optional& x);

    void
    font_family (::std::unique_ptr< font_family_type > p);

    // font-style
    //
    typedef ::musicxml::font_style font_style_type;
    typedef ::xsd::cxx::tree::optional< font_style_type > font_style_optional;
    typedef ::xsd::cxx::tree::traits< font_style_type, char > font_style_traits;

    const font_style_optional&
    font_style () const;

    font_style_optional&
    font_style ();

    void
    font_style (const font_style_type& x);

    void
    font_style (const font_style_optional& x);

    void
    font_style (::std::unique_ptr< font_style_type > p);

    // font-size
    //
    typedef ::musicxml::font_size font_size_type;
    typedef ::xsd::cxx::tree::optional< font_size_type > font_size_optional;
    typedef ::xsd::cxx::tree::traits< font_size_type, char > font_size_traits;

    const font_size_optional&
    font_size () const;

    font_size_optional&
    font_size ();

    void
    font_size (const font_size_type& x);

    void
    font_size (const font_size_optional& x);

    void
    font_size (::std::unique_ptr< font_size_type > p);

    // font-weight
    //
    typedef ::musicxml::font_weight font_weight_type;
    typedef ::xsd::cxx::tree::optional< font_weight_type > font_weight_optional;
    typedef ::xsd::cxx::tree::traits< font_weight_type, char > font_weight_traits;

    const font_weight_optional&
    font_weight () const;

    font_weight_optional&
    font_weight ();

    void
    font_weight (const font_weight_type& x);

    void
    font_weight (const font_weight_optional& x);

    void
    font_weight (::std::unique_ptr< font_weight_type > p);

    // color
    //
    typedef ::musicxml::color color_type;
    typedef ::xsd::cxx::tree::optional< color_type > color_optional;
    typedef ::xsd::cxx::tree::traits< color_type, char > color_traits;

    const color_optional&
    color () const;

    color_optional&
    color ();

    void
    color (const color_type& x);

    void
    color (const color_optional& x);

    void
    color (::std::unique_ptr< color_type > p);

    // lang
    //
    typedef ::namespace_::lang lang_type;
    typedef ::xsd::cxx::tree::optional< lang_type > lang_optional;
    typedef ::xsd::cxx::tree::traits< lang_type, char > lang_traits;

    const lang_optional&
    lang () const;

    lang_optional&
    lang ();

    void
    lang (const lang_type& x);

    void
    lang (const lang_optional& x);

    void
    lang (::std::unique_ptr< lang_type > p);

    // Constructors.
    //
    directive ();

    directive (const char*);

    directive (const ::std::string&);

    directive (const ::xml_schema::string&);

    directive (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    directive (const directive& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual directive*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    directive&
    operator= (const directive& x);

    virtual 
    ~directive ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    default_x_optional default_x_;
    default_y_optional default_y_;
    relative_x_optional relative_x_;
    relative_y_optional relative_y_;
    font_family_optional font_family_;
    font_style_optional font_style_;
    font_size_optional font_size_;
    font_weight_optional font_weight_;
    color_optional color_;
    lang_optional lang_;
  };

  class score_partwise: public ::xml_schema::type
  {
    public:
    // work
    //
    typedef ::musicxml::work work_type;
    typedef ::xsd::cxx::tree::optional< work_type > work_optional;
    typedef ::xsd::cxx::tree::traits< work_type, char > work_traits;

    const work_optional&
    work () const;

    work_optional&
    work ();

    void
    work (const work_type& x);

    void
    work (const work_optional& x);

    void
    work (::std::unique_ptr< work_type > p);

    // movement-number
    //
    typedef ::xml_schema::string movement_number_type;
    typedef ::xsd::cxx::tree::optional< movement_number_type > movement_number_optional;
    typedef ::xsd::cxx::tree::traits< movement_number_type, char > movement_number_traits;

    const movement_number_optional&
    movement_number () const;

    movement_number_optional&
    movement_number ();

    void
    movement_number (const movement_number_type& x);

    void
    movement_number (const movement_number_optional& x);

    void
    movement_number (::std::unique_ptr< movement_number_type > p);

    // movement-title
    //
    typedef ::xml_schema::string movement_title_type;
    typedef ::xsd::cxx::tree::optional< movement_title_type > movement_title_optional;
    typedef ::xsd::cxx::tree::traits< movement_title_type, char > movement_title_traits;

    const movement_title_optional&
    movement_title () const;

    movement_title_optional&
    movement_title ();

    void
    movement_title (const movement_title_type& x);

    void
    movement_title (const movement_title_optional& x);

    void
    movement_title (::std::unique_ptr< movement_title_type > p);

    // identification
    //
    typedef ::musicxml::identification identification_type;
    typedef ::xsd::cxx::tree::optional< identification_type > identification_optional;
    typedef ::xsd::cxx::tree::traits< identification_type, char > identification_traits;

    const identification_optional&
    identification () const;

    identification_optional&
    identification ();

    void
    identification (const identification_type& x);

    void
    identification (const identification_optional& x);

    void
    identification (::std::unique_ptr< identification_type > p);

    // defaults
    //
    typedef ::musicxml::defaults defaults_type;
    typedef ::xsd::cxx::tree::optional< defaults_type > defaults_optional;
    typedef ::xsd::cxx::tree::traits< defaults_type, char > defaults_traits;

    const defaults_optional&
    defaults () const;

    defaults_optional&
    defaults ();

    void
    defaults (const defaults_type& x);

    void
    defaults (const defaults_optional& x);

    void
    defaults (::std::unique_ptr< defaults_type > p);

    // credit
    //
    typedef ::musicxml::credit credit_type;
    typedef ::xsd::cxx::tree::sequence< credit_type > credit_sequence;
    typedef credit_sequence::iterator credit_iterator;
    typedef credit_sequence::const_iterator credit_const_iterator;
    typedef ::xsd::cxx::tree::traits< credit_type, char > credit_traits;

    const credit_sequence&
    credit () const;

    credit_sequence&
    credit ();

    void
    credit (const credit_sequence& s);

    // part-list
    //
    typedef ::musicxml::part_list part_list_type;
    typedef ::xsd::cxx::tree::traits< part_list_type, char > part_list_traits;

    const part_list_type&
    part_list () const;

    part_list_type&
    part_list ();

    void
    part_list (const part_list_type& x);

    void
    part_list (::std::unique_ptr< part_list_type > p);

    // part
    //
    typedef ::musicxml::part part_type;
    typedef ::xsd::cxx::tree::sequence< part_type > part_sequence;
    typedef part_sequence::iterator part_iterator;
    typedef part_sequence::const_iterator part_const_iterator;
    typedef ::xsd::cxx::tree::traits< part_type, char > part_traits;

    const part_sequence&
    part () const;

    part_sequence&
    part ();

    void
    part (const part_sequence& s);

    // version
    //
    typedef ::xml_schema::token version_type;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_type&
    version () const;

    version_type&
    version ();

    void
    version (const version_type& x);

    void
    version (::std::unique_ptr< version_type > p);

    static const version_type&
    version_default_value ();

    // Constructors.
    //
    score_partwise (const part_list_type&);

    score_partwise (::std::unique_ptr< part_list_type >);

    score_partwise (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    score_partwise (const score_partwise& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual score_partwise*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    score_partwise&
    operator= (const score_partwise& x);

    virtual 
    ~score_partwise ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    work_optional work_;
    movement_number_optional movement_number_;
    movement_title_optional movement_title_;
    identification_optional identification_;
    defaults_optional defaults_;
    credit_sequence credit_;
    ::xsd::cxx::tree::one< part_list_type > part_list_;
    part_sequence part_;
    ::xsd::cxx::tree::one< version_type > version_;
    static const version_type version_default_value_;
  };

  class score_timewise: public ::xml_schema::type
  {
    public:
    // work
    //
    typedef ::musicxml::work work_type;
    typedef ::xsd::cxx::tree::optional< work_type > work_optional;
    typedef ::xsd::cxx::tree::traits< work_type, char > work_traits;

    const work_optional&
    work () const;

    work_optional&
    work ();

    void
    work (const work_type& x);

    void
    work (const work_optional& x);

    void
    work (::std::unique_ptr< work_type > p);

    // movement-number
    //
    typedef ::xml_schema::string movement_number_type;
    typedef ::xsd::cxx::tree::optional< movement_number_type > movement_number_optional;
    typedef ::xsd::cxx::tree::traits< movement_number_type, char > movement_number_traits;

    const movement_number_optional&
    movement_number () const;

    movement_number_optional&
    movement_number ();

    void
    movement_number (const movement_number_type& x);

    void
    movement_number (const movement_number_optional& x);

    void
    movement_number (::std::unique_ptr< movement_number_type > p);

    // movement-title
    //
    typedef ::xml_schema::string movement_title_type;
    typedef ::xsd::cxx::tree::optional< movement_title_type > movement_title_optional;
    typedef ::xsd::cxx::tree::traits< movement_title_type, char > movement_title_traits;

    const movement_title_optional&
    movement_title () const;

    movement_title_optional&
    movement_title ();

    void
    movement_title (const movement_title_type& x);

    void
    movement_title (const movement_title_optional& x);

    void
    movement_title (::std::unique_ptr< movement_title_type > p);

    // identification
    //
    typedef ::musicxml::identification identification_type;
    typedef ::xsd::cxx::tree::optional< identification_type > identification_optional;
    typedef ::xsd::cxx::tree::traits< identification_type, char > identification_traits;

    const identification_optional&
    identification () const;

    identification_optional&
    identification ();

    void
    identification (const identification_type& x);

    void
    identification (const identification_optional& x);

    void
    identification (::std::unique_ptr< identification_type > p);

    // defaults
    //
    typedef ::musicxml::defaults defaults_type;
    typedef ::xsd::cxx::tree::optional< defaults_type > defaults_optional;
    typedef ::xsd::cxx::tree::traits< defaults_type, char > defaults_traits;

    const defaults_optional&
    defaults () const;

    defaults_optional&
    defaults ();

    void
    defaults (const defaults_type& x);

    void
    defaults (const defaults_optional& x);

    void
    defaults (::std::unique_ptr< defaults_type > p);

    // credit
    //
    typedef ::musicxml::credit credit_type;
    typedef ::xsd::cxx::tree::sequence< credit_type > credit_sequence;
    typedef credit_sequence::iterator credit_iterator;
    typedef credit_sequence::const_iterator credit_const_iterator;
    typedef ::xsd::cxx::tree::traits< credit_type, char > credit_traits;

    const credit_sequence&
    credit () const;

    credit_sequence&
    credit ();

    void
    credit (const credit_sequence& s);

    // part-list
    //
    typedef ::musicxml::part_list part_list_type;
    typedef ::xsd::cxx::tree::traits< part_list_type, char > part_list_traits;

    const part_list_type&
    part_list () const;

    part_list_type&
    part_list ();

    void
    part_list (const part_list_type& x);

    void
    part_list (::std::unique_ptr< part_list_type > p);

    // measure
    //
    typedef ::musicxml::measure measure_type;
    typedef ::xsd::cxx::tree::sequence< measure_type > measure_sequence;
    typedef measure_sequence::iterator measure_iterator;
    typedef measure_sequence::const_iterator measure_const_iterator;
    typedef ::xsd::cxx::tree::traits< measure_type, char > measure_traits;

    const measure_sequence&
    measure () const;

    measure_sequence&
    measure ();

    void
    measure (const measure_sequence& s);

    // version
    //
    typedef ::xml_schema::token version_type;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_type&
    version () const;

    version_type&
    version ();

    void
    version (const version_type& x);

    void
    version (::std::unique_ptr< version_type > p);

    static const version_type&
    version_default_value ();

    // Constructors.
    //
    score_timewise (const part_list_type&);

    score_timewise (::std::unique_ptr< part_list_type >);

    score_timewise (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    score_timewise (const score_timewise& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual score_timewise*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    score_timewise&
    operator= (const score_timewise& x);

    virtual 
    ~score_timewise ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    work_optional work_;
    movement_number_optional movement_number_;
    movement_title_optional movement_title_;
    identification_optional identification_;
    defaults_optional defaults_;
    credit_sequence credit_;
    ::xsd::cxx::tree::one< part_list_type > part_list_;
    measure_sequence measure_;
    ::xsd::cxx::tree::one< version_type > version_;
    static const version_type version_default_value_;
  };

  class part: public ::xml_schema::type
  {
    public:
    // measure
    //
    typedef ::musicxml::measure1 measure_type;
    typedef ::xsd::cxx::tree::sequence< measure_type > measure_sequence;
    typedef measure_sequence::iterator measure_iterator;
    typedef measure_sequence::const_iterator measure_const_iterator;
    typedef ::xsd::cxx::tree::traits< measure_type, char > measure_traits;

    const measure_sequence&
    measure () const;

    measure_sequence&
    measure ();

    void
    measure (const measure_sequence& s);

    // id
    //
    typedef ::xml_schema::idref id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    part (const id_type&);

    part (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    part (const part& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual part*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    part&
    operator= (const part& x);

    virtual 
    ~part ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    measure_sequence measure_;
    ::xsd::cxx::tree::one< id_type > id_;
  };

  class measure: public ::xml_schema::type
  {
    public:
    // part
    //
    typedef ::musicxml::part1 part_type;
    typedef ::xsd::cxx::tree::sequence< part_type > part_sequence;
    typedef part_sequence::iterator part_iterator;
    typedef part_sequence::const_iterator part_const_iterator;
    typedef ::xsd::cxx::tree::traits< part_type, char > part_traits;

    const part_sequence&
    part () const;

    part_sequence&
    part ();

    void
    part (const part_sequence& s);

    // number
    //
    typedef ::xml_schema::token number_type;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_type&
    number () const;

    number_type&
    number ();

    void
    number (const number_type& x);

    void
    number (::std::unique_ptr< number_type > p);

    // text
    //
    typedef ::musicxml::measure_text text_type;
    typedef ::xsd::cxx::tree::optional< text_type > text_optional;
    typedef ::xsd::cxx::tree::traits< text_type, char > text_traits;

    const text_optional&
    text () const;

    text_optional&
    text ();

    void
    text (const text_type& x);

    void
    text (const text_optional& x);

    void
    text (::std::unique_ptr< text_type > p);

    // implicit
    //
    typedef ::musicxml::yes_no implicit_type;
    typedef ::xsd::cxx::tree::optional< implicit_type > implicit_optional;
    typedef ::xsd::cxx::tree::traits< implicit_type, char > implicit_traits;

    const implicit_optional&
    implicit () const;

    implicit_optional&
    implicit ();

    void
    implicit (const implicit_type& x);

    void
    implicit (const implicit_optional& x);

    void
    implicit (::std::unique_ptr< implicit_type > p);

    // non-controlling
    //
    typedef ::musicxml::yes_no non_controlling_type;
    typedef ::xsd::cxx::tree::optional< non_controlling_type > non_controlling_optional;
    typedef ::xsd::cxx::tree::traits< non_controlling_type, char > non_controlling_traits;

    const non_controlling_optional&
    non_controlling () const;

    non_controlling_optional&
    non_controlling ();

    void
    non_controlling (const non_controlling_type& x);

    void
    non_controlling (const non_controlling_optional& x);

    void
    non_controlling (::std::unique_ptr< non_controlling_type > p);

    // width
    //
    typedef ::musicxml::tenths width_type;
    typedef ::xsd::cxx::tree::optional< width_type > width_optional;
    typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

    const width_optional&
    width () const;

    width_optional&
    width ();

    void
    width (const width_type& x);

    void
    width (const width_optional& x);

    void
    width (::std::unique_ptr< width_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    measure (const number_type&);

    measure (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    measure (const measure& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual measure*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    measure&
    operator= (const measure& x);

    virtual 
    ~measure ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    part_sequence part_;
    ::xsd::cxx::tree::one< number_type > number_;
    text_optional text_;
    implicit_optional implicit_;
    non_controlling_optional non_controlling_;
    width_optional width_;
    id_optional id_;
  };

  class measure1: public ::xml_schema::type
  {
    public:
    // note
    //
    typedef ::musicxml::note note_type;
    typedef ::xsd::cxx::tree::sequence< note_type > note_sequence;
    typedef note_sequence::iterator note_iterator;
    typedef note_sequence::const_iterator note_const_iterator;
    typedef ::xsd::cxx::tree::traits< note_type, char > note_traits;

    static const ::std::size_t note_id = 1UL;

    const note_sequence&
    note () const;

    note_sequence&
    note ();

    void
    note (const note_sequence& s);

    // backup
    //
    typedef ::musicxml::backup backup_type;
    typedef ::xsd::cxx::tree::sequence< backup_type > backup_sequence;
    typedef backup_sequence::iterator backup_iterator;
    typedef backup_sequence::const_iterator backup_const_iterator;
    typedef ::xsd::cxx::tree::traits< backup_type, char > backup_traits;

    static const ::std::size_t backup_id = 2UL;

    const backup_sequence&
    backup () const;

    backup_sequence&
    backup ();

    void
    backup (const backup_sequence& s);

    // forward
    //
    typedef ::musicxml::forward forward_type;
    typedef ::xsd::cxx::tree::sequence< forward_type > forward_sequence;
    typedef forward_sequence::iterator forward_iterator;
    typedef forward_sequence::const_iterator forward_const_iterator;
    typedef ::xsd::cxx::tree::traits< forward_type, char > forward_traits;

    static const ::std::size_t forward_id = 3UL;

    const forward_sequence&
    forward () const;

    forward_sequence&
    forward ();

    void
    forward (const forward_sequence& s);

    // direction
    //
    typedef ::musicxml::direction direction_type;
    typedef ::xsd::cxx::tree::sequence< direction_type > direction_sequence;
    typedef direction_sequence::iterator direction_iterator;
    typedef direction_sequence::const_iterator direction_const_iterator;
    typedef ::xsd::cxx::tree::traits< direction_type, char > direction_traits;

    static const ::std::size_t direction_id = 4UL;

    const direction_sequence&
    direction () const;

    direction_sequence&
    direction ();

    void
    direction (const direction_sequence& s);

    // attributes
    //
    typedef ::musicxml::attributes attributes_type;
    typedef ::xsd::cxx::tree::sequence< attributes_type > attributes_sequence;
    typedef attributes_sequence::iterator attributes_iterator;
    typedef attributes_sequence::const_iterator attributes_const_iterator;
    typedef ::xsd::cxx::tree::traits< attributes_type, char > attributes_traits;

    static const ::std::size_t attributes_id = 5UL;

    const attributes_sequence&
    attributes () const;

    attributes_sequence&
    attributes ();

    void
    attributes (const attributes_sequence& s);

    // harmony
    //
    typedef ::musicxml::harmony harmony_type;
    typedef ::xsd::cxx::tree::sequence< harmony_type > harmony_sequence;
    typedef harmony_sequence::iterator harmony_iterator;
    typedef harmony_sequence::const_iterator harmony_const_iterator;
    typedef ::xsd::cxx::tree::traits< harmony_type, char > harmony_traits;

    static const ::std::size_t harmony_id = 6UL;

    const harmony_sequence&
    harmony () const;

    harmony_sequence&
    harmony ();

    void
    harmony (const harmony_sequence& s);

    // figured-bass
    //
    typedef ::musicxml::figured_bass figured_bass_type;
    typedef ::xsd::cxx::tree::sequence< figured_bass_type > figured_bass_sequence;
    typedef figured_bass_sequence::iterator figured_bass_iterator;
    typedef figured_bass_sequence::const_iterator figured_bass_const_iterator;
    typedef ::xsd::cxx::tree::traits< figured_bass_type, char > figured_bass_traits;

    static const ::std::size_t figured_bass_id = 7UL;

    const figured_bass_sequence&
    figured_bass () const;

    figured_bass_sequence&
    figured_bass ();

    void
    figured_bass (const figured_bass_sequence& s);

    // print
    //
    typedef ::musicxml::print print_type;
    typedef ::xsd::cxx::tree::sequence< print_type > print_sequence;
    typedef print_sequence::iterator print_iterator;
    typedef print_sequence::const_iterator print_const_iterator;
    typedef ::xsd::cxx::tree::traits< print_type, char > print_traits;

    static const ::std::size_t print_id = 8UL;

    const print_sequence&
    print () const;

    print_sequence&
    print ();

    void
    print (const print_sequence& s);

    // sound
    //
    typedef ::musicxml::sound sound_type;
    typedef ::xsd::cxx::tree::sequence< sound_type > sound_sequence;
    typedef sound_sequence::iterator sound_iterator;
    typedef sound_sequence::const_iterator sound_const_iterator;
    typedef ::xsd::cxx::tree::traits< sound_type, char > sound_traits;

    static const ::std::size_t sound_id = 9UL;

    const sound_sequence&
    sound () const;

    sound_sequence&
    sound ();

    void
    sound (const sound_sequence& s);

    // listening
    //
    typedef ::musicxml::listening listening_type;
    typedef ::xsd::cxx::tree::sequence< listening_type > listening_sequence;
    typedef listening_sequence::iterator listening_iterator;
    typedef listening_sequence::const_iterator listening_const_iterator;
    typedef ::xsd::cxx::tree::traits< listening_type, char > listening_traits;

    static const ::std::size_t listening_id = 10UL;

    const listening_sequence&
    listening () const;

    listening_sequence&
    listening ();

    void
    listening (const listening_sequence& s);

    // barline
    //
    typedef ::musicxml::barline barline_type;
    typedef ::xsd::cxx::tree::sequence< barline_type > barline_sequence;
    typedef barline_sequence::iterator barline_iterator;
    typedef barline_sequence::const_iterator barline_const_iterator;
    typedef ::xsd::cxx::tree::traits< barline_type, char > barline_traits;

    static const ::std::size_t barline_id = 11UL;

    const barline_sequence&
    barline () const;

    barline_sequence&
    barline ();

    void
    barline (const barline_sequence& s);

    // grouping
    //
    typedef ::musicxml::grouping grouping_type;
    typedef ::xsd::cxx::tree::sequence< grouping_type > grouping_sequence;
    typedef grouping_sequence::iterator grouping_iterator;
    typedef grouping_sequence::const_iterator grouping_const_iterator;
    typedef ::xsd::cxx::tree::traits< grouping_type, char > grouping_traits;

    static const ::std::size_t grouping_id = 12UL;

    const grouping_sequence&
    grouping () const;

    grouping_sequence&
    grouping ();

    void
    grouping (const grouping_sequence& s);

    // link
    //
    typedef ::musicxml::link link_type;
    typedef ::xsd::cxx::tree::sequence< link_type > link_sequence;
    typedef link_sequence::iterator link_iterator;
    typedef link_sequence::const_iterator link_const_iterator;
    typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

    static const ::std::size_t link_id = 13UL;

    const link_sequence&
    link () const;

    link_sequence&
    link ();

    void
    link (const link_sequence& s);

    // bookmark
    //
    typedef ::musicxml::bookmark bookmark_type;
    typedef ::xsd::cxx::tree::sequence< bookmark_type > bookmark_sequence;
    typedef bookmark_sequence::iterator bookmark_iterator;
    typedef bookmark_sequence::const_iterator bookmark_const_iterator;
    typedef ::xsd::cxx::tree::traits< bookmark_type, char > bookmark_traits;

    static const ::std::size_t bookmark_id = 14UL;

    const bookmark_sequence&
    bookmark () const;

    bookmark_sequence&
    bookmark ();

    void
    bookmark (const bookmark_sequence& s);

    // number
    //
    typedef ::xml_schema::token number_type;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_type&
    number () const;

    number_type&
    number ();

    void
    number (const number_type& x);

    void
    number (::std::unique_ptr< number_type > p);

    // text
    //
    typedef ::musicxml::measure_text text_type;
    typedef ::xsd::cxx::tree::optional< text_type > text_optional;
    typedef ::xsd::cxx::tree::traits< text_type, char > text_traits;

    const text_optional&
    text () const;

    text_optional&
    text ();

    void
    text (const text_type& x);

    void
    text (const text_optional& x);

    void
    text (::std::unique_ptr< text_type > p);

    // implicit
    //
    typedef ::musicxml::yes_no implicit_type;
    typedef ::xsd::cxx::tree::optional< implicit_type > implicit_optional;
    typedef ::xsd::cxx::tree::traits< implicit_type, char > implicit_traits;

    const implicit_optional&
    implicit () const;

    implicit_optional&
    implicit ();

    void
    implicit (const implicit_type& x);

    void
    implicit (const implicit_optional& x);

    void
    implicit (::std::unique_ptr< implicit_type > p);

    // non-controlling
    //
    typedef ::musicxml::yes_no non_controlling_type;
    typedef ::xsd::cxx::tree::optional< non_controlling_type > non_controlling_optional;
    typedef ::xsd::cxx::tree::traits< non_controlling_type, char > non_controlling_traits;

    const non_controlling_optional&
    non_controlling () const;

    non_controlling_optional&
    non_controlling ();

    void
    non_controlling (const non_controlling_type& x);

    void
    non_controlling (const non_controlling_optional& x);

    void
    non_controlling (::std::unique_ptr< non_controlling_type > p);

    // width
    //
    typedef ::musicxml::tenths width_type;
    typedef ::xsd::cxx::tree::optional< width_type > width_optional;
    typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

    const width_optional&
    width () const;

    width_optional&
    width ();

    void
    width (const width_type& x);

    void
    width (const width_optional& x);

    void
    width (::std::unique_ptr< width_type > p);

    // id
    //
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::unique_ptr< id_type > p);

    // content_order
    //
    typedef ::xml_schema::content_order content_order_type;
    typedef ::std::vector< content_order_type > content_order_sequence;
    typedef content_order_sequence::iterator content_order_iterator;
    typedef content_order_sequence::const_iterator content_order_const_iterator;

    const content_order_sequence&
    content_order () const;

    content_order_sequence&
    content_order ();

    void
    content_order (const content_order_sequence& s);

    // Constructors.
    //
    measure1 (const number_type&);

    measure1 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    measure1 (const measure1& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual measure1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    measure1&
    operator= (const measure1& x);

    virtual 
    ~measure1 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    content_order_sequence content_order_;

    note_sequence note_;
    backup_sequence backup_;
    forward_sequence forward_;
    direction_sequence direction_;
    attributes_sequence attributes_;
    harmony_sequence harmony_;
    figured_bass_sequence figured_bass_;
    print_sequence print_;
    sound_sequence sound_;
    listening_sequence listening_;
    barline_sequence barline_;
    grouping_sequence grouping_;
    link_sequence link_;
    bookmark_sequence bookmark_;
    ::xsd::cxx::tree::one< number_type > number_;
    text_optional text_;
    implicit_optional implicit_;
    non_controlling_optional non_controlling_;
    width_optional width_;
    id_optional id_;
  };

  class part1: public ::xml_schema::type
  {
    public:
    // note
    //
    typedef ::musicxml::note note_type;
    typedef ::xsd::cxx::tree::sequence< note_type > note_sequence;
    typedef note_sequence::iterator note_iterator;
    typedef note_sequence::const_iterator note_const_iterator;
    typedef ::xsd::cxx::tree::traits< note_type, char > note_traits;

    const note_sequence&
    note () const;

    note_sequence&
    note ();

    void
    note (const note_sequence& s);

    // backup
    //
    typedef ::musicxml::backup backup_type;
    typedef ::xsd::cxx::tree::sequence< backup_type > backup_sequence;
    typedef backup_sequence::iterator backup_iterator;
    typedef backup_sequence::const_iterator backup_const_iterator;
    typedef ::xsd::cxx::tree::traits< backup_type, char > backup_traits;

    const backup_sequence&
    backup () const;

    backup_sequence&
    backup ();

    void
    backup (const backup_sequence& s);

    // forward
    //
    typedef ::musicxml::forward forward_type;
    typedef ::xsd::cxx::tree::sequence< forward_type > forward_sequence;
    typedef forward_sequence::iterator forward_iterator;
    typedef forward_sequence::const_iterator forward_const_iterator;
    typedef ::xsd::cxx::tree::traits< forward_type, char > forward_traits;

    const forward_sequence&
    forward () const;

    forward_sequence&
    forward ();

    void
    forward (const forward_sequence& s);

    // direction
    //
    typedef ::musicxml::direction direction_type;
    typedef ::xsd::cxx::tree::sequence< direction_type > direction_sequence;
    typedef direction_sequence::iterator direction_iterator;
    typedef direction_sequence::const_iterator direction_const_iterator;
    typedef ::xsd::cxx::tree::traits< direction_type, char > direction_traits;

    const direction_sequence&
    direction () const;

    direction_sequence&
    direction ();

    void
    direction (const direction_sequence& s);

    // attributes
    //
    typedef ::musicxml::attributes attributes_type;
    typedef ::xsd::cxx::tree::sequence< attributes_type > attributes_sequence;
    typedef attributes_sequence::iterator attributes_iterator;
    typedef attributes_sequence::const_iterator attributes_const_iterator;
    typedef ::xsd::cxx::tree::traits< attributes_type, char > attributes_traits;

    const attributes_sequence&
    attributes () const;

    attributes_sequence&
    attributes ();

    void
    attributes (const attributes_sequence& s);

    // harmony
    //
    typedef ::musicxml::harmony harmony_type;
    typedef ::xsd::cxx::tree::sequence< harmony_type > harmony_sequence;
    typedef harmony_sequence::iterator harmony_iterator;
    typedef harmony_sequence::const_iterator harmony_const_iterator;
    typedef ::xsd::cxx::tree::traits< harmony_type, char > harmony_traits;

    const harmony_sequence&
    harmony () const;

    harmony_sequence&
    harmony ();

    void
    harmony (const harmony_sequence& s);

    // figured-bass
    //
    typedef ::musicxml::figured_bass figured_bass_type;
    typedef ::xsd::cxx::tree::sequence< figured_bass_type > figured_bass_sequence;
    typedef figured_bass_sequence::iterator figured_bass_iterator;
    typedef figured_bass_sequence::const_iterator figured_bass_const_iterator;
    typedef ::xsd::cxx::tree::traits< figured_bass_type, char > figured_bass_traits;

    const figured_bass_sequence&
    figured_bass () const;

    figured_bass_sequence&
    figured_bass ();

    void
    figured_bass (const figured_bass_sequence& s);

    // print
    //
    typedef ::musicxml::print print_type;
    typedef ::xsd::cxx::tree::sequence< print_type > print_sequence;
    typedef print_sequence::iterator print_iterator;
    typedef print_sequence::const_iterator print_const_iterator;
    typedef ::xsd::cxx::tree::traits< print_type, char > print_traits;

    const print_sequence&
    print () const;

    print_sequence&
    print ();

    void
    print (const print_sequence& s);

    // sound
    //
    typedef ::musicxml::sound sound_type;
    typedef ::xsd::cxx::tree::sequence< sound_type > sound_sequence;
    typedef sound_sequence::iterator sound_iterator;
    typedef sound_sequence::const_iterator sound_const_iterator;
    typedef ::xsd::cxx::tree::traits< sound_type, char > sound_traits;

    const sound_sequence&
    sound () const;

    sound_sequence&
    sound ();

    void
    sound (const sound_sequence& s);

    // listening
    //
    typedef ::musicxml::listening listening_type;
    typedef ::xsd::cxx::tree::sequence< listening_type > listening_sequence;
    typedef listening_sequence::iterator listening_iterator;
    typedef listening_sequence::const_iterator listening_const_iterator;
    typedef ::xsd::cxx::tree::traits< listening_type, char > listening_traits;

    const listening_sequence&
    listening () const;

    listening_sequence&
    listening ();

    void
    listening (const listening_sequence& s);

    // barline
    //
    typedef ::musicxml::barline barline_type;
    typedef ::xsd::cxx::tree::sequence< barline_type > barline_sequence;
    typedef barline_sequence::iterator barline_iterator;
    typedef barline_sequence::const_iterator barline_const_iterator;
    typedef ::xsd::cxx::tree::traits< barline_type, char > barline_traits;

    const barline_sequence&
    barline () const;

    barline_sequence&
    barline ();

    void
    barline (const barline_sequence& s);

    // grouping
    //
    typedef ::musicxml::grouping grouping_type;
    typedef ::xsd::cxx::tree::sequence< grouping_type > grouping_sequence;
    typedef grouping_sequence::iterator grouping_iterator;
    typedef grouping_sequence::const_iterator grouping_const_iterator;
    typedef ::xsd::cxx::tree::traits< grouping_type, char > grouping_traits;

    const grouping_sequence&
    grouping () const;

    grouping_sequence&
    grouping ();

    void
    grouping (const grouping_sequence& s);

    // link
    //
    typedef ::musicxml::link link_type;
    typedef ::xsd::cxx::tree::sequence< link_type > link_sequence;
    typedef link_sequence::iterator link_iterator;
    typedef link_sequence::const_iterator link_const_iterator;
    typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

    const link_sequence&
    link () const;

    link_sequence&
    link ();

    void
    link (const link_sequence& s);

    // bookmark
    //
    typedef ::musicxml::bookmark bookmark_type;
    typedef ::xsd::cxx::tree::sequence< bookmark_type > bookmark_sequence;
    typedef bookmark_sequence::iterator bookmark_iterator;
    typedef bookmark_sequence::const_iterator bookmark_const_iterator;
    typedef ::xsd::cxx::tree::traits< bookmark_type, char > bookmark_traits;

    const bookmark_sequence&
    bookmark () const;

    bookmark_sequence&
    bookmark ();

    void
    bookmark (const bookmark_sequence& s);

    // id
    //
    typedef ::xml_schema::idref id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::unique_ptr< id_type > p);

    // Constructors.
    //
    part1 (const id_type&);

    part1 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    part1 (const part1& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual part1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    part1&
    operator= (const part1& x);

    virtual 
    ~part1 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    note_sequence note_;
    backup_sequence backup_;
    forward_sequence forward_;
    direction_sequence direction_;
    attributes_sequence attributes_;
    harmony_sequence harmony_;
    figured_bass_sequence figured_bass_;
    print_sequence print_;
    sound_sequence sound_;
    listening_sequence listening_;
    barline_sequence barline_;
    grouping_sequence grouping_;
    link_sequence link_;
    bookmark_sequence bookmark_;
    ::xsd::cxx::tree::one< id_type > id_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace musicxml
{
  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::musicxml::score_partwise >
  score_partwise_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_partwise >
  score_partwise_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_partwise >
  score_partwise_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::musicxml::score_partwise >
  score_partwise_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_partwise >
  score_partwise_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_partwise >
  score_partwise_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_partwise >
  score_partwise_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_partwise >
  score_partwise_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_partwise >
  score_partwise_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::musicxml::score_partwise >
  score_partwise_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_partwise >
  score_partwise_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_partwise >
  score_partwise_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::musicxml::score_partwise >
  score_partwise_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_partwise >
  score_partwise_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::musicxml::score_timewise >
  score_timewise_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_timewise >
  score_timewise_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_timewise >
  score_timewise_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::musicxml::score_timewise >
  score_timewise_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_timewise >
  score_timewise_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_timewise >
  score_timewise_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_timewise >
  score_timewise_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_timewise >
  score_timewise_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_timewise >
  score_timewise_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::musicxml::score_timewise >
  score_timewise_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_timewise >
  score_timewise_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_timewise >
  score_timewise_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::musicxml::score_timewise >
  score_timewise_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::musicxml::score_timewise >
  score_timewise_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MUSICXML_HXX
